
Access Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a174  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001024  0800a318  0800a318  0001a318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b33c  0800b33c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b344  0800b344  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000208  0800b550  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800b550  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001449d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  000346d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00036dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  00037e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d32  00000000  00000000  00038d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129c2  00000000  00000000  00052a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f195  00000000  00000000  00065444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001045d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ad0  00000000  00000000  0010462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2fc 	.word	0x0800a2fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	0800a2fc 	.word	0x0800a2fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <deBounceInit>:

}


void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	717b      	strb	r3, [r7, #5]
 800100a:	4613      	mov	r3, r2
 800100c:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struct
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
	/*Configure GPIO pin */

	switch (mode)
 8001026:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <deBounceInit+0x38>
 800102e:	2b01      	cmp	r3, #1
 8001030:	d003      	beq.n	800103a <deBounceInit+0x3e>
 8001032:	e005      	b.n	8001040 <deBounceInit+0x44>
	{
	case 0: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8001034:	2301      	movs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e002      	b.n	8001040 <deBounceInit+0x44>
	case 1: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	bf00      	nop
	}

	switch (port)
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	2b43      	cmp	r3, #67	; 0x43
 8001044:	d014      	beq.n	8001070 <deBounceInit+0x74>
 8001046:	2b43      	cmp	r3, #67	; 0x43
 8001048:	dc19      	bgt.n	800107e <deBounceInit+0x82>
 800104a:	2b41      	cmp	r3, #65	; 0x41
 800104c:	d002      	beq.n	8001054 <deBounceInit+0x58>
 800104e:	2b42      	cmp	r3, #66	; 0x42
 8001050:	d007      	beq.n	8001062 <deBounceInit+0x66>
	case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
	case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
	case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
	}

}
 8001052:	e014      	b.n	800107e <deBounceInit+0x82>
	case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <deBounceInit+0x8c>)
 800105c:	f002 f9f6 	bl	800344c <HAL_GPIO_Init>
 8001060:	e00d      	b.n	800107e <deBounceInit+0x82>
	case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <deBounceInit+0x90>)
 800106a:	f002 f9ef 	bl	800344c <HAL_GPIO_Init>
 800106e:	e006      	b.n	800107e <deBounceInit+0x82>
	case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <deBounceInit+0x94>)
 8001078:	f002 f9e8 	bl	800344c <HAL_GPIO_Init>
 800107c:	bf00      	nop
}
 800107e:	bf00      	nop
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800

08001094 <deBounceReadPin>:



int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
 800109e:	460b      	mov	r3, r1
 80010a0:	717b      	strb	r3, [r7, #5]
 80010a2:	4613      	mov	r3, r2
 80010a4:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	75fb      	strb	r3, [r7, #23]
	int8_t pinStateWeAreLookingFor;
	int8_t stableInterval = 50;
 80010aa:	2332      	movs	r3, #50	; 0x32
 80010ac:	73fb      	strb	r3, [r7, #15]

	int32_t msTimeStamp = HAL_GetTick();
 80010ae:	f001 fccd 	bl	8002a4c <HAL_GetTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	613b      	str	r3, [r7, #16]

	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	switch (port)
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	2b43      	cmp	r3, #67	; 0x43
 80010ba:	d016      	beq.n	80010ea <deBounceReadPin+0x56>
 80010bc:	2b43      	cmp	r3, #67	; 0x43
 80010be:	dc1c      	bgt.n	80010fa <deBounceReadPin+0x66>
 80010c0:	2b41      	cmp	r3, #65	; 0x41
 80010c2:	d002      	beq.n	80010ca <deBounceReadPin+0x36>
 80010c4:	2b42      	cmp	r3, #66	; 0x42
 80010c6:	d008      	beq.n	80010da <deBounceReadPin+0x46>
 80010c8:	e017      	b.n	80010fa <deBounceReadPin+0x66>
	{
	case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, pin); break;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <deBounceReadPin+0xfc>)
 80010d0:	f002 fb40 	bl	8003754 <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	75fb      	strb	r3, [r7, #23]
 80010d8:	e00f      	b.n	80010fa <deBounceReadPin+0x66>
	case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, pin); break;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	4619      	mov	r1, r3
 80010de:	482d      	ldr	r0, [pc, #180]	; (8001194 <deBounceReadPin+0x100>)
 80010e0:	f002 fb38 	bl	8003754 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]
 80010e8:	e007      	b.n	80010fa <deBounceReadPin+0x66>
	case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, pin); break;
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4619      	mov	r1, r3
 80010ee:	482a      	ldr	r0, [pc, #168]	; (8001198 <deBounceReadPin+0x104>)
 80010f0:	f002 fb30 	bl	8003754 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	75fb      	strb	r3, [r7, #23]
 80010f8:	bf00      	nop
	}

	/* is the GPIO pin high or low */
	if (pinState == GPIO_PIN_RESET) // if low, we're looking for more 0's
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <deBounceReadPin+0x72>
	{
		pinStateWeAreLookingFor = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	75bb      	strb	r3, [r7, #22]
 8001104:	e035      	b.n	8001172 <deBounceReadPin+0xde>
	}
	else
	{
		pinStateWeAreLookingFor = 1; //we're looking for more 1's
 8001106:	2301      	movs	r3, #1
 8001108:	75bb      	strb	r3, [r7, #22]
	}
	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick()<(msTimeStamp + stableInterval))
 800110a:	e032      	b.n	8001172 <deBounceReadPin+0xde>
	{
		switch (port)
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	2b43      	cmp	r3, #67	; 0x43
 8001110:	d016      	beq.n	8001140 <deBounceReadPin+0xac>
 8001112:	2b43      	cmp	r3, #67	; 0x43
 8001114:	dc1c      	bgt.n	8001150 <deBounceReadPin+0xbc>
 8001116:	2b41      	cmp	r3, #65	; 0x41
 8001118:	d002      	beq.n	8001120 <deBounceReadPin+0x8c>
 800111a:	2b42      	cmp	r3, #66	; 0x42
 800111c:	d008      	beq.n	8001130 <deBounceReadPin+0x9c>
 800111e:	e017      	b.n	8001150 <deBounceReadPin+0xbc>
		{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, pin); break;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4619      	mov	r1, r3
 8001124:	481a      	ldr	r0, [pc, #104]	; (8001190 <deBounceReadPin+0xfc>)
 8001126:	f002 fb15 	bl	8003754 <HAL_GPIO_ReadPin>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
 800112e:	e00f      	b.n	8001150 <deBounceReadPin+0xbc>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, pin); break;
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	4619      	mov	r1, r3
 8001134:	4817      	ldr	r0, [pc, #92]	; (8001194 <deBounceReadPin+0x100>)
 8001136:	f002 fb0d 	bl	8003754 <HAL_GPIO_ReadPin>
 800113a:	4603      	mov	r3, r0
 800113c:	75fb      	strb	r3, [r7, #23]
 800113e:	e007      	b.n	8001150 <deBounceReadPin+0xbc>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, pin); break;
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4619      	mov	r1, r3
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <deBounceReadPin+0x104>)
 8001146:	f002 fb05 	bl	8003754 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
 800114e:	bf00      	nop
		}

		if (pinState != pinStateWeAreLookingFor)
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001156:	429a      	cmp	r2, r3
 8001158:	d00b      	beq.n	8001172 <deBounceReadPin+0xde>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 800115a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	75bb      	strb	r3, [r7, #22]
			msTimeStamp = HAL_GetTick();
 800116a:	f001 fc6f 	bl	8002a4c <HAL_GetTick>
 800116e:	4603      	mov	r3, r0
 8001170:	613b      	str	r3, [r7, #16]
	while (HAL_GetTick()<(msTimeStamp + stableInterval))
 8001172:	f001 fc6b 	bl	8002a4c <HAL_GetTick>
 8001176:	4601      	mov	r1, r0
 8001178:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	4299      	cmp	r1, r3
 8001182:	d3c3      	bcc.n	800110c <deBounceReadPin+0x78>
		}
	}

	return (pinStateWeAreLookingFor);
 8001184:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b092      	sub	sp, #72	; 0x48
 80011a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a2:	f001 fbed 	bl	8002980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a6:	f000 fcaf 	bl	8001b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011aa:	f000 fe8b 	bl	8001ec4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011ae:	f000 fd69 	bl	8001c84 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80011b2:	f000 fe5d 	bl	8001e70 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011b6:	f000 fd9b 	bl	8001cf0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80011ba:	f000 fd03 	bl	8001bc4 <MX_ADC1_Init>
  ssd1331_init();
 80011be:	f001 f8ad 	bl	800231c <ssd1331_init>
  /* USER CODE BEGIN 2 */
  char myMessage1[] = "Smart";
 80011c2:	4ab3      	ldr	r2, [pc, #716]	; (8001490 <main+0x2f4>)
 80011c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011cc:	6018      	str	r0, [r3, #0]
 80011ce:	3304      	adds	r3, #4
 80011d0:	8019      	strh	r1, [r3, #0]
  char myMessage2[] = "Access";
 80011d2:	4ab0      	ldr	r2, [pc, #704]	; (8001494 <main+0x2f8>)
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011dc:	6018      	str	r0, [r3, #0]
 80011de:	3304      	adds	r3, #4
 80011e0:	8019      	strh	r1, [r3, #0]
 80011e2:	3302      	adds	r3, #2
 80011e4:	0c0a      	lsrs	r2, r1, #16
 80011e6:	701a      	strb	r2, [r3, #0]
  char myMessage3[] = "Control";
 80011e8:	4aab      	ldr	r2, [pc, #684]	; (8001498 <main+0x2fc>)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011f2:	e883 0003 	stmia.w	r3, {r0, r1}
  char myMessage4[] = "System";
 80011f6:	4aa9      	ldr	r2, [pc, #676]	; (800149c <main+0x300>)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001200:	6018      	str	r0, [r3, #0]
 8001202:	3304      	adds	r3, #4
 8001204:	8019      	strh	r1, [r3, #0]
 8001206:	3302      	adds	r3, #2
 8001208:	0c0a      	lsrs	r2, r1, #16
 800120a:	701a      	strb	r2, [r3, #0]

  deBounceInit(buttonPinOne, port, mode);
 800120c:	4ba4      	ldr	r3, [pc, #656]	; (80014a0 <main+0x304>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4aa4      	ldr	r2, [pc, #656]	; (80014a4 <main+0x308>)
 8001212:	7811      	ldrb	r1, [r2, #0]
 8001214:	4aa4      	ldr	r2, [pc, #656]	; (80014a8 <main+0x30c>)
 8001216:	f992 2000 	ldrsb.w	r2, [r2]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff feee 	bl	8000ffc <deBounceInit>
  deBounceInit(buttonPinTwo, port, mode);
 8001220:	4ba2      	ldr	r3, [pc, #648]	; (80014ac <main+0x310>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	4a9f      	ldr	r2, [pc, #636]	; (80014a4 <main+0x308>)
 8001226:	7811      	ldrb	r1, [r2, #0]
 8001228:	4a9f      	ldr	r2, [pc, #636]	; (80014a8 <main+0x30c>)
 800122a:	f992 2000 	ldrsb.w	r2, [r2]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fee4 	bl	8000ffc <deBounceInit>
  deBounceInit(buttonPinThree, port, mode);
 8001234:	4b9e      	ldr	r3, [pc, #632]	; (80014b0 <main+0x314>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	4a9a      	ldr	r2, [pc, #616]	; (80014a4 <main+0x308>)
 800123a:	7811      	ldrb	r1, [r2, #0]
 800123c:	4a9a      	ldr	r2, [pc, #616]	; (80014a8 <main+0x30c>)
 800123e:	f992 2000 	ldrsb.w	r2, [r2]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff feda 	bl	8000ffc <deBounceInit>
  deBounceInit(buttonPinFour, port, mode);
 8001248:	4b9a      	ldr	r3, [pc, #616]	; (80014b4 <main+0x318>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4a95      	ldr	r2, [pc, #596]	; (80014a4 <main+0x308>)
 800124e:	7811      	ldrb	r1, [r2, #0]
 8001250:	4a95      	ldr	r2, [pc, #596]	; (80014a8 <main+0x30c>)
 8001252:	f992 2000 	ldrsb.w	r2, [r2]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fed0 	bl	8000ffc <deBounceInit>

  /* USER CODE BEGIN 2 */

  int portB3Contains = 1;
 800125c:	2301      	movs	r3, #1
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  int portB4Contains = 1;
 8001260:	2301      	movs	r3, #1
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  int portB5Contains = 1;
 8001264:	2301      	movs	r3, #1
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
  int portB10Contains = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  int ifMatch = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  char passwordEntered[] = "0000";
 8001270:	4a91      	ldr	r2, [pc, #580]	; (80014b8 <main+0x31c>)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001278:	6018      	str	r0, [r3, #0]
 800127a:	3304      	adds	r3, #4
 800127c:	7019      	strb	r1, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  switch(state) //To enter stages
 800127e:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <main+0x320>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	2b04      	cmp	r3, #4
 8001286:	f200 81c8 	bhi.w	800161a <main+0x47e>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <main+0xf4>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a5 	.word	0x080012a5
 8001294:	08001373 	.word	0x08001373
 8001298:	08001519 	.word	0x08001519
 800129c:	080015bf 	.word	0x080015bf
 80012a0:	080015dd 	.word	0x080015dd
  {
	  case 1:
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2101      	movs	r1, #1
 80012a8:	4885      	ldr	r0, [pc, #532]	; (80014c0 <main+0x324>)
 80012aa:	f002 fa6b 	bl	8003784 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2102      	movs	r1, #2
 80012b2:	4883      	ldr	r0, [pc, #524]	; (80014c0 <main+0x324>)
 80012b4:	f002 fa66 	bl	8003784 <HAL_GPIO_WritePin>
		  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <main+0x318>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4a79      	ldr	r2, [pc, #484]	; (80014a4 <main+0x308>)
 80012be:	7811      	ldrb	r1, [r2, #0]
 80012c0:	4a79      	ldr	r2, [pc, #484]	; (80014a8 <main+0x30c>)
 80012c2:	f992 2000 	ldrsb.w	r2, [r2]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fee4 	bl	8001094 <deBounceReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
		  while(portB10Contains) //Check if the Ok button is pushed down
 80012d0:	e048      	b.n	8001364 <main+0x1c8>
		  {
			  ssd1331_clear_screen(BLACK);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 fffd 	bl	80022d2 <ssd1331_clear_screen>
			  ssd1331_display_string(0, 0, myMessage1, FONT_1608, WHITE);
 80012d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2310      	movs	r3, #16
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 ffaa 	bl	8002240 <ssd1331_display_string>
			  ssd1331_display_string(0, 16, myMessage2, FONT_1608, WHITE);
 80012ec:	f107 0220 	add.w	r2, r7, #32
 80012f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2310      	movs	r3, #16
 80012f8:	2110      	movs	r1, #16
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 ffa0 	bl	8002240 <ssd1331_display_string>
			  ssd1331_display_string(0, 32, myMessage3, FONT_1608, WHITE);
 8001300:	f107 0218 	add.w	r2, r7, #24
 8001304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2310      	movs	r3, #16
 800130c:	2120      	movs	r1, #32
 800130e:	2000      	movs	r0, #0
 8001310:	f000 ff96 	bl	8002240 <ssd1331_display_string>
			  ssd1331_display_string(0, 48, myMessage4, FONT_1608, WHITE);
 8001314:	f107 0210 	add.w	r2, r7, #16
 8001318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2310      	movs	r3, #16
 8001320:	2130      	movs	r1, #48	; 0x30
 8001322:	2000      	movs	r0, #0
 8001324:	f000 ff8c 	bl	8002240 <ssd1331_display_string>

			  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 8001328:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <main+0x318>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <main+0x308>)
 800132e:	7811      	ldrb	r1, [r2, #0]
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <main+0x30c>)
 8001332:	f992 2000 	ldrsb.w	r2, [r2]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff feac 	bl	8001094 <deBounceReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
			  while(portB10Contains) // Continue till Ok button is pressed
 8001340:	e00d      	b.n	800135e <main+0x1c2>
			  {
				  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <main+0x318>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <main+0x308>)
 8001348:	7811      	ldrb	r1, [r2, #0]
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <main+0x30c>)
 800134c:	f992 2000 	ldrsb.w	r2, [r2]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe9f 	bl	8001094 <deBounceReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
				  tempMeasure();
 800135a:	f000 fac1 	bl	80018e0 <tempMeasure>
			  while(portB10Contains) // Continue till Ok button is pressed
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1ee      	bne.n	8001342 <main+0x1a6>
		  while(portB10Contains) //Check if the Ok button is pushed down
 8001364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1b3      	bne.n	80012d2 <main+0x136>
			  }
		  }

		  state = 2;
 800136a:	4b54      	ldr	r3, [pc, #336]	; (80014bc <main+0x320>)
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]

		  break;
 8001370:	e158      	b.n	8001624 <main+0x488>



	  case 2:
		  portB3Contains = deBounceReadPin(buttonPinOne, port, mode);
 8001372:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <main+0x304>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <main+0x308>)
 8001378:	7811      	ldrb	r1, [r2, #0]
 800137a:	4a4b      	ldr	r2, [pc, #300]	; (80014a8 <main+0x30c>)
 800137c:	f992 2000 	ldrsb.w	r2, [r2]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe87 	bl	8001094 <deBounceReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
		  portB4Contains = deBounceReadPin(buttonPinTwo, port, mode);
 800138a:	4b48      	ldr	r3, [pc, #288]	; (80014ac <main+0x310>)
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <main+0x308>)
 8001390:	7811      	ldrb	r1, [r2, #0]
 8001392:	4a45      	ldr	r2, [pc, #276]	; (80014a8 <main+0x30c>)
 8001394:	f992 2000 	ldrsb.w	r2, [r2]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe7b 	bl	8001094 <deBounceReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
		  portB5Contains = deBounceReadPin(buttonPinThree, port, mode);
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <main+0x314>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <main+0x308>)
 80013a8:	7811      	ldrb	r1, [r2, #0]
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <main+0x30c>)
 80013ac:	f992 2000 	ldrsb.w	r2, [r2]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe6f 	bl	8001094 <deBounceReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
		  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 80013ba:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <main+0x318>)
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	4a39      	ldr	r2, [pc, #228]	; (80014a4 <main+0x308>)
 80013c0:	7811      	ldrb	r1, [r2, #0]
 80013c2:	4a39      	ldr	r2, [pc, #228]	; (80014a8 <main+0x30c>)
 80013c4:	f992 2000 	ldrsb.w	r2, [r2]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe63 	bl	8001094 <deBounceReadPin>
 80013ce:	4603      	mov	r3, r0
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30

          //Check if the first pin of password (One, Two, Three Pin Input) or Cancel button is pushed down
		  while(portB3Contains && portB4Contains && portB5Contains && portB10Contains)
 80013d2:	e04a      	b.n	800146a <main+0x2ce>
		  {
			  ssd1331_clear_screen(BLACK);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f000 ff7c 	bl	80022d2 <ssd1331_clear_screen>
			  ssd1331_display_string(1, 1, "Enter Pin", FONT_1608, WHITE);
 80013da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2310      	movs	r3, #16
 80013e2:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <main+0x328>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 ff2a 	bl	8002240 <ssd1331_display_string>

              //Continue till the first pin of password (One, Two, Three Pin Input) or Cancel button is pushed down

			  while(portB3Contains && portB4Contains && portB5Contains && portB10Contains)
 80013ec:	e031      	b.n	8001452 <main+0x2b6>
			  {
				  portB3Contains = deBounceReadPin(buttonPinOne, port, mode);
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <main+0x304>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	4a2c      	ldr	r2, [pc, #176]	; (80014a4 <main+0x308>)
 80013f4:	7811      	ldrb	r1, [r2, #0]
 80013f6:	4a2c      	ldr	r2, [pc, #176]	; (80014a8 <main+0x30c>)
 80013f8:	f992 2000 	ldrsb.w	r2, [r2]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fe49 	bl	8001094 <deBounceReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
				  portB4Contains = deBounceReadPin(buttonPinTwo, port, mode);
 8001406:	4b29      	ldr	r3, [pc, #164]	; (80014ac <main+0x310>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <main+0x308>)
 800140c:	7811      	ldrb	r1, [r2, #0]
 800140e:	4a26      	ldr	r2, [pc, #152]	; (80014a8 <main+0x30c>)
 8001410:	f992 2000 	ldrsb.w	r2, [r2]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe3d 	bl	8001094 <deBounceReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
				  portB5Contains = deBounceReadPin(buttonPinThree, port, mode);
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <main+0x314>)
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <main+0x308>)
 8001424:	7811      	ldrb	r1, [r2, #0]
 8001426:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <main+0x30c>)
 8001428:	f992 2000 	ldrsb.w	r2, [r2]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe31 	bl	8001094 <deBounceReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
				  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 8001436:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <main+0x318>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <main+0x308>)
 800143c:	7811      	ldrb	r1, [r2, #0]
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <main+0x30c>)
 8001440:	f992 2000 	ldrsb.w	r2, [r2]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fe25 	bl	8001094 <deBounceReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
				  tempMeasure();
 800144e:	f000 fa47 	bl	80018e0 <tempMeasure>
			  while(portB3Contains && portB4Contains && portB5Contains && portB10Contains)
 8001452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <main+0x2ce>
 8001458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <main+0x2ce>
 800145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001460:	2b00      	cmp	r3, #0
 8001462:	d002      	beq.n	800146a <main+0x2ce>
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1c1      	bne.n	80013ee <main+0x252>
		  while(portB3Contains && portB4Contains && portB5Contains && portB10Contains)
 800146a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <main+0x2e6>
 8001470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <main+0x2e6>
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <main+0x2e6>
 800147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1a8      	bne.n	80013d4 <main+0x238>
			  }
		  }
			  if (portB10Contains == 0) // if Cancel Button is pressed, go to state 4
 8001482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11f      	bne.n	80014c8 <main+0x32c>
			  {
				state = 1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <main+0x320>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
					  {
					  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
					  tempMeasure();
					  }
			  }
			  break;
 800148e:	e0c9      	b.n	8001624 <main+0x488>
 8001490:	0800a3b4 	.word	0x0800a3b4
 8001494:	0800a3bc 	.word	0x0800a3bc
 8001498:	0800a3c4 	.word	0x0800a3c4
 800149c:	0800a3cc 	.word	0x0800a3cc
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000224 	.word	0x20000224
 80014ac:	20000002 	.word	0x20000002
 80014b0:	20000004 	.word	0x20000004
 80014b4:	20000006 	.word	0x20000006
 80014b8:	0800a3d4 	.word	0x0800a3d4
 80014bc:	20000020 	.word	0x20000020
 80014c0:	40020800 	.word	0x40020800
 80014c4:	0800a318 	.word	0x0800a318
				  passwordInput(portB3Contains, portB4Contains, portB5Contains, passwordEntered);
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014d0:	f000 f8c6 	bl	8001660 <passwordInput>
				  state = 3;
 80014d4:	4b54      	ldr	r3, [pc, #336]	; (8001628 <main+0x48c>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	601a      	str	r2, [r3, #0]
				  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 80014da:	4b54      	ldr	r3, [pc, #336]	; (800162c <main+0x490>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	4a54      	ldr	r2, [pc, #336]	; (8001630 <main+0x494>)
 80014e0:	7811      	ldrb	r1, [r2, #0]
 80014e2:	4a54      	ldr	r2, [pc, #336]	; (8001634 <main+0x498>)
 80014e4:	f992 2000 	ldrsb.w	r2, [r2]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fdd3 	bl	8001094 <deBounceReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
					  while(portB10Contains) // Continue till Customer press 'OK'
 80014f2:	e00d      	b.n	8001510 <main+0x374>
					  portB10Contains = deBounceReadPin(buttonPinFour, port, mode);
 80014f4:	4b4d      	ldr	r3, [pc, #308]	; (800162c <main+0x490>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	4a4d      	ldr	r2, [pc, #308]	; (8001630 <main+0x494>)
 80014fa:	7811      	ldrb	r1, [r2, #0]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <main+0x498>)
 80014fe:	f992 2000 	ldrsb.w	r2, [r2]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdc6 	bl	8001094 <deBounceReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
					  tempMeasure();
 800150c:	f000 f9e8 	bl	80018e0 <tempMeasure>
					  while(portB10Contains) // Continue till Customer press 'OK'
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ee      	bne.n	80014f4 <main+0x358>
			  break;
 8001516:	e085      	b.n	8001624 <main+0x488>


	  case 3:
		  ssd1331_clear_screen(BLACK);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 feda 	bl	80022d2 <ssd1331_clear_screen>
		  ssd1331_display_string(1, 1, "Processing", FONT_1608, WHITE);
 800151e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2310      	movs	r3, #16
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <main+0x49c>)
 8001528:	2101      	movs	r1, #1
 800152a:	2001      	movs	r0, #1
 800152c:	f000 fe88 	bl	8002240 <ssd1331_display_string>
		  ssd1331_display_string(1, 16, "...", FONT_1608, WHITE);
 8001530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2310      	movs	r3, #16
 8001538:	4a40      	ldr	r2, [pc, #256]	; (800163c <main+0x4a0>)
 800153a:	2110      	movs	r1, #16
 800153c:	2001      	movs	r0, #1
 800153e:	f000 fe7f 	bl	8002240 <ssd1331_display_string>
		  HAL_Delay(500); //Print the "Processing" for 500s
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f001 fa8d 	bl	8002a64 <HAL_Delay>
		  //Check if password Input by customer match one of the activated passwords
		  passwordMatch(passwordEntered, &ifMatch);
 800154a:	f107 020c 	add.w	r2, r7, #12
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f944 	bl	80017e0 <passwordMatch>
		  if (ifMatch == 1) //if match, go to state 1 and print'Successful'
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d128      	bne.n	80015b0 <main+0x414>
		  {
			  ssd1331_clear_screen(BLACK);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 feb7 	bl	80022d2 <ssd1331_clear_screen>
			  ssd1331_display_string(1, 1, "Successful!", FONT_1608, WHITE);
 8001564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2310      	movs	r3, #16
 800156c:	4a34      	ldr	r2, [pc, #208]	; (8001640 <main+0x4a4>)
 800156e:	2101      	movs	r1, #1
 8001570:	2001      	movs	r0, #1
 8001572:	f000 fe65 	bl	8002240 <ssd1331_display_string>
			  printf("Someone just entered the password successfully!\n");
 8001576:	4833      	ldr	r0, [pc, #204]	; (8001644 <main+0x4a8>)
 8001578:	f005 f906 	bl	8006788 <puts>
			  stepEnable = 1; //turn on the motor
 800157c:	4b32      	ldr	r3, [pc, #200]	; (8001648 <main+0x4ac>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]
			  timeStamp = HAL_GetTick();
 8001582:	f001 fa63 	bl	8002a4c <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <main+0x4b0>)
 800158c:	601a      	str	r2, [r3, #0]
			  motorRotate(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 f94c 	bl	800182c <motorRotate>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2101      	movs	r1, #1
 8001598:	482d      	ldr	r0, [pc, #180]	; (8001650 <main+0x4b4>)
 800159a:	f002 f8f3 	bl	8003784 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2102      	movs	r1, #2
 80015a2:	482b      	ldr	r0, [pc, #172]	; (8001650 <main+0x4b4>)
 80015a4:	f002 f8ee 	bl	8003784 <HAL_GPIO_WritePin>
			  state = 4;
 80015a8:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <main+0x48c>)
 80015aa:	2204      	movs	r2, #4
 80015ac:	601a      	str	r2, [r3, #0]
		  }
		  else if (ifMatch == 0) //if does not match, go to state 6
		  {
			  state = 5;
		  }
		  break;
 80015ae:	e038      	b.n	8001622 <main+0x486>
		  else if (ifMatch == 0) //if does not match, go to state 6
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d135      	bne.n	8001622 <main+0x486>
			  state = 5;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <main+0x48c>)
 80015b8:	2205      	movs	r2, #5
 80015ba:	601a      	str	r2, [r3, #0]
		  break;
 80015bc:	e031      	b.n	8001622 <main+0x486>

	  case 4:
		  ssd1331_display_string(1, 1, "Successful!", FONT_1608, WHITE);
 80015be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2310      	movs	r3, #16
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <main+0x4a4>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fe38 	bl	8002240 <ssd1331_display_string>
		  stepEnable = 1; //turn on the motor
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <main+0x4ac>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
		  tempMeasure();
 80015d6:	f000 f983 	bl	80018e0 <tempMeasure>

		  break;
 80015da:	e023      	b.n	8001624 <main+0x488>

	  case 5:
		  ssd1331_clear_screen(BLACK);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 fe78 	bl	80022d2 <ssd1331_clear_screen>
		  ssd1331_display_string(1, 1, "Invaild", FONT_1608, WHITE);
 80015e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2310      	movs	r3, #16
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <main+0x4b8>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 fe26 	bl	8002240 <ssd1331_display_string>
		  ssd1331_display_string(1, 16, "Password!", FONT_1608, WHITE);
 80015f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2310      	movs	r3, #16
 80015fc:	4a16      	ldr	r2, [pc, #88]	; (8001658 <main+0x4bc>)
 80015fe:	2110      	movs	r1, #16
 8001600:	2001      	movs	r0, #1
 8001602:	f000 fe1d 	bl	8002240 <ssd1331_display_string>
		  printf("Alert!! Someone just entered Invaild Password!\n");
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <main+0x4c0>)
 8001608:	f005 f8be 	bl	8006788 <puts>
		  buzzerAlarm(0);
 800160c:	2000      	movs	r0, #0
 800160e:	f000 fa33 	bl	8001a78 <buzzerAlarm>
		  state = 1; //go to state 1
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <main+0x48c>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
		  break;
 8001618:	e004      	b.n	8001624 <main+0x488>

	  default:
		  state = 1; //go to state 1
 800161a:	4b03      	ldr	r3, [pc, #12]	; (8001628 <main+0x48c>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	e62d      	b.n	800127e <main+0xe2>
		  break;
 8001622:	bf00      	nop
	  switch(state) //To enter stages
 8001624:	e62b      	b.n	800127e <main+0xe2>
 8001626:	bf00      	nop
 8001628:	20000020 	.word	0x20000020
 800162c:	20000006 	.word	0x20000006
 8001630:	20000008 	.word	0x20000008
 8001634:	20000224 	.word	0x20000224
 8001638:	0800a324 	.word	0x0800a324
 800163c:	0800a330 	.word	0x0800a330
 8001640:	0800a334 	.word	0x0800a334
 8001644:	0800a340 	.word	0x0800a340
 8001648:	20000230 	.word	0x20000230
 800164c:	20000234 	.word	0x20000234
 8001650:	40020800 	.word	0x40020800
 8001654:	0800a370 	.word	0x0800a370
 8001658:	0800a378 	.word	0x0800a378
 800165c:	0800a384 	.word	0x0800a384

08001660 <passwordInput>:
  /* USER CODE END 3 */
}


void passwordInput(int oneInput, int twoInput, int threeInput, char *passwordEntered)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af02      	add	r7, sp, #8
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
	if (oneInput == 0) //check if the first pin of password entered by customer is 1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <passwordInput+0x1c>
	{
		passwordEntered[0] = '1';
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2231      	movs	r2, #49	; 0x31
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e00c      	b.n	8001696 <passwordInput+0x36>
	}
	else if (twoInput == 0) //check if the first pin of password entered by customer is 2
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <passwordInput+0x2a>
	{
		passwordEntered[0] = '2';
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2232      	movs	r2, #50	; 0x32
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	e005      	b.n	8001696 <passwordInput+0x36>
	}
	else if (threeInput == 0) //check if the first pin of password entered by customer is 3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <passwordInput+0x36>
	{
		passwordEntered[0] = '3';
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2233      	movs	r2, #51	; 0x33
 8001694:	701a      	strb	r2, [r3, #0]
	}
	//printf("*\r\n");
	HAL_Delay(100);
 8001696:	2064      	movs	r0, #100	; 0x64
 8001698:	f001 f9e4 	bl	8002a64 <HAL_Delay>
	ssd1331_display_string(0, 32, "*", FONT_1608, WHITE);
 800169c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2310      	movs	r3, #16
 80016a4:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <passwordInput+0x168>)
 80016a6:	2120      	movs	r1, #32
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 fdc9 	bl	8002240 <ssd1331_display_string>

	for (uint8_t j = 1; j < 4; j++) //check if the second to fourth pin entered by customer
 80016ae:	2301      	movs	r3, #1
 80016b0:	75fb      	strb	r3, [r7, #23]
 80016b2:	e07f      	b.n	80017b4 <passwordInput+0x154>
	{
	    oneInput = deBounceReadPin(buttonPinOne, port, mode);
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <passwordInput+0x16c>)
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	4a45      	ldr	r2, [pc, #276]	; (80017d0 <passwordInput+0x170>)
 80016ba:	7811      	ldrb	r1, [r2, #0]
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <passwordInput+0x174>)
 80016be:	f992 2000 	ldrsb.w	r2, [r2]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fce6 	bl	8001094 <deBounceReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
		twoInput = deBounceReadPin(buttonPinTwo, port, mode);
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <passwordInput+0x178>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	4a3f      	ldr	r2, [pc, #252]	; (80017d0 <passwordInput+0x170>)
 80016d2:	7811      	ldrb	r1, [r2, #0]
 80016d4:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <passwordInput+0x174>)
 80016d6:	f992 2000 	ldrsb.w	r2, [r2]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fcda 	bl	8001094 <deBounceReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	60bb      	str	r3, [r7, #8]
		threeInput = deBounceReadPin(buttonPinThree, port, mode);
 80016e4:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <passwordInput+0x17c>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4a39      	ldr	r2, [pc, #228]	; (80017d0 <passwordInput+0x170>)
 80016ea:	7811      	ldrb	r1, [r2, #0]
 80016ec:	4a39      	ldr	r2, [pc, #228]	; (80017d4 <passwordInput+0x174>)
 80016ee:	f992 2000 	ldrsb.w	r2, [r2]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fcce 	bl	8001094 <deBounceReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	607b      	str	r3, [r7, #4]
		while (oneInput && twoInput && threeInput) //continue till the second to fourth pin entered by customer
 80016fc:	e023      	b.n	8001746 <passwordInput+0xe6>
		{
			oneInput = deBounceReadPin(buttonPinOne, port, mode);
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <passwordInput+0x16c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <passwordInput+0x170>)
 8001704:	7811      	ldrb	r1, [r2, #0]
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <passwordInput+0x174>)
 8001708:	f992 2000 	ldrsb.w	r2, [r2]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fcc1 	bl	8001094 <deBounceReadPin>
 8001712:	4603      	mov	r3, r0
 8001714:	60fb      	str	r3, [r7, #12]
			twoInput = deBounceReadPin(buttonPinTwo, port, mode);
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <passwordInput+0x178>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	4a2d      	ldr	r2, [pc, #180]	; (80017d0 <passwordInput+0x170>)
 800171c:	7811      	ldrb	r1, [r2, #0]
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <passwordInput+0x174>)
 8001720:	f992 2000 	ldrsb.w	r2, [r2]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fcb5 	bl	8001094 <deBounceReadPin>
 800172a:	4603      	mov	r3, r0
 800172c:	60bb      	str	r3, [r7, #8]
			threeInput = deBounceReadPin(buttonPinThree, port, mode);
 800172e:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <passwordInput+0x17c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <passwordInput+0x170>)
 8001734:	7811      	ldrb	r1, [r2, #0]
 8001736:	4a27      	ldr	r2, [pc, #156]	; (80017d4 <passwordInput+0x174>)
 8001738:	f992 2000 	ldrsb.w	r2, [r2]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fca9 	bl	8001094 <deBounceReadPin>
 8001742:	4603      	mov	r3, r0
 8001744:	607b      	str	r3, [r7, #4]
		while (oneInput && twoInput && threeInput) //continue till the second to fourth pin entered by customer
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <passwordInput+0xf8>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <passwordInput+0xf8>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1d2      	bne.n	80016fe <passwordInput+0x9e>
		}

		if (oneInput == 0) //check if the pin of password entered by customer is 1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d105      	bne.n	800176a <passwordInput+0x10a>
		{
			passwordEntered[j] = '1';
 800175e:	7dfb      	ldrb	r3, [r7, #23]
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	4413      	add	r3, r2
 8001764:	2231      	movs	r2, #49	; 0x31
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e010      	b.n	800178c <passwordInput+0x12c>
		}
		else if (twoInput == 0) //check if the pin of password entered by customer is 2
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <passwordInput+0x11c>
		{
			passwordEntered[j] = '2';
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	2232      	movs	r2, #50	; 0x32
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <passwordInput+0x12c>
		}
		else if (threeInput == 0) //check if the pin of password entered by customer is 3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d104      	bne.n	800178c <passwordInput+0x12c>
		{
			passwordEntered[j] = '3';
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	2233      	movs	r2, #51	; 0x33
 800178a:	701a      	strb	r2, [r3, #0]
		}
		//printf("*\r\n");
		ssd1331_display_string((j * 20), 32, "*", FONT_1608, WHITE);
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	461a      	mov	r2, r3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	b2d8      	uxtb	r0, r3
 8001798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2310      	movs	r3, #16
 80017a0:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <passwordInput+0x168>)
 80017a2:	2120      	movs	r1, #32
 80017a4:	f000 fd4c 	bl	8002240 <ssd1331_display_string>
		HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f001 f95b 	bl	8002a64 <HAL_Delay>
	for (uint8_t j = 1; j < 4; j++) //check if the second to fourth pin entered by customer
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	3301      	adds	r3, #1
 80017b2:	75fb      	strb	r3, [r7, #23]
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	f67f af7c 	bls.w	80016b4 <passwordInput+0x54>
	}
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800a3dc 	.word	0x0800a3dc
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000008 	.word	0x20000008
 80017d4:	20000224 	.word	0x20000224
 80017d8:	20000002 	.word	0x20000002
 80017dc:	20000004 	.word	0x20000004

080017e0 <passwordMatch>:


void passwordMatch(char *passwordEntered, int *ifMatch)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	int passwordInt = atoi(passwordEntered);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f004 f896 	bl	800591c <atoi>
 80017f0:	60b8      	str	r0, [r7, #8]
	*ifMatch = 0;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 9; i++) // To loop all index of activated passwords
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
 80017fc:	e00c      	b.n	8001818 <passwordMatch+0x38>
	{
		// check if the password entered by customer match one of the activated passwords
		if (passwordInt == activatedPassword[i])
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <passwordMatch+0x48>)
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	429a      	cmp	r2, r3
 800180a:	d102      	bne.n	8001812 <passwordMatch+0x32>
		{
			*ifMatch = 1;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 9; i++) // To loop all index of activated passwords
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	3301      	adds	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b08      	cmp	r3, #8
 800181c:	d9ef      	bls.n	80017fe <passwordMatch+0x1e>
		}
	}
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000000c 	.word	0x2000000c

0800182c <motorRotate>:

void motorRotate(int8_t dir)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	stepEnable = 1;
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <motorRotate+0x58>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]
	if (dir == 1) // open the door
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10b      	bne.n	800185c <motorRotate+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); //0E -- enable
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184a:	480f      	ldr	r0, [pc, #60]	; (8001888 <motorRotate+0x5c>)
 800184c:	f001 ff9a 	bl	8003784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET); //FR -- 0 backward, forward 1
 8001850:	2201      	movs	r2, #1
 8001852:	2140      	movs	r1, #64	; 0x40
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <motorRotate+0x5c>)
 8001856:	f001 ff95 	bl	8003784 <HAL_GPIO_WritePin>
	else if (dir == -1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); //0E -- enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET); //FR -- 0 backward, forward 1
	}
}
 800185a:	e00f      	b.n	800187c <motorRotate+0x50>
	else if (dir == -1)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d10a      	bne.n	800187c <motorRotate+0x50>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET); //0E -- enable
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4806      	ldr	r0, [pc, #24]	; (8001888 <motorRotate+0x5c>)
 800186e:	f001 ff89 	bl	8003784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET); //FR -- 0 backward, forward 1
 8001872:	2200      	movs	r2, #0
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <motorRotate+0x5c>)
 8001878:	f001 ff84 	bl	8003784 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000230 	.word	0x20000230
 8001888:	40020800 	.word	0x40020800

0800188c <tempDisplay>:

void tempDisplay(double temp)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
 8001892:	ed87 0b00 	vstr	d0, [r7]
	char tempString[5];
	sprintf(tempString,"%.1f", temp);
 8001896:	f107 0008 	add.w	r0, r7, #8
 800189a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <tempDisplay+0x48>)
 80018a0:	f004 ff80 	bl	80067a4 <siprintf>

	ssd1331_display_string(60, 50, tempString, 12, GREEN);
 80018a4:	f107 0208 	add.w	r2, r7, #8
 80018a8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	230c      	movs	r3, #12
 80018b0:	2132      	movs	r1, #50	; 0x32
 80018b2:	203c      	movs	r0, #60	; 0x3c
 80018b4:	f000 fcc4 	bl	8002240 <ssd1331_display_string>
	ssd1331_display_string(85, 50, "C", 12, GREEN);
 80018b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	230c      	movs	r3, #12
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <tempDisplay+0x4c>)
 80018c2:	2132      	movs	r1, #50	; 0x32
 80018c4:	2055      	movs	r0, #85	; 0x55
 80018c6:	f000 fcbb 	bl	8002240 <ssd1331_display_string>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0800a3e0 	.word	0x0800a3e0
 80018d8:	0800a3e8 	.word	0x0800a3e8
 80018dc:	00000000 	.word	0x00000000

080018e0 <tempMeasure>:

void tempMeasure()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b098      	sub	sp, #96	; 0x60
 80018e4:	af00      	add	r7, sp, #0
	  double sum = 0; //accumulator of measured temperature values
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  double sampleMeasured[10] = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2250      	movs	r2, #80	; 0x50
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 f83d 	bl	8005978 <memset>

	  // find the average temperature
	  for(uint16_t i = 0; i < 10; i++) //calculate the accumulated measured temperature
 80018fe:	2300      	movs	r3, #0
 8001900:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001904:	e064      	b.n	80019d0 <tempMeasure+0xf0>
	  {
		  if (HAL_ADC_Start(&hadc1) !=HAL_OK)
 8001906:	4852      	ldr	r0, [pc, #328]	; (8001a50 <tempMeasure+0x170>)
 8001908:	f001 f914 	bl	8002b34 <HAL_ADC_Start>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <tempMeasure+0x36>
		  {
			Error_Handler();
 8001912:	f000 fba9 	bl	8002068 <Error_Handler>
		  }

		  if (HAL_ADC_PollForConversion(&hadc1, 2) !=HAL_OK)
 8001916:	2102      	movs	r1, #2
 8001918:	484d      	ldr	r0, [pc, #308]	; (8001a50 <tempMeasure+0x170>)
 800191a:	f001 f9bf 	bl	8002c9c <HAL_ADC_PollForConversion>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <tempMeasure+0x4a>
		  {
			Error_Handler();
 8001924:	f000 fba0 	bl	8002068 <Error_Handler>
 8001928:	e04d      	b.n	80019c6 <tempMeasure+0xe6>
		  }
		  else{
			  adcValue = HAL_ADC_GetValue(&hadc1);
 800192a:	4849      	ldr	r0, [pc, #292]	; (8001a50 <tempMeasure+0x170>)
 800192c:	f001 fa41 	bl	8002db2 <HAL_ADC_GetValue>
 8001930:	4603      	mov	r3, r0
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <tempMeasure+0x174>)
 8001936:	801a      	strh	r2, [r3, #0]
			  //temperatureMeasured = (((adcValue + 67.385) / 1231.3) - 0.5258) * 100;
			  temperatureMeasured = ((3.3 * adcValue / 4096) - 0.5258) * 100;
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <tempMeasure+0x174>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fdf9 	bl	8000534 <__aeabi_i2d>
 8001942:	a33f      	add	r3, pc, #252	; (adr r3, 8001a40 <tempMeasure+0x160>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe5e 	bl	8000608 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <tempMeasure+0x178>)
 800195a:	f7fe ff7f 	bl	800085c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	a338      	add	r3, pc, #224	; (adr r3, 8001a48 <tempMeasure+0x168>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fc94 	bl	8000298 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <tempMeasure+0x17c>)
 800197e:	f7fe fe43 	bl	8000608 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4936      	ldr	r1, [pc, #216]	; (8001a60 <tempMeasure+0x180>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
			  sampleMeasured[i] = temperatureMeasured;
 800198c:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <tempMeasure+0x180>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	00c9      	lsls	r1, r1, #3
 8001998:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800199c:	4401      	add	r1, r0
 800199e:	3960      	subs	r1, #96	; 0x60
 80019a0:	e9c1 2300 	strd	r2, r3, [r1]
			  sum = sum + sampleMeasured[i];
 80019a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019ae:	4413      	add	r3, r2
 80019b0:	3b60      	subs	r3, #96	; 0x60
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019ba:	f7fe fc6f 	bl	800029c <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  for(uint16_t i = 0; i < 10; i++) //calculate the accumulated measured temperature
 80019c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80019ca:	3301      	adds	r3, #1
 80019cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80019d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d996      	bls.n	8001906 <tempMeasure+0x26>
		  }
	  }
	  avgTemperature = sum / 10; //average the accumulated measured temperature
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <tempMeasure+0x184>)
 80019de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019e2:	f7fe ff3b 	bl	800085c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	491f      	ldr	r1, [pc, #124]	; (8001a68 <tempMeasure+0x188>)
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]
	  tempDisplay(avgTemperature);
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <tempMeasure+0x188>)
 80019f2:	ed93 7b00 	vldr	d7, [r3]
 80019f6:	eeb0 0a47 	vmov.f32	s0, s14
 80019fa:	eef0 0a67 	vmov.f32	s1, s15
 80019fe:	f7ff ff45 	bl	800188c <tempDisplay>
	  if (avgTemperature > 23)
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <tempMeasure+0x188>)
 8001a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <tempMeasure+0x18c>)
 8001a0e:	f7ff f88b 	bl	8000b28 <__aeabi_dcmpgt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d100      	bne.n	8001a1a <tempMeasure+0x13a>
	  {
		  printf("Fire!\n");
		  printf("Temperature reach %.1f\n", avgTemperature);
		  HAL_Delay(2000);
	  }
}
 8001a18:	e00c      	b.n	8001a34 <tempMeasure+0x154>
		  printf("Fire!\n");
 8001a1a:	4815      	ldr	r0, [pc, #84]	; (8001a70 <tempMeasure+0x190>)
 8001a1c:	f004 feb4 	bl	8006788 <puts>
		  printf("Temperature reach %.1f\n", avgTemperature);
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <tempMeasure+0x188>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	4813      	ldr	r0, [pc, #76]	; (8001a74 <tempMeasure+0x194>)
 8001a28:	f004 fe28 	bl	800667c <iprintf>
		  HAL_Delay(2000);
 8001a2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a30:	f001 f818 	bl	8002a64 <HAL_Delay>
}
 8001a34:	bf00      	nop
 8001a36:	3760      	adds	r7, #96	; 0x60
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	f3af 8000 	nop.w
 8001a40:	66666666 	.word	0x66666666
 8001a44:	400a6666 	.word	0x400a6666
 8001a48:	858793de 	.word	0x858793de
 8001a4c:	3fe0d35a 	.word	0x3fe0d35a
 8001a50:	200002b4 	.word	0x200002b4
 8001a54:	20000238 	.word	0x20000238
 8001a58:	40b00000 	.word	0x40b00000
 8001a5c:	40590000 	.word	0x40590000
 8001a60:	20000240 	.word	0x20000240
 8001a64:	40240000 	.word	0x40240000
 8001a68:	20000248 	.word	0x20000248
 8001a6c:	40370000 	.word	0x40370000
 8001a70:	0800a3ec 	.word	0x0800a3ec
 8001a74:	0800a3f4 	.word	0x0800a3f4

08001a78 <buzzerAlarm>:

void buzzerAlarm(uint8_t match)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	for(uint8_t k = 0; k < 2; k++) //To make sure the buzzer will turn on for 5 seconds (500ms x 5 = 2.5s for each)
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
 8001a86:	e034      	b.n	8001af2 <buzzerAlarm+0x7a>
	{
		if (match == 1)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d117      	bne.n	8001abe <buzzerAlarm+0x46>
		{
		  for(uint32_t i = 46999; i <= 49999; i = i + 1000)
 8001a8e:	f24b 7397 	movw	r3, #46999	; 0xb797
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e00d      	b.n	8001ab2 <buzzerAlarm+0x3a>
		  {
			  TIM2->CCR1 = i;
 8001a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6353      	str	r3, [r2, #52]	; 0x34
			  tempMeasure();
 8001a9e:	f7ff ff1f 	bl	80018e0 <tempMeasure>
			  HAL_Delay(500);
 8001aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001aa6:	f000 ffdd 	bl	8002a64 <HAL_Delay>
		  for(uint32_t i = 46999; i <= 49999; i = i + 1000)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d9ec      	bls.n	8001a96 <buzzerAlarm+0x1e>
 8001abc:	e016      	b.n	8001aec <buzzerAlarm+0x74>

		  }
		}
		else
		{	for(uint32_t j = 11999; j >= 9999; j = j-500)
 8001abe:	f642 63df 	movw	r3, #11999	; 0x2edf
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	e00d      	b.n	8001ae2 <buzzerAlarm+0x6a>
			 {
				TIM2->CCR1 = j;
 8001ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6353      	str	r3, [r2, #52]	; 0x34
				tempMeasure();
 8001ace:	f7ff ff07 	bl	80018e0 <tempMeasure>
				HAL_Delay(500);
 8001ad2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ad6:	f000 ffc5 	bl	8002a64 <HAL_Delay>
		{	for(uint32_t j = 11999; j >= 9999; j = j-500)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f242 720e 	movw	r2, #9998	; 0x270e
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d8ec      	bhi.n	8001ac6 <buzzerAlarm+0x4e>
	for(uint8_t k = 0; k < 2; k++) //To make sure the buzzer will turn on for 5 seconds (500ms x 5 = 2.5s for each)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	3301      	adds	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d9c7      	bls.n	8001a88 <buzzerAlarm+0x10>
			 }

		}
	}
	TIM2->CCR1 = 0;
 8001af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afc:	2200      	movs	r2, #0
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b094      	sub	sp, #80	; 0x50
 8001b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0e:	f107 0320 	add.w	r3, r7, #32
 8001b12:	2230      	movs	r2, #48	; 0x30
 8001b14:	2100      	movs	r1, #0
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 ff2e 	bl	8005978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <SystemClock_Config+0xb4>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <SystemClock_Config+0xb4>)
 8001b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <SystemClock_Config+0xb4>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <SystemClock_Config+0xb8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <SystemClock_Config+0xb8>)
 8001b52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <SystemClock_Config+0xb8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b64:	2302      	movs	r3, #2
 8001b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b6c:	2310      	movs	r3, #16
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0320 	add.w	r3, r7, #32
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fe37 	bl	80037ec <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001b84:	f000 fa70 	bl	8002068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b88:	230f      	movs	r3, #15
 8001b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f002 f89a 	bl	8003cdc <HAL_RCC_ClockConfig>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001bae:	f000 fa5b 	bl	8002068 <Error_Handler>
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3750      	adds	r7, #80	; 0x50
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
  */

	HAL_StatusTypeDef rc;

	/* Initialize ADC */
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <MX_ADC1_Init+0xb0>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <MX_ADC1_Init+0xb0>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MX_ADC1_Init+0xb0>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
	hadc1.Instance = ADC1;
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001be8:	4a24      	ldr	r2, [pc, #144]	; (8001c7c <MX_ADC1_Init+0xb8>)
 8001bea:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001bee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bf2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <MX_ADC1_Init+0xbc>)
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	615a      	str	r2, [r3, #20]

	rc = HAL_ADC_Init(&hadc1);
 8001c34:	4810      	ldr	r0, [pc, #64]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c36:	f000 ff39 	bl	8002aac <HAL_ADC_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	75fb      	strb	r3, [r7, #23]
	if (rc != HAL_OK){
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_ADC1_Init+0x84>
		Error_Handler();
 8001c44:	f000 fa10 	bl	8002068 <Error_Handler>
	}

	ADC_ChannelConfTypeDef sConfig;

	/** Configure Regular Channel*/
	sConfig.Channel = ADC_CHANNEL_12;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c50:	2301      	movs	r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]

	rc = HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <MX_ADC1_Init+0xb4>)
 8001c5a:	f001 f8b7 	bl	8002dcc <HAL_ADC_ConfigChannel>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	75fb      	strb	r3, [r7, #23]

	if (rc != HAL_OK){
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_ADC1_Init+0xa8>
		Error_Handler();
 8001c68:	f000 f9fe 	bl	8002068 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	200002b4 	.word	0x200002b4
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	0f000001 	.word	0x0f000001

08001c84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <MX_SPI2_Init+0x68>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_SPI2_Init+0x64>)
 8001cd6:	f002 f9d1 	bl	800407c <HAL_SPI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ce0:	f000 f9c2 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000025c 	.word	0x2000025c
 8001cec:	40003800 	.word	0x40003800

08001cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d28:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001d2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d3a:	4820      	ldr	r0, [pc, #128]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d3c:	f002 fc90 	bl	8004660 <HAL_TIM_PWM_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d46:	f000 f98f 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4619      	mov	r1, r3
 8001d58:	4818      	ldr	r0, [pc, #96]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d5a:	f003 f9a5 	bl	80050a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d64:	f000 f980 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d68:	2360      	movs	r3, #96	; 0x60
 8001d6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480f      	ldr	r0, [pc, #60]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001d80:	f002 fe76 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d8a:	f000 f96d 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2100      	movs	r1, #0
 8001d92:	201c      	movs	r0, #28
 8001d94:	f001 fb23 	bl	80033de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d98:	201c      	movs	r0, #28
 8001d9a:	f001 fb3c 	bl	8003416 <HAL_NVIC_EnableIRQ>
HAL_TIM_MspPostInit(&htim2);
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001da0:	f000 fc3c 	bl	800261c <HAL_TIM_MspPostInit>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001da4:	2100      	movs	r1, #0
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001da8:	f002 fcaa 	bl	8004700 <HAL_TIM_PWM_Start>
HAL_TIM_Base_Start_IT(&htim2);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM2_Init+0xcc>)
 8001dae:	f002 fbf5 	bl	800459c <HAL_TIM_Base_Start_IT>

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200002fc 	.word	0x200002fc

08001dc0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM2_IRQHandler+0x10>)
 8001dc6:	f002 fd4b 	bl	8004860 <HAL_TIM_IRQHandler>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002fc 	.word	0x200002fc

08001dd4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //Timer Interrupt Setting
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001ddc:	2102      	movs	r1, #2
 8001dde:	481c      	ldr	r0, [pc, #112]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001de0:	f001 fce9 	bl	80037b6 <HAL_GPIO_TogglePin>
	if (stepEnable == 1)
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d12d      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		stepsCounter = stepsCounter + 1;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3301      	adds	r3, #1
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001df4:	6013      	str	r3, [r2, #0]
		flag = 1;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

		if (HAL_GetTick() > 8000 + timeStamp)
 8001dfc:	f000 fe26 	bl	8002a4c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d906      	bls.n	8001e1c <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			state = 1;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
			motorRotate(-1);
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff fd08 	bl	800182c <motorRotate>
		}
		if (stepsCounter/2 == stepRequired)
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0fda      	lsrs	r2, r3, #31
 8001e22:	4413      	add	r3, r2
 8001e24:	105b      	asrs	r3, r3, #1
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10b      	bne.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			stepsCounter = 0;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); //ENABLE -- 0 disable
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3c:	480b      	ldr	r0, [pc, #44]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e3e:	f001 fca1 	bl	8003784 <HAL_GPIO_WritePin>
			stepEnable = 0;
 8001e42:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40020000 	.word	0x40020000
 8001e54:	20000230 	.word	0x20000230
 8001e58:	20000228 	.word	0x20000228
 8001e5c:	2000022c 	.word	0x2000022c
 8001e60:	20000234 	.word	0x20000234
 8001e64:	20000020 	.word	0x20000020
 8001e68:	2000001c 	.word	0x2000001c
 8001e6c:	40020800 	.word	0x40020800

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_USART2_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART2_UART_Init+0x4c>)
 8001ea8:	f003 f980 	bl	80051ac <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001eb2:	f000 f8d9 	bl	8002068 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000344 	.word	0x20000344
 8001ec0:	40004400 	.word	0x40004400

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <MX_GPIO_Init+0x184>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a59      	ldr	r2, [pc, #356]	; (8002048 <MX_GPIO_Init+0x184>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b57      	ldr	r3, [pc, #348]	; (8002048 <MX_GPIO_Init+0x184>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <MX_GPIO_Init+0x184>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a52      	ldr	r2, [pc, #328]	; (8002048 <MX_GPIO_Init+0x184>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b50      	ldr	r3, [pc, #320]	; (8002048 <MX_GPIO_Init+0x184>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <MX_GPIO_Init+0x184>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <MX_GPIO_Init+0x184>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b49      	ldr	r3, [pc, #292]	; (8002048 <MX_GPIO_Init+0x184>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2103      	movs	r1, #3
 8001f32:	4846      	ldr	r0, [pc, #280]	; (800204c <MX_GPIO_Init+0x188>)
 8001f34:	f001 fc26 	bl	8003784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SSD1331_RES_Pin|SSD1331_DC_Pin|SSD1331_CS_Pin|GPIO_PIN_10
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f240 413f 	movw	r1, #1087	; 0x43f
 8001f3e:	4844      	ldr	r0, [pc, #272]	; (8002050 <MX_GPIO_Init+0x18c>)
 8001f40:	f001 fc20 	bl	8003784 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f44:	2303      	movs	r3, #3
 8001f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f54:	f107 030c 	add.w	r3, r7, #12
 8001f58:	4619      	mov	r1, r3
 8001f5a:	483c      	ldr	r0, [pc, #240]	; (800204c <MX_GPIO_Init+0x188>)
 8001f5c:	f001 fa76 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : SSD1331_RES_Pin SSD1331_DC_Pin SSD1331_CS_Pin */
  GPIO_InitStruct.Pin = SSD1331_RES_Pin|SSD1331_DC_Pin|SSD1331_CS_Pin;
 8001f60:	2307      	movs	r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	4619      	mov	r1, r3
 8001f76:	4836      	ldr	r0, [pc, #216]	; (8002050 <MX_GPIO_Init+0x18c>)
 8001f78:	f001 fa68 	bl	800344c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = buttonPinOne | buttonPinTwo | buttonPinThree |buttonPinFour;
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <MX_GPIO_Init+0x190>)
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	4b35      	ldr	r3, [pc, #212]	; (8002058 <MX_GPIO_Init+0x194>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <MX_GPIO_Init+0x198>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b33      	ldr	r3, [pc, #204]	; (8002060 <MX_GPIO_Init+0x19c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4619      	mov	r1, r3
 8001fac:	4828      	ldr	r0, [pc, #160]	; (8002050 <MX_GPIO_Init+0x18c>)
 8001fae:	f001 fa4d 	bl	800344c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, buttonPinOne | buttonPinTwo | buttonPinThree | buttonPinFour, GPIO_PIN_RESET);
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MX_GPIO_Init+0x190>)
 8001fb4:	881a      	ldrh	r2, [r3, #0]
 8001fb6:	4b28      	ldr	r3, [pc, #160]	; (8002058 <MX_GPIO_Init+0x194>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b27      	ldr	r3, [pc, #156]	; (800205c <MX_GPIO_Init+0x198>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <MX_GPIO_Init+0x19c>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4824      	ldr	r0, [pc, #144]	; (8002064 <MX_GPIO_Init+0x1a0>)
 8001fd4:	f001 fbd6 	bl	8003784 <HAL_GPIO_WritePin>


  //For Stepper Motor
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	481d      	ldr	r0, [pc, #116]	; (8002064 <MX_GPIO_Init+0x1a0>)
 8001ff0:	f001 fa2c 	bl	800344c <HAL_GPIO_Init>



  /*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001ff4:	f44f 7350 	mov.w	r3, #832	; 0x340
 8001ff8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ffe:	2302      	movs	r3, #2
 8002000:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	4619      	mov	r1, r3
 800200c:	480f      	ldr	r0, [pc, #60]	; (800204c <MX_GPIO_Init+0x188>)
 800200e:	f001 fa1d 	bl	800344c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET); //0E -- 0 default disable
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <MX_GPIO_Init+0x188>)
 800201a:	f001 fbb3 	bl	8003784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET); //FR -- 0 backward, forward 1
 800201e:	2201      	movs	r2, #1
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	480a      	ldr	r0, [pc, #40]	; (800204c <MX_GPIO_Init+0x188>)
 8002024:	f001 fbae 	bl	8003784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET); //step -- 0,1
 8002028:	2200      	movs	r2, #0
 800202a:	2102      	movs	r1, #2
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_GPIO_Init+0x1a0>)
 800202e:	f001 fba9 	bl	8003784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET); //RST -- 0->RESET, 1->SET
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_GPIO_Init+0x188>)
 800203a:	f001 fba3 	bl	8003784 <HAL_GPIO_WritePin>

}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800
 800204c:	40020800 	.word	0x40020800
 8002050:	40020400 	.word	0x40020400
 8002054:	20000000 	.word	0x20000000
 8002058:	20000002 	.word	0x20000002
 800205c:	20000004 	.word	0x20000004
 8002060:	20000006 	.word	0x20000006
 8002064:	40020000 	.word	0x40020000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	e7fe      	b.n	8002070 <Error_Handler+0x8>
	...

08002074 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8002084:	79bb      	ldrb	r3, [r7, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 800208a:	2201      	movs	r2, #1
 800208c:	2102      	movs	r1, #2
 800208e:	4811      	ldr	r0, [pc, #68]	; (80020d4 <ssd1331_write_byte+0x60>)
 8002090:	f001 fb78 	bl	8003784 <HAL_GPIO_WritePin>
 8002094:	e004      	b.n	80020a0 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8002096:	2200      	movs	r2, #0
 8002098:	2102      	movs	r1, #2
 800209a:	480e      	ldr	r0, [pc, #56]	; (80020d4 <ssd1331_write_byte+0x60>)
 800209c:	f001 fb72 	bl	8003784 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 80020a0:	2200      	movs	r2, #0
 80020a2:	2104      	movs	r1, #4
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <ssd1331_write_byte+0x60>)
 80020a6:	f001 fb6d 	bl	8003784 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 80020aa:	1df9      	adds	r1, r7, #7
 80020ac:	2364      	movs	r3, #100	; 0x64
 80020ae:	2201      	movs	r2, #1
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <ssd1331_write_byte+0x64>)
 80020b2:	f002 f86c 	bl	800418e <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 80020b6:	2201      	movs	r2, #1
 80020b8:	2104      	movs	r1, #4
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <ssd1331_write_byte+0x60>)
 80020bc:	f001 fb62 	bl	8003784 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 80020c0:	2201      	movs	r2, #1
 80020c2:	2102      	movs	r1, #2
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <ssd1331_write_byte+0x60>)
 80020c6:	f001 fb5d 	bl	8003784 <HAL_GPIO_WritePin>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020400 	.word	0x40020400
 80020d8:	2000025c 	.word	0x2000025c

080020dc <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	460b      	mov	r3, r1
 80020e8:	71bb      	strb	r3, [r7, #6]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b5f      	cmp	r3, #95	; 0x5f
 80020f2:	d82b      	bhi.n	800214c <ssd1331_draw_point+0x70>
 80020f4:	79bb      	ldrb	r3, [r7, #6]
 80020f6:	2b3f      	cmp	r3, #63	; 0x3f
 80020f8:	d828      	bhi.n	800214c <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 80020fa:	2100      	movs	r1, #0
 80020fc:	2015      	movs	r0, #21
 80020fe:	f7ff ffb9 	bl	8002074 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffb4 	bl	8002074 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 800210c:	2100      	movs	r1, #0
 800210e:	205f      	movs	r0, #95	; 0x5f
 8002110:	f7ff ffb0 	bl	8002074 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8002114:	2100      	movs	r1, #0
 8002116:	2075      	movs	r0, #117	; 0x75
 8002118:	f7ff ffac 	bl	8002074 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ffa7 	bl	8002074 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8002126:	2100      	movs	r1, #0
 8002128:	203f      	movs	r0, #63	; 0x3f
 800212a:	f7ff ffa3 	bl	8002074 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 800212e:	88bb      	ldrh	r3, [r7, #4]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	b29b      	uxth	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2101      	movs	r1, #1
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff9b 	bl	8002074 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2101      	movs	r1, #1
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff95 	bl	8002074 <ssd1331_write_byte>
 800214a:	e000      	b.n	800214e <ssd1331_draw_point+0x72>
		return;
 800214c:	bf00      	nop
}
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	4604      	mov	r4, r0
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	4603      	mov	r3, r0
 8002168:	71bb      	strb	r3, [r7, #6]
 800216a:	460b      	mov	r3, r1
 800216c:	717b      	strb	r3, [r7, #5]
 800216e:	4613      	mov	r3, r2
 8002170:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8002172:	79bb      	ldrb	r3, [r7, #6]
 8002174:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b5f      	cmp	r3, #95	; 0x5f
 800217e:	d857      	bhi.n	8002230 <ssd1331_display_char+0xdc>
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	2b3f      	cmp	r3, #63	; 0x3f
 8002184:	d854      	bhi.n	8002230 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	e04c      	b.n	8002226 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 800218c:	793b      	ldrb	r3, [r7, #4]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d10d      	bne.n	80021ae <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8002192:	797b      	ldrb	r3, [r7, #5]
 8002194:	f1a3 0220 	sub.w	r2, r3, #32
 8002198:	7bf9      	ldrb	r1, [r7, #15]
 800219a:	4827      	ldr	r0, [pc, #156]	; (8002238 <ssd1331_display_char+0xe4>)
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	440b      	add	r3, r1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	737b      	strb	r3, [r7, #13]
 80021ac:	e00c      	b.n	80021c8 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 80021ae:	793b      	ldrb	r3, [r7, #4]
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d109      	bne.n	80021c8 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	f1a3 0220 	sub.w	r2, r3, #32
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	491f      	ldr	r1, [pc, #124]	; (800223c <ssd1331_display_char+0xe8>)
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	440a      	add	r2, r1
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	73bb      	strb	r3, [r7, #14]
 80021cc:	e025      	b.n	800221a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 80021ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da06      	bge.n	80021e4 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 80021d6:	8c3a      	ldrh	r2, [r7, #32]
 80021d8:	79b9      	ldrb	r1, [r7, #6]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff7d 	bl	80020dc <ssd1331_draw_point>
 80021e2:	e005      	b.n	80021f0 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 80021e4:	79b9      	ldrb	r1, [r7, #6]
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2200      	movs	r2, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff76 	bl	80020dc <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 80021f0:	7b7b      	ldrb	r3, [r7, #13]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	3301      	adds	r3, #1
 80021fa:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80021fc:	79ba      	ldrb	r2, [r7, #6]
 80021fe:	7b3b      	ldrb	r3, [r7, #12]
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	793b      	ldrb	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	d105      	bne.n	8002214 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8002208:	7b3b      	ldrb	r3, [r7, #12]
 800220a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	3301      	adds	r3, #1
 8002210:	71fb      	strb	r3, [r7, #7]
				break;
 8002212:	e005      	b.n	8002220 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	3301      	adds	r3, #1
 8002218:	73bb      	strb	r3, [r7, #14]
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9d6      	bls.n	80021ce <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	793b      	ldrb	r3, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d3ae      	bcc.n	800218c <ssd1331_display_char+0x38>
 800222e:	e000      	b.n	8002232 <ssd1331_display_char+0xde>
		return;
 8002230:	bf00      	nop
			}
		}  	 
    } 
}
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bd90      	pop	{r4, r7, pc}
 8002238:	0800a40c 	.word	0x0800a40c
 800223c:	0800a880 	.word	0x0800a880

08002240 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b085      	sub	sp, #20
 8002244:	af02      	add	r7, sp, #8
 8002246:	603a      	str	r2, [r7, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	460b      	mov	r3, r1
 8002250:	71bb      	strb	r3, [r7, #6]
 8002252:	4613      	mov	r3, r2
 8002254:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b5f      	cmp	r3, #95	; 0x5f
 800225a:	d836      	bhi.n	80022ca <ssd1331_display_string+0x8a>
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	2b3f      	cmp	r3, #63	; 0x3f
 8002260:	d833      	bhi.n	80022ca <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8002262:	e02d      	b.n	80022c0 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002264:	79fa      	ldrb	r2, [r7, #7]
 8002266:	797b      	ldrb	r3, [r7, #5]
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002270:	429a      	cmp	r2, r3
 8002272:	dd12      	ble.n	800229a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8002278:	79ba      	ldrb	r2, [r7, #6]
 800227a:	797b      	ldrb	r3, [r7, #5]
 800227c:	4413      	add	r3, r2
 800227e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002280:	79ba      	ldrb	r2, [r7, #6]
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002288:	429a      	cmp	r2, r3
 800228a:	dd06      	ble.n	800229a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f000 f81c 	bl	80022d2 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	797c      	ldrb	r4, [r7, #5]
 80022a0:	79b9      	ldrb	r1, [r7, #6]
 80022a2:	79f8      	ldrb	r0, [r7, #7]
 80022a4:	8b3b      	ldrh	r3, [r7, #24]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	4623      	mov	r3, r4
 80022aa:	f7ff ff53 	bl	8002154 <ssd1331_display_char>
        chXpos += chSize / 2;
 80022ae:	797b      	ldrb	r3, [r7, #5]
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4413      	add	r3, r2
 80022b8:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1cd      	bne.n	8002264 <ssd1331_display_string+0x24>
 80022c8:	e000      	b.n	80022cc <ssd1331_display_string+0x8c>
		return;
 80022ca:	bf00      	nop
    } 
}
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd90      	pop	{r4, r7, pc}

080022d2 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 80022dc:	2300      	movs	r3, #0
 80022de:	81fb      	strh	r3, [r7, #14]
 80022e0:	e013      	b.n	800230a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80022e2:	2300      	movs	r3, #0
 80022e4:	81bb      	strh	r3, [r7, #12]
 80022e6:	e00a      	b.n	80022fe <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80022e8:	89bb      	ldrh	r3, [r7, #12]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	89fa      	ldrh	r2, [r7, #14]
 80022ee:	b2d1      	uxtb	r1, r2
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fef2 	bl	80020dc <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80022f8:	89bb      	ldrh	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	81bb      	strh	r3, [r7, #12]
 80022fe:	89bb      	ldrh	r3, [r7, #12]
 8002300:	2b5f      	cmp	r3, #95	; 0x5f
 8002302:	d9f1      	bls.n	80022e8 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8002304:	89fb      	ldrh	r3, [r7, #14]
 8002306:	3301      	adds	r3, #1
 8002308:	81fb      	strh	r3, [r7, #14]
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	2b3f      	cmp	r3, #63	; 0x3f
 800230e:	d9e8      	bls.n	80022e2 <ssd1331_clear_screen+0x10>
		}
	}
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <ssd1331_init>:


void ssd1331_init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8002320:	2201      	movs	r2, #1
 8002322:	2101      	movs	r1, #1
 8002324:	4852      	ldr	r0, [pc, #328]	; (8002470 <ssd1331_init+0x154>)
 8002326:	f001 fa2d 	bl	8003784 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 800232a:	2201      	movs	r2, #1
 800232c:	2104      	movs	r1, #4
 800232e:	4850      	ldr	r0, [pc, #320]	; (8002470 <ssd1331_init+0x154>)
 8002330:	f001 fa28 	bl	8003784 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8002334:	2100      	movs	r1, #0
 8002336:	20ae      	movs	r0, #174	; 0xae
 8002338:	f7ff fe9c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 800233c:	2100      	movs	r1, #0
 800233e:	2081      	movs	r0, #129	; 0x81
 8002340:	f7ff fe98 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8002344:	2100      	movs	r1, #0
 8002346:	20ff      	movs	r0, #255	; 0xff
 8002348:	f7ff fe94 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 800234c:	2100      	movs	r1, #0
 800234e:	2082      	movs	r0, #130	; 0x82
 8002350:	f7ff fe90 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8002354:	2100      	movs	r1, #0
 8002356:	20ff      	movs	r0, #255	; 0xff
 8002358:	f7ff fe8c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 800235c:	2100      	movs	r1, #0
 800235e:	2083      	movs	r0, #131	; 0x83
 8002360:	f7ff fe88 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8002364:	2100      	movs	r1, #0
 8002366:	20ff      	movs	r0, #255	; 0xff
 8002368:	f7ff fe84 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 800236c:	2100      	movs	r1, #0
 800236e:	2087      	movs	r0, #135	; 0x87
 8002370:	f7ff fe80 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8002374:	2100      	movs	r1, #0
 8002376:	2006      	movs	r0, #6
 8002378:	f7ff fe7c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 800237c:	2100      	movs	r1, #0
 800237e:	208a      	movs	r0, #138	; 0x8a
 8002380:	f7ff fe78 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002384:	2100      	movs	r1, #0
 8002386:	2064      	movs	r0, #100	; 0x64
 8002388:	f7ff fe74 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 800238c:	2100      	movs	r1, #0
 800238e:	208b      	movs	r0, #139	; 0x8b
 8002390:	f7ff fe70 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8002394:	2100      	movs	r1, #0
 8002396:	2078      	movs	r0, #120	; 0x78
 8002398:	f7ff fe6c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 800239c:	2100      	movs	r1, #0
 800239e:	208c      	movs	r0, #140	; 0x8c
 80023a0:	f7ff fe68 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80023a4:	2100      	movs	r1, #0
 80023a6:	2064      	movs	r0, #100	; 0x64
 80023a8:	f7ff fe64 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 80023ac:	2100      	movs	r1, #0
 80023ae:	20a0      	movs	r0, #160	; 0xa0
 80023b0:	f7ff fe60 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 80023b4:	2100      	movs	r1, #0
 80023b6:	2072      	movs	r0, #114	; 0x72
 80023b8:	f7ff fe5c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 80023bc:	2100      	movs	r1, #0
 80023be:	20a1      	movs	r0, #161	; 0xa1
 80023c0:	f7ff fe58 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80023c4:	2100      	movs	r1, #0
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff fe54 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 80023cc:	2100      	movs	r1, #0
 80023ce:	20a2      	movs	r0, #162	; 0xa2
 80023d0:	f7ff fe50 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80023d4:	2100      	movs	r1, #0
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff fe4c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80023dc:	2100      	movs	r1, #0
 80023de:	20a4      	movs	r0, #164	; 0xa4
 80023e0:	f7ff fe48 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80023e4:	2100      	movs	r1, #0
 80023e6:	20a8      	movs	r0, #168	; 0xa8
 80023e8:	f7ff fe44 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80023ec:	2100      	movs	r1, #0
 80023ee:	203f      	movs	r0, #63	; 0x3f
 80023f0:	f7ff fe40 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80023f4:	2100      	movs	r1, #0
 80023f6:	20ad      	movs	r0, #173	; 0xad
 80023f8:	f7ff fe3c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80023fc:	2100      	movs	r1, #0
 80023fe:	208e      	movs	r0, #142	; 0x8e
 8002400:	f7ff fe38 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8002404:	2100      	movs	r1, #0
 8002406:	20b0      	movs	r0, #176	; 0xb0
 8002408:	f7ff fe34 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 800240c:	2100      	movs	r1, #0
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff fe30 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8002414:	2100      	movs	r1, #0
 8002416:	20b1      	movs	r0, #177	; 0xb1
 8002418:	f7ff fe2c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 800241c:	2100      	movs	r1, #0
 800241e:	2031      	movs	r0, #49	; 0x31
 8002420:	f7ff fe28 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8002424:	2100      	movs	r1, #0
 8002426:	20b3      	movs	r0, #179	; 0xb3
 8002428:	f7ff fe24 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 800242c:	2100      	movs	r1, #0
 800242e:	20f0      	movs	r0, #240	; 0xf0
 8002430:	f7ff fe20 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8002434:	2100      	movs	r1, #0
 8002436:	20bb      	movs	r0, #187	; 0xbb
 8002438:	f7ff fe1c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 800243c:	2100      	movs	r1, #0
 800243e:	203a      	movs	r0, #58	; 0x3a
 8002440:	f7ff fe18 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002444:	2100      	movs	r1, #0
 8002446:	20be      	movs	r0, #190	; 0xbe
 8002448:	f7ff fe14 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 800244c:	2100      	movs	r1, #0
 800244e:	203e      	movs	r0, #62	; 0x3e
 8002450:	f7ff fe10 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002454:	2100      	movs	r1, #0
 8002456:	202e      	movs	r0, #46	; 0x2e
 8002458:	f7ff fe0c 	bl	8002074 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 800245c:	2100      	movs	r1, #0
 800245e:	20af      	movs	r0, #175	; 0xaf
 8002460:	f7ff fe08 	bl	8002074 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff ff34 	bl	80022d2 <ssd1331_clear_screen>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020400 	.word	0x40020400

08002474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_MspInit+0x4c>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <HAL_MspInit+0x4c>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_MspInit+0x4c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_MspInit+0x4c>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_MspInit+0x4c>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800

080024c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_ADC_MspInit+0x7c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d127      	bne.n	8002536 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_ADC_MspInit+0x80>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <HAL_ADC_MspInit+0x80>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_ADC_MspInit+0x80>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <HAL_ADC_MspInit+0x80>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_ADC_MspInit+0x80>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_ADC_MspInit+0x80>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251e:	2304      	movs	r3, #4
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002522:	2303      	movs	r3, #3
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_ADC_MspInit+0x84>)
 8002532:	f000 ff8b 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40012000 	.word	0x40012000
 8002544:	40023800 	.word	0x40023800
 8002548:	40020800 	.word	0x40020800

0800254c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_SPI_MspInit+0x84>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_SPI_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 80025a6:	2388      	movs	r3, #136	; 0x88
 80025a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025aa:	2302      	movs	r3, #2
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025b6:	2305      	movs	r3, #5
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	; (80025d8 <HAL_SPI_MspInit+0x8c>)
 80025c2:	f000 ff43 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40003800 	.word	0x40003800
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020800 	.word	0x40020800

080025dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d10d      	bne.n	800260a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_TIM_PWM_MspInit+0x3c>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d11d      	bne.n	800267a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_TIM_MspPostInit+0x68>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_TIM_MspPostInit+0x68>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_TIM_MspPostInit+0x68>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800265a:	2320      	movs	r3, #32
 800265c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800266a:	2301      	movs	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	4619      	mov	r1, r3
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <HAL_TIM_MspPostInit+0x6c>)
 8002676:	f000 fee9 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_UART_MspInit+0x84>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12b      	bne.n	8002706 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a10      	ldr	r2, [pc, #64]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_UART_MspInit+0x88>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026e6:	230c      	movs	r3, #12
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026f6:	2307      	movs	r3, #7
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <HAL_UART_MspInit+0x8c>)
 8002702:	f000 fea3 	bl	800344c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	3728      	adds	r7, #40	; 0x28
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40004400 	.word	0x40004400
 8002714:	40023800 	.word	0x40023800
 8002718:	40020000 	.word	0x40020000

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <NMI_Handler+0x4>

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <MemManage_Handler+0x4>

0800272e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <UsageFault_Handler+0x4>

0800273a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002768:	f000 f95c 	bl	8002a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}

08002770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
	return 1;
 8002774:	2301      	movs	r3, #1
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_kill>:

int _kill(int pid, int sig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800278a:	f003 f8cb 	bl	8005924 <__errno>
 800278e:	4603      	mov	r3, r0
 8002790:	2216      	movs	r2, #22
 8002792:	601a      	str	r2, [r3, #0]
	return -1;
 8002794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_exit>:

void _exit (int status)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ffe7 	bl	8002780 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027b2:	e7fe      	b.n	80027b2 <_exit+0x12>

080027b4 <_read>:
}


int _read (int file, char *ptr, int len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 80027c0:	2301      	movs	r3, #1
 80027c2:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f04f 33ff 	mov.w	r3, #4294967295
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4807      	ldr	r0, [pc, #28]	; (80027ec <_read+0x38>)
 80027d0:	f002 fdcb 	bl	800536a <HAL_UART_Receive>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	607b      	str	r3, [r7, #4]

	return len;
 80027e0:	687b      	ldr	r3, [r7, #4]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000344 	.word	0x20000344

080027f0 <_write>:
//}



int _write(int file, char *ptr, int len)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	4809      	ldr	r0, [pc, #36]	; (8002830 <_write+0x40>)
 800280c:	f002 fd1b 	bl	8005246 <HAL_UART_Transmit>
 8002810:	4603      	mov	r3, r0
 8002812:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <_write+0x30>
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d101      	bne.n	8002824 <_write+0x34>
	{
		Error_Handler();
 8002820:	f7ff fc22 	bl	8002068 <Error_Handler>
	}

	return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000344 	.word	0x20000344

08002834 <_close>:
//}



int _close(int file)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	return -1;
 800283c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_fstat>:




int _fstat(int file, struct stat *st)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800285c:	605a      	str	r2, [r3, #4]
	return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_isatty>:

int _isatty(int file)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
	return 0;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f003 f82a 	bl	8005924 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20020000 	.word	0x20020000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20000250 	.word	0x20000250
 8002904:	200003a0 	.word	0x200003a0

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <SystemInit+0x20>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <SystemInit+0x20>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002932:	490e      	ldr	r1, [pc, #56]	; (800296c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800293a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800293c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002948:	4c0b      	ldr	r4, [pc, #44]	; (8002978 <LoopFillZerobss+0x26>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd7 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f002 ffe9 	bl	8005930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe fc1d 	bl	800119c <main>
  bx  lr    
 8002962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800296c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002970:	0800b34c 	.word	0x0800b34c
  ldr r2, =_sbss
 8002974:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002978:	2000039c 	.word	0x2000039c

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 fd0d 	bl	80033c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fd5e 	bl	8002474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd25 	bl	8003432 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f000 fced 	bl	80033de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000024 	.word	0x20000024
 8002a1c:	2000002c 	.word	0x2000002c
 8002a20:	20000028 	.word	0x20000028

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000002c 	.word	0x2000002c
 8002a48:	20000388 	.word	0x20000388

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000388 	.word	0x20000388

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff ffee 	bl	8002a4c <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000002c 	.word	0x2000002c

08002aac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e033      	b.n	8002b2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fcfa 	bl	80024c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af2:	f023 0302 	bic.w	r3, r3, #2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa96 	bl	8003030 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_Start+0x1a>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e097      	b.n	8002c7e <HAL_ADC_Start+0x14a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d018      	beq.n	8002b96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b74:	4b45      	ldr	r3, [pc, #276]	; (8002c8c <HAL_ADC_Start+0x158>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a45      	ldr	r2, [pc, #276]	; (8002c90 <HAL_ADC_Start+0x15c>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9a      	lsrs	r2, r3, #18
 8002b80:	4613      	mov	r3, r2
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4413      	add	r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d15f      	bne.n	8002c64 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be2:	d106      	bne.n	8002bf2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f023 0206 	bic.w	r2, r3, #6
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_ADC_Start+0x160>)
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d129      	bne.n	8002c7c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	e020      	b.n	8002c7c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_ADC_Start+0x164>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d11b      	bne.n	8002c7c <HAL_ADC_Start+0x148>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000024 	.word	0x20000024
 8002c90:	431bde83 	.word	0x431bde83
 8002c94:	40012300 	.word	0x40012300
 8002c98:	40012000 	.word	0x40012000

08002c9c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb8:	d113      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e063      	b.n	8002daa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ce2:	f7ff feb3 	bl	8002a4c <HAL_GetTick>
 8002ce6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce8:	e021      	b.n	8002d2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d01d      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_ADC_PollForConversion+0x6c>
 8002cf8:	f7ff fea8 	bl	8002a4c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d212      	bcs.n	8002d2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d00b      	beq.n	8002d2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e03d      	b.n	8002daa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d1d6      	bne.n	8002cea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0212 	mvn.w	r2, #18
 8002d44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d123      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11f      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1c>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e113      	b.n	8003010 <HAL_ADC_ConfigChannel+0x244>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b09      	cmp	r3, #9
 8002df6:	d925      	bls.n	8002e44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68d9      	ldr	r1, [r3, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b1e      	subs	r3, #30
 8002e0e:	2207      	movs	r2, #7
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4603      	mov	r3, r0
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4403      	add	r3, r0
 8002e36:	3b1e      	subs	r3, #30
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	e022      	b.n	8002e8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	2207      	movs	r2, #7
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4403      	add	r3, r0
 8002e80:	409a      	lsls	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d824      	bhi.n	8002edc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3b05      	subs	r3, #5
 8002ea4:	221f      	movs	r2, #31
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	3b05      	subs	r3, #5
 8002ece:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eda:	e04c      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d824      	bhi.n	8002f2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b23      	subs	r3, #35	; 0x23
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	43da      	mvns	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	400a      	ands	r2, r1
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b23      	subs	r3, #35	; 0x23
 8002f20:	fa00 f203 	lsl.w	r2, r0, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f2c:	e023      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3b41      	subs	r3, #65	; 0x41
 8002f40:	221f      	movs	r2, #31
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b41      	subs	r3, #65	; 0x41
 8002f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_ADC_ConfigChannel+0x250>)
 8002f78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a28      	ldr	r2, [pc, #160]	; (8003020 <HAL_ADC_ConfigChannel+0x254>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10f      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1d8>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b12      	cmp	r3, #18
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1d      	ldr	r2, [pc, #116]	; (8003020 <HAL_ADC_ConfigChannel+0x254>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12b      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x23a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <HAL_ADC_ConfigChannel+0x258>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x1f4>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b11      	cmp	r3, #17
 8002fbe:	d122      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_ADC_ConfigChannel+0x258>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d111      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_ADC_ConfigChannel+0x25c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	; (800302c <HAL_ADC_ConfigChannel+0x260>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	0c9a      	lsrs	r2, r3, #18
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ff8:	e002      	b.n	8003000 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	40012300 	.word	0x40012300
 8003020:	40012000 	.word	0x40012000
 8003024:	10000012 	.word	0x10000012
 8003028:	20000024 	.word	0x20000024
 800302c:	431bde83 	.word	0x431bde83

08003030 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003038:	4b79      	ldr	r3, [pc, #484]	; (8003220 <ADC_Init+0x1f0>)
 800303a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	021a      	lsls	r2, r3, #8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003088:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	4a58      	ldr	r2, [pc, #352]	; (8003224 <ADC_Init+0x1f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	e00f      	b.n	800312e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800311c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800312c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0202 	bic.w	r2, r2, #2
 800313c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6899      	ldr	r1, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7e1b      	ldrb	r3, [r3, #24]
 8003148:	005a      	lsls	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800317a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	3b01      	subs	r3, #1
 8003188:	035a      	lsls	r2, r3, #13
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e007      	b.n	80031a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	3b01      	subs	r3, #1
 80031c0:	051a      	lsls	r2, r3, #20
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031e6:	025a      	lsls	r2, r3, #9
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	029a      	lsls	r2, r3, #10
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	609a      	str	r2, [r3, #8]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012300 	.word	0x40012300
 8003224:	0f000001 	.word	0x0f000001

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	; (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_EnableIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	6039      	str	r1, [r7, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	db0a      	blt.n	80032f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	490c      	ldr	r1, [pc, #48]	; (8003314 <__NVIC_SetPriority+0x4c>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	440b      	add	r3, r1
 80032ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f0:	e00a      	b.n	8003308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <__NVIC_SetPriority+0x50>)
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3b04      	subs	r3, #4
 8003300:	0112      	lsls	r2, r2, #4
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	440b      	add	r3, r1
 8003306:	761a      	strb	r2, [r3, #24]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000e100 	.word	0xe000e100
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	; 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f1c3 0307 	rsb	r3, r3, #7
 8003336:	2b04      	cmp	r3, #4
 8003338:	bf28      	it	cs
 800333a:	2304      	movcs	r3, #4
 800333c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	3304      	adds	r3, #4
 8003342:	2b06      	cmp	r3, #6
 8003344:	d902      	bls.n	800334c <NVIC_EncodePriority+0x30>
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3b03      	subs	r3, #3
 800334a:	e000      	b.n	800334e <NVIC_EncodePriority+0x32>
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	401a      	ands	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	43d9      	mvns	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	4313      	orrs	r3, r2
         );
}
 8003376:	4618      	mov	r0, r3
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003394:	d301      	bcc.n	800339a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003396:	2301      	movs	r3, #1
 8003398:	e00f      	b.n	80033ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <SysTick_Config+0x40>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a2:	210f      	movs	r1, #15
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f7ff ff8e 	bl	80032c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <SysTick_Config+0x40>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b2:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SysTick_Config+0x40>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff29 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f0:	f7ff ff3e 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff8e 	bl	800331c <NVIC_EncodePriority>
 8003400:	4602      	mov	r2, r0
 8003402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff5d 	bl	80032c8 <__NVIC_SetPriority>
}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff31 	bl	800328c <__NVIC_EnableIRQ>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffa2 	bl	8003384 <SysTick_Config>
 8003440:	4603      	mov	r3, r0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800344c:	b480      	push	{r7}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	e159      	b.n	800371c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	429a      	cmp	r2, r3
 8003482:	f040 8148 	bne.w	8003716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d005      	beq.n	800349e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349a:	2b02      	cmp	r3, #2
 800349c:	d130      	bne.n	8003500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	2203      	movs	r2, #3
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4013      	ands	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d4:	2201      	movs	r2, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 0201 	and.w	r2, r3, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b03      	cmp	r3, #3
 800350a:	d017      	beq.n	800353c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	2203      	movs	r2, #3
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d123      	bne.n	8003590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	08da      	lsrs	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3208      	adds	r2, #8
 8003550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	220f      	movs	r2, #15
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3208      	adds	r2, #8
 800358a:	69b9      	ldr	r1, [r7, #24]
 800358c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0203 	and.w	r2, r3, #3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a2 	beq.w	8003716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4a56      	ldr	r2, [pc, #344]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e0:	6453      	str	r3, [r2, #68]	; 0x44
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_GPIO_Init+0x2e8>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ee:	4a52      	ldr	r2, [pc, #328]	; (8003738 <HAL_GPIO_Init+0x2ec>)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	3302      	adds	r3, #2
 80035f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	220f      	movs	r2, #15
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a49      	ldr	r2, [pc, #292]	; (800373c <HAL_GPIO_Init+0x2f0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_Init+0x202>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a48      	ldr	r2, [pc, #288]	; (8003740 <HAL_GPIO_Init+0x2f4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x1fe>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a47      	ldr	r2, [pc, #284]	; (8003744 <HAL_GPIO_Init+0x2f8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x1fa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a46      	ldr	r2, [pc, #280]	; (8003748 <HAL_GPIO_Init+0x2fc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x1f6>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a45      	ldr	r2, [pc, #276]	; (800374c <HAL_GPIO_Init+0x300>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x1f2>
 800363a:	2304      	movs	r3, #4
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x204>
 800363e:	2307      	movs	r3, #7
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x204>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x204>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x204>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x204>
 800364e:	2300      	movs	r3, #0
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_GPIO_Init+0x2ec>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_GPIO_Init+0x304>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003692:	4a2f      	ldr	r2, [pc, #188]	; (8003750 <HAL_GPIO_Init+0x304>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003698:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <HAL_GPIO_Init+0x304>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036bc:	4a24      	ldr	r2, [pc, #144]	; (8003750 <HAL_GPIO_Init+0x304>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c2:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_GPIO_Init+0x304>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_GPIO_Init+0x304>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_GPIO_Init+0x304>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_GPIO_Init+0x304>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	f67f aea2 	bls.w	8003468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40013c00 	.word	0x40013c00

08003754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e001      	b.n	8003776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
 8003790:	4613      	mov	r3, r2
 8003792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003794:	787b      	ldrb	r3, [r7, #1]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a0:	e003      	b.n	80037aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	041a      	lsls	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	619a      	str	r2, [r3, #24]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4013      	ands	r3, r2
 80037ce:	041a      	lsls	r2, r3, #16
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	400b      	ands	r3, r1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e264      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d075      	beq.n	80038f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	4ba3      	ldr	r3, [pc, #652]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003816:	4ba0      	ldr	r3, [pc, #640]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800381e:	2b08      	cmp	r3, #8
 8003820:	d112      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003822:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d10b      	bne.n	8003848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003830:	4b99      	ldr	r3, [pc, #612]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05b      	beq.n	80038f4 <HAL_RCC_OscConfig+0x108>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d157      	bne.n	80038f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e23f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x74>
 8003852:	4b91      	ldr	r3, [pc, #580]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a90      	ldr	r2, [pc, #576]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e01d      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x98>
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a8a      	ldr	r2, [pc, #552]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00b      	b.n	800389c <HAL_RCC_OscConfig+0xb0>
 8003884:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a83      	ldr	r2, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800388a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d013      	beq.n	80038cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7ff f8d2 	bl	8002a4c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038ac:	f7ff f8ce 	bl	8002a4c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	; 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e204      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038be:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCC_OscConfig+0xc0>
 80038ca:	e014      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7ff f8be 	bl	8002a4c <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d4:	f7ff f8ba 	bl	8002a4c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	; 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e1f0      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0xe8>
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d063      	beq.n	80039ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003916:	2b08      	cmp	r3, #8
 8003918:	d11c      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391a:	4b5f      	ldr	r3, [pc, #380]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d116      	bne.n	8003954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d005      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1c4      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393e:	4b56      	ldr	r3, [pc, #344]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4952      	ldr	r1, [pc, #328]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003952:	e03a      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800395c:	4b4f      	ldr	r3, [pc, #316]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7ff f873 	bl	8002a4c <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396a:	f7ff f86f 	bl	8002a4c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1a5      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800397c:	4b46      	ldr	r3, [pc, #280]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003988:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4940      	ldr	r1, [pc, #256]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	e015      	b.n	80039ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <HAL_RCC_OscConfig+0x2b0>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7ff f852 	bl	8002a4c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ac:	f7ff f84e 	bl	8002a4c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e184      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039be:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d030      	beq.n	8003a38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_RCC_OscConfig+0x2b4>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7ff f832 	bl	8002a4c <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ec:	f7ff f82e 	bl	8002a4c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e164      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fe:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x200>
 8003a0a:	e015      	b.n	8003a38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_OscConfig+0x2b4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a12:	f7ff f81b 	bl	8002a4c <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1a:	f7ff f817 	bl	8002a4c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e14d      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80a0 	beq.w	8003b86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4a:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_OscConfig+0x2b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_RCC_OscConfig+0x2b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <HAL_RCC_OscConfig+0x2b8>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe ffdd 	bl	8002a4c <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	e011      	b.n	8003aba <HAL_RCC_OscConfig+0x2ce>
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	42470000 	.word	0x42470000
 8003aa0:	42470e80 	.word	0x42470e80
 8003aa4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fe ffd0 	bl	8002a4c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e106      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_OscConfig+0x4e4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x2f0>
 8003ace:	4b81      	ldr	r3, [pc, #516]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a80      	ldr	r2, [pc, #512]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	e01c      	b.n	8003b16 <HAL_RCC_OscConfig+0x32a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10c      	bne.n	8003afe <HAL_RCC_OscConfig+0x312>
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a7a      	ldr	r2, [pc, #488]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
 8003af0:	4b78      	ldr	r3, [pc, #480]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af4:	4a77      	ldr	r2, [pc, #476]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0x32a>
 8003afe:	4b75      	ldr	r3, [pc, #468]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	4a74      	ldr	r2, [pc, #464]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0a:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0e:	4a71      	ldr	r2, [pc, #452]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fe ff95 	bl	8002a4c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f7fe ff91 	bl	8002a4c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0c5      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3c:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ee      	beq.n	8003b26 <HAL_RCC_OscConfig+0x33a>
 8003b48:	e014      	b.n	8003b74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4a:	f7fe ff7f 	bl	8002a4c <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b50:	e00a      	b.n	8003b68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b52:	f7fe ff7b 	bl	8002a4c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e0af      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	4b5a      	ldr	r3, [pc, #360]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ee      	bne.n	8003b52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b74:	7dfb      	ldrb	r3, [r7, #23]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d105      	bne.n	8003b86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7a:	4b56      	ldr	r3, [pc, #344]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	4a55      	ldr	r2, [pc, #340]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 809b 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d05c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d141      	bne.n	8003c28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <HAL_RCC_OscConfig+0x4ec>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fe ff4f 	bl	8002a4c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fe ff4b 	bl	8002a4c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e081      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc4:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	019b      	lsls	r3, r3, #6
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	4937      	ldr	r1, [pc, #220]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bfa:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <HAL_RCC_OscConfig+0x4ec>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe ff24 	bl	8002a4c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe ff20 	bl	8002a4c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e056      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x41c>
 8003c26:	e04e      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c28:	4b2b      	ldr	r3, [pc, #172]	; (8003cd8 <HAL_RCC_OscConfig+0x4ec>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fe ff0d 	bl	8002a4c <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe ff09 	bl	8002a4c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e03f      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x44a>
 8003c54:	e037      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e032      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <HAL_RCC_OscConfig+0x4e8>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d028      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d121      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d11a      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d111      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	3b01      	subs	r3, #1
 8003cac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	42470060 	.word	0x42470060

08003cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0cc      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b68      	ldr	r3, [pc, #416]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d90c      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b65      	ldr	r3, [pc, #404]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0b8      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d30:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a58      	ldr	r2, [pc, #352]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d48:	4b53      	ldr	r3, [pc, #332]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	494d      	ldr	r1, [pc, #308]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d044      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d119      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e07f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e06f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e067      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f023 0203 	bic.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4934      	ldr	r1, [pc, #208]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dcc:	f7fe fe3e 	bl	8002a4c <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	e00a      	b.n	8003dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd4:	f7fe fe3a 	bl	8002a4c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e04f      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 020c 	and.w	r2, r3, #12
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d1eb      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d20c      	bcs.n	8003e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e032      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4916      	ldr	r1, [pc, #88]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	490e      	ldr	r1, [pc, #56]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e62:	f000 f821 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e66:	4602      	mov	r2, r0
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	490a      	ldr	r1, [pc, #40]	; (8003e9c <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fd9e 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023c00 	.word	0x40023c00
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	0800ae70 	.word	0x0800ae70
 8003ea0:	20000024 	.word	0x20000024
 8003ea4:	20000028 	.word	0x20000028

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	b5b0      	push	{r4, r5, r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6079      	str	r1, [r7, #4]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	60f9      	str	r1, [r7, #12]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003eba:	2100      	movs	r1, #0
 8003ebc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ebe:	4952      	ldr	r1, [pc, #328]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ec0:	6889      	ldr	r1, [r1, #8]
 8003ec2:	f001 010c 	and.w	r1, r1, #12
 8003ec6:	2908      	cmp	r1, #8
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003eca:	2908      	cmp	r1, #8
 8003ecc:	f200 8094 	bhi.w	8003ff8 <HAL_RCC_GetSysClockFreq+0x150>
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x32>
 8003ed4:	2904      	cmp	r1, #4
 8003ed6:	d003      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ed8:	e08e      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eda:	4b4c      	ldr	r3, [pc, #304]	; (800400c <HAL_RCC_GetSysClockFreq+0x164>)
 8003edc:	60bb      	str	r3, [r7, #8]
       break;
 8003ede:	e08e      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	; (8004010 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ee2:	60bb      	str	r3, [r7, #8]
      break;
 8003ee4:	e08b      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ee6:	4948      	ldr	r1, [pc, #288]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ee8:	6849      	ldr	r1, [r1, #4]
 8003eea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003eee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef0:	4945      	ldr	r1, [pc, #276]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ef2:	6849      	ldr	r1, [r1, #4]
 8003ef4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d024      	beq.n	8003f46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efc:	4942      	ldr	r1, [pc, #264]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003efe:	6849      	ldr	r1, [r1, #4]
 8003f00:	0989      	lsrs	r1, r1, #6
 8003f02:	4608      	mov	r0, r1
 8003f04:	f04f 0100 	mov.w	r1, #0
 8003f08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003f0c:	f04f 0500 	mov.w	r5, #0
 8003f10:	ea00 0204 	and.w	r2, r0, r4
 8003f14:	ea01 0305 	and.w	r3, r1, r5
 8003f18:	493d      	ldr	r1, [pc, #244]	; (8004010 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f1a:	fb01 f003 	mul.w	r0, r1, r3
 8003f1e:	2100      	movs	r1, #0
 8003f20:	fb01 f102 	mul.w	r1, r1, r2
 8003f24:	1844      	adds	r4, r0, r1
 8003f26:	493a      	ldr	r1, [pc, #232]	; (8004010 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f28:	fba2 0101 	umull	r0, r1, r2, r1
 8003f2c:	1863      	adds	r3, r4, r1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	461a      	mov	r2, r3
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	f7fc feae 	bl	8000c98 <__aeabi_uldivmod>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4613      	mov	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e04a      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	ea02 0400 	and.w	r4, r2, r0
 8003f5e:	ea03 0501 	and.w	r5, r3, r1
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	014b      	lsls	r3, r1, #5
 8003f70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f74:	0142      	lsls	r2, r0, #5
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	1b00      	subs	r0, r0, r4
 8003f7c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	018b      	lsls	r3, r1, #6
 8003f8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f8e:	0182      	lsls	r2, r0, #6
 8003f90:	1a12      	subs	r2, r2, r0
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	00d9      	lsls	r1, r3, #3
 8003fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa4:	00d0      	lsls	r0, r2, #3
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	1912      	adds	r2, r2, r4
 8003fac:	eb45 0303 	adc.w	r3, r5, r3
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	0299      	lsls	r1, r3, #10
 8003fba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003fbe:	0290      	lsls	r0, r2, #10
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f7fc fe62 	bl	8000c98 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0c1b      	lsrs	r3, r3, #16
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
      break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <HAL_RCC_GetSysClockFreq+0x164>)
 8003ffa:	60bb      	str	r3, [r7, #8]
      break;
 8003ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bdb0      	pop	{r4, r5, r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	017d7840 	.word	0x017d7840

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000024 	.word	0x20000024

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	0800ae80 	.word	0x0800ae80

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	0800ae80 	.word	0x0800ae80

0800407c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07b      	b.n	8004186 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d108      	bne.n	80040a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409e:	d009      	beq.n	80040b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
 80040a6:	e005      	b.n	80040b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe fa3c 	bl	800254c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	f003 0104 	and.w	r1, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0210 	and.w	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b088      	sub	sp, #32
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <HAL_SPI_Transmit+0x22>
 80041ac:	2302      	movs	r3, #2
 80041ae:	e126      	b.n	80043fe <HAL_SPI_Transmit+0x270>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b8:	f7fe fc48 	bl	8002a4c <HAL_GetTick>
 80041bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041d2:	e10b      	b.n	80043ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_SPI_Transmit+0x52>
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80041e4:	e102      	b.n	80043ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2203      	movs	r2, #3
 80041ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422c:	d10f      	bne.n	800424e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800424c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b40      	cmp	r3, #64	; 0x40
 800425a:	d007      	beq.n	800426c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d14b      	bne.n	800430e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Transmit+0xf6>
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d13e      	bne.n	8004302 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	881a      	ldrh	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	1c9a      	adds	r2, r3, #2
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042a8:	e02b      	b.n	8004302 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d112      	bne.n	80042de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	86da      	strh	r2, [r3, #54]	; 0x36
 80042dc:	e011      	b.n	8004302 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042de:	f7fe fbb5 	bl	8002a4c <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d803      	bhi.n	80042f6 <HAL_SPI_Transmit+0x168>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f4:	d102      	bne.n	80042fc <HAL_SPI_Transmit+0x16e>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004300:	e074      	b.n	80043ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ce      	bne.n	80042aa <HAL_SPI_Transmit+0x11c>
 800430c:	e04c      	b.n	80043a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0x18e>
 8004316:	8afb      	ldrh	r3, [r7, #22]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d140      	bne.n	800439e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004342:	e02c      	b.n	800439e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b02      	cmp	r3, #2
 8004350:	d113      	bne.n	800437a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	7812      	ldrb	r2, [r2, #0]
 800435e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	86da      	strh	r2, [r3, #54]	; 0x36
 8004378:	e011      	b.n	800439e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437a:	f7fe fb67 	bl	8002a4c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d803      	bhi.n	8004392 <HAL_SPI_Transmit+0x204>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Transmit+0x20a>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800439c:	e026      	b.n	80043ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cd      	bne.n	8004344 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f8b3 	bl	8004518 <SPI_EndRxTxTransaction>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e000      	b.n	80043ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80043ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004418:	f7fe fb18 	bl	8002a4c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	4413      	add	r3, r2
 8004426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004428:	f7fe fb10 	bl	8002a4c <HAL_GetTick>
 800442c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800442e:	4b39      	ldr	r3, [pc, #228]	; (8004514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	015b      	lsls	r3, r3, #5
 8004434:	0d1b      	lsrs	r3, r3, #20
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800443e:	e054      	b.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d050      	beq.n	80044ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004448:	f7fe fb00 	bl	8002a4c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d902      	bls.n	800445e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d13d      	bne.n	80044da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004476:	d111      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	d004      	beq.n	800448c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448a:	d107      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a4:	d10f      	bne.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e017      	b.n	800450a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4013      	ands	r3, r2
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	429a      	cmp	r2, r3
 8004506:	d19b      	bne.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000024 	.word	0x20000024

08004518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <SPI_EndRxTxTransaction+0x7c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <SPI_EndRxTxTransaction+0x80>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0d5b      	lsrs	r3, r3, #21
 8004530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d112      	bne.n	800456a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f7ff ff5a 	bl	8004408 <SPI_WaitFlagStateUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f043 0220 	orr.w	r2, r3, #32
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00f      	b.n	800458a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3b01      	subs	r3, #1
 8004574:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b80      	cmp	r3, #128	; 0x80
 8004582:	d0f2      	beq.n	800456a <SPI_EndRxTxTransaction+0x52>
 8004584:	e000      	b.n	8004588 <SPI_EndRxTxTransaction+0x70>
        break;
 8004586:	bf00      	nop
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000024 	.word	0x20000024
 8004598:	165e9f81 	.word	0x165e9f81

0800459c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e044      	b.n	800463e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_TIM_Base_Start_IT+0xb0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d013      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_TIM_Base_Start_IT+0xb4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_TIM_Base_Start_IT+0xb8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a17      	ldr	r2, [pc, #92]	; (8004658 <HAL_TIM_Base_Start_IT+0xbc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x6c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_TIM_Base_Start_IT+0xc0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d111      	bne.n	800462c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b06      	cmp	r3, #6
 8004618:	d010      	beq.n	800463c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0201 	orr.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	e007      	b.n	800463c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010000 	.word	0x40010000
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40014000 	.word	0x40014000

08004660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fd ffa8 	bl	80025dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fad0 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x24>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x3e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x58>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e068      	b.n	8004844 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0x82>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	e013      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x92>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	e00b      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	e003      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fc52 	bl	800505c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a23      	ldr	r2, [pc, #140]	; (800484c <HAL_TIM_PWM_Start+0x14c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d107      	bne.n	80047d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <HAL_TIM_PWM_Start+0x14c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d013      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a19      	ldr	r2, [pc, #100]	; (8004850 <HAL_TIM_PWM_Start+0x150>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_TIM_PWM_Start+0x154>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <HAL_TIM_PWM_Start+0x158>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIM_PWM_Start+0x10e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a14      	ldr	r2, [pc, #80]	; (800485c <HAL_TIM_PWM_Start+0x15c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d111      	bne.n	8004832 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b06      	cmp	r3, #6
 800481e:	d010      	beq.n	8004842 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004830:	e007      	b.n	8004842 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000

08004860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d122      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d11b      	bne.n	80048bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0202 	mvn.w	r2, #2
 800488c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9b0 	bl	8004c08 <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f9a2 	bl	8004bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f9b3 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d122      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11b      	bne.n	8004910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0204 	mvn.w	r2, #4
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f986 	bl	8004c08 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f978 	bl	8004bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f989 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d122      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b08      	cmp	r3, #8
 800492a:	d11b      	bne.n	8004964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f06f 0208 	mvn.w	r2, #8
 8004934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f95c 	bl	8004c08 <HAL_TIM_IC_CaptureCallback>
 8004950:	e005      	b.n	800495e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f94e 	bl	8004bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f95f 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b10      	cmp	r3, #16
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f932 	bl	8004c08 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f924 	bl	8004bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f935 	bl	8004c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0201 	mvn.w	r2, #1
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fd f9f8 	bl	8001dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fbc4 	bl	8005198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b40      	cmp	r3, #64	; 0x40
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8fa 	bl	8004c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb8e 	bl	8005184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ae      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	f200 809f 	bhi.w	8004bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004bdd 	.word	0x08004bdd
 8004aac:	08004bdd 	.word	0x08004bdd
 8004ab0:	08004bdd 	.word	0x08004bdd
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004bdd 	.word	0x08004bdd
 8004abc:	08004bdd 	.word	0x08004bdd
 8004ac0:	08004bdd 	.word	0x08004bdd
 8004ac4:	08004b5b 	.word	0x08004b5b
 8004ac8:	08004bdd 	.word	0x08004bdd
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	08004bdd 	.word	0x08004bdd
 8004ad4:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f930 	bl	8004d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e064      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f976 	bl	8004e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]
      break;
 8004b58:	e043      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f9c1 	bl	8004ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	61da      	str	r2, [r3, #28]
      break;
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fa0b 	bl	8004fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a34      	ldr	r2, [pc, #208]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00f      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d00b      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a31      	ldr	r2, [pc, #196]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d007      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a30      	ldr	r2, [pc, #192]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d003      	beq.n	8004c7c <TIM_Base_SetConfig+0x38>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d108      	bne.n	8004c8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9c:	d017      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <TIM_Base_SetConfig+0xe8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <TIM_Base_SetConfig+0xec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d00f      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <TIM_Base_SetConfig+0xf0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TIM_Base_SetConfig+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <TIM_Base_SetConfig+0xf8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_Base_SetConfig+0xfc>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d108      	bne.n	8004ce0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d103      	bne.n	8004d14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	615a      	str	r2, [r3, #20]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40000c00 	.word	0x40000c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0201 	bic.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 0302 	bic.w	r3, r3, #2
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <TIM_OC1_SetConfig+0xc8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10c      	bne.n	8004dba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0308 	bic.w	r3, r3, #8
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a13      	ldr	r2, [pc, #76]	; (8004e0c <TIM_OC1_SetConfig+0xc8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d111      	bne.n	8004de6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	621a      	str	r2, [r3, #32]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40010000 	.word	0x40010000

08004e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f023 0210 	bic.w	r2, r3, #16
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0320 	bic.w	r3, r3, #32
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <TIM_OC2_SetConfig+0xd4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC2_SetConfig+0xd4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d113      	bne.n	8004ebc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000

08004ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10d      	bne.n	8004f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <TIM_OC3_SetConfig+0xd0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d113      	bne.n	8004f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	621a      	str	r2, [r3, #32]
}
 8004fac:	bf00      	nop
 8004fae:	371c      	adds	r7, #28
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40010000 	.word	0x40010000

08004fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	031b      	lsls	r3, r3, #12
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <TIM_OC4_SetConfig+0x9c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d109      	bne.n	8005030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000

0800505c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2201      	movs	r2, #1
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	43db      	mvns	r3, r3
 800507e:	401a      	ands	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 031f 	and.w	r3, r3, #31
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	fa01 f303 	lsl.w	r3, r1, r3
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050bc:	2302      	movs	r3, #2
 80050be:	e050      	b.n	8005162 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800510c:	d013      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a15      	ldr	r2, [pc, #84]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10c      	bne.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40000c00 	.word	0x40000c00
 8005180:	40014000 	.word	0x40014000

08005184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e03f      	b.n	800523e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fd fa5a 	bl	800268c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f9cb 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b08a      	sub	sp, #40	; 0x28
 800524a:	af02      	add	r7, sp, #8
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b20      	cmp	r3, #32
 8005264:	d17c      	bne.n	8005360 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_UART_Transmit+0x2c>
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e075      	b.n	8005362 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_UART_Transmit+0x3e>
 8005280:	2302      	movs	r3, #2
 8005282:	e06e      	b.n	8005362 <HAL_UART_Transmit+0x11c>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2221      	movs	r2, #33	; 0x21
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800529a:	f7fd fbd7 	bl	8002a4c <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b4:	d108      	bne.n	80052c8 <HAL_UART_Transmit+0x82>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	e003      	b.n	80052d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052d8:	e02a      	b.n	8005330 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f8e2 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e036      	b.n	8005362 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	3302      	adds	r3, #2
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e007      	b.n	8005322 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	3301      	adds	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1cf      	bne.n	80052da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2140      	movs	r1, #64	; 0x40
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f8b2 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e006      	b.n	8005362 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e000      	b.n	8005362 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005360:	2302      	movs	r3, #2
  }
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b08a      	sub	sp, #40	; 0x28
 800536e:	af02      	add	r7, sp, #8
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	f040 808c 	bne.w	80054a4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_UART_Receive+0x2e>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e084      	b.n	80054a6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Receive+0x40>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e07d      	b.n	80054a6 <HAL_UART_Receive+0x13c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	; 0x22
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c6:	f7fd fb41 	bl	8002a4c <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Receive+0x8a>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005404:	e043      	b.n	800548e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2120      	movs	r1, #32
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f84c 	bl	80054ae <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e042      	b.n	80054a6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	b29b      	uxth	r3, r3
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	b29a      	uxth	r2, r3
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	3302      	adds	r3, #2
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	e01f      	b.n	8005480 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d007      	beq.n	800545a <HAL_UART_Receive+0xf0>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <HAL_UART_Receive+0xfe>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e008      	b.n	800547a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005474:	b2da      	uxtb	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3301      	adds	r3, #1
 800547e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1b6      	bne.n	8005406 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
  }
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b090      	sub	sp, #64	; 0x40
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054be:	e050      	b.n	8005562 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d04c      	beq.n	8005562 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <UART_WaitOnFlagUntilTimeout+0x30>
 80054ce:	f7fd fabd 	bl	8002a4c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054da:	429a      	cmp	r2, r3
 80054dc:	d241      	bcs.n	8005562 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	613b      	str	r3, [r7, #16]
   return(result);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	63bb      	str	r3, [r7, #56]	; 0x38
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005532:	623a      	str	r2, [r7, #32]
 8005534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	69f9      	ldr	r1, [r7, #28]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e5      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e00f      	b.n	8005582 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4013      	ands	r3, r2
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	bf0c      	ite	eq
 8005572:	2301      	moveq	r3, #1
 8005574:	2300      	movne	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	461a      	mov	r2, r3
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	429a      	cmp	r2, r3
 800557e:	d09f      	beq.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3740      	adds	r7, #64	; 0x40
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	b09f      	sub	sp, #124	; 0x7c
 8005592:	af00      	add	r7, sp, #0
 8005594:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	68d9      	ldr	r1, [r3, #12]
 80055a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	ea40 0301 	orr.w	r3, r0, r1
 80055ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	431a      	orrs	r2, r3
 80055be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055d0:	f021 010c 	bic.w	r1, r1, #12
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055da:	430b      	orrs	r3, r1
 80055dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	6999      	ldr	r1, [r3, #24]
 80055ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	ea40 0301 	orr.w	r3, r0, r1
 80055f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4bc5      	ldr	r3, [pc, #788]	; (8005910 <UART_SetConfig+0x384>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d004      	beq.n	800560a <UART_SetConfig+0x7e>
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4bc3      	ldr	r3, [pc, #780]	; (8005914 <UART_SetConfig+0x388>)
 8005606:	429a      	cmp	r2, r3
 8005608:	d103      	bne.n	8005612 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800560a:	f7fe fd23 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 800560e:	6778      	str	r0, [r7, #116]	; 0x74
 8005610:	e002      	b.n	8005618 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005612:	f7fe fd0b 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8005616:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	f040 80b6 	bne.w	8005790 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005626:	461c      	mov	r4, r3
 8005628:	f04f 0500 	mov.w	r5, #0
 800562c:	4622      	mov	r2, r4
 800562e:	462b      	mov	r3, r5
 8005630:	1891      	adds	r1, r2, r2
 8005632:	6439      	str	r1, [r7, #64]	; 0x40
 8005634:	415b      	adcs	r3, r3
 8005636:	647b      	str	r3, [r7, #68]	; 0x44
 8005638:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800563c:	1912      	adds	r2, r2, r4
 800563e:	eb45 0303 	adc.w	r3, r5, r3
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	00d9      	lsls	r1, r3, #3
 800564c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005650:	00d0      	lsls	r0, r2, #3
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	1911      	adds	r1, r2, r4
 8005658:	6639      	str	r1, [r7, #96]	; 0x60
 800565a:	416b      	adcs	r3, r5
 800565c:	667b      	str	r3, [r7, #100]	; 0x64
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	461a      	mov	r2, r3
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	1891      	adds	r1, r2, r2
 800566a:	63b9      	str	r1, [r7, #56]	; 0x38
 800566c:	415b      	adcs	r3, r3
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005674:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005678:	f7fb fb0e 	bl	8000c98 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4ba5      	ldr	r3, [pc, #660]	; (8005918 <UART_SetConfig+0x38c>)
 8005682:	fba3 2302 	umull	r2, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	011e      	lsls	r6, r3, #4
 800568a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568c:	461c      	mov	r4, r3
 800568e:	f04f 0500 	mov.w	r5, #0
 8005692:	4622      	mov	r2, r4
 8005694:	462b      	mov	r3, r5
 8005696:	1891      	adds	r1, r2, r2
 8005698:	6339      	str	r1, [r7, #48]	; 0x30
 800569a:	415b      	adcs	r3, r3
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056a2:	1912      	adds	r2, r2, r4
 80056a4:	eb45 0303 	adc.w	r3, r5, r3
 80056a8:	f04f 0000 	mov.w	r0, #0
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	00d9      	lsls	r1, r3, #3
 80056b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b6:	00d0      	lsls	r0, r2, #3
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	1911      	adds	r1, r2, r4
 80056be:	65b9      	str	r1, [r7, #88]	; 0x58
 80056c0:	416b      	adcs	r3, r5
 80056c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	461a      	mov	r2, r3
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	1891      	adds	r1, r2, r2
 80056d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80056d2:	415b      	adcs	r3, r3
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056de:	f7fb fadb 	bl	8000c98 <__aeabi_uldivmod>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4b8c      	ldr	r3, [pc, #560]	; (8005918 <UART_SetConfig+0x38c>)
 80056e8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ec:	095b      	lsrs	r3, r3, #5
 80056ee:	2164      	movs	r1, #100	; 0x64
 80056f0:	fb01 f303 	mul.w	r3, r1, r3
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	3332      	adds	r3, #50	; 0x32
 80056fa:	4a87      	ldr	r2, [pc, #540]	; (8005918 <UART_SetConfig+0x38c>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005708:	441e      	add	r6, r3
 800570a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800570c:	4618      	mov	r0, r3
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	1894      	adds	r4, r2, r2
 8005718:	623c      	str	r4, [r7, #32]
 800571a:	415b      	adcs	r3, r3
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005722:	1812      	adds	r2, r2, r0
 8005724:	eb41 0303 	adc.w	r3, r1, r3
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	f04f 0500 	mov.w	r5, #0
 8005730:	00dd      	lsls	r5, r3, #3
 8005732:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005736:	00d4      	lsls	r4, r2, #3
 8005738:	4622      	mov	r2, r4
 800573a:	462b      	mov	r3, r5
 800573c:	1814      	adds	r4, r2, r0
 800573e:	653c      	str	r4, [r7, #80]	; 0x50
 8005740:	414b      	adcs	r3, r1
 8005742:	657b      	str	r3, [r7, #84]	; 0x54
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	461a      	mov	r2, r3
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	1891      	adds	r1, r2, r2
 8005750:	61b9      	str	r1, [r7, #24]
 8005752:	415b      	adcs	r3, r3
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800575a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800575e:	f7fb fa9b 	bl	8000c98 <__aeabi_uldivmod>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <UART_SetConfig+0x38c>)
 8005768:	fba3 1302 	umull	r1, r3, r3, r2
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	2164      	movs	r1, #100	; 0x64
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	3332      	adds	r3, #50	; 0x32
 800577a:	4a67      	ldr	r2, [pc, #412]	; (8005918 <UART_SetConfig+0x38c>)
 800577c:	fba2 2303 	umull	r2, r3, r2, r3
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	f003 0207 	and.w	r2, r3, #7
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4432      	add	r2, r6
 800578c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800578e:	e0b9      	b.n	8005904 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005792:	461c      	mov	r4, r3
 8005794:	f04f 0500 	mov.w	r5, #0
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	1891      	adds	r1, r2, r2
 800579e:	6139      	str	r1, [r7, #16]
 80057a0:	415b      	adcs	r3, r3
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057a8:	1912      	adds	r2, r2, r4
 80057aa:	eb45 0303 	adc.w	r3, r5, r3
 80057ae:	f04f 0000 	mov.w	r0, #0
 80057b2:	f04f 0100 	mov.w	r1, #0
 80057b6:	00d9      	lsls	r1, r3, #3
 80057b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057bc:	00d0      	lsls	r0, r2, #3
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	eb12 0804 	adds.w	r8, r2, r4
 80057c6:	eb43 0905 	adc.w	r9, r3, r5
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	008b      	lsls	r3, r1, #2
 80057de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057e2:	0082      	lsls	r2, r0, #2
 80057e4:	4640      	mov	r0, r8
 80057e6:	4649      	mov	r1, r9
 80057e8:	f7fb fa56 	bl	8000c98 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4b49      	ldr	r3, [pc, #292]	; (8005918 <UART_SetConfig+0x38c>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	011e      	lsls	r6, r3, #4
 80057fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057fc:	4618      	mov	r0, r3
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	1894      	adds	r4, r2, r2
 8005808:	60bc      	str	r4, [r7, #8]
 800580a:	415b      	adcs	r3, r3
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005812:	1812      	adds	r2, r2, r0
 8005814:	eb41 0303 	adc.w	r3, r1, r3
 8005818:	f04f 0400 	mov.w	r4, #0
 800581c:	f04f 0500 	mov.w	r5, #0
 8005820:	00dd      	lsls	r5, r3, #3
 8005822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005826:	00d4      	lsls	r4, r2, #3
 8005828:	4622      	mov	r2, r4
 800582a:	462b      	mov	r3, r5
 800582c:	1814      	adds	r4, r2, r0
 800582e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005830:	414b      	adcs	r3, r1
 8005832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800584c:	0082      	lsls	r2, r0, #2
 800584e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005852:	f7fb fa21 	bl	8000c98 <__aeabi_uldivmod>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <UART_SetConfig+0x38c>)
 800585c:	fba3 1302 	umull	r1, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	2164      	movs	r1, #100	; 0x64
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	3332      	adds	r3, #50	; 0x32
 800586e:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <UART_SetConfig+0x38c>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587a:	441e      	add	r6, r3
 800587c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587e:	4618      	mov	r0, r3
 8005880:	f04f 0100 	mov.w	r1, #0
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	1894      	adds	r4, r2, r2
 800588a:	603c      	str	r4, [r7, #0]
 800588c:	415b      	adcs	r3, r3
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005894:	1812      	adds	r2, r2, r0
 8005896:	eb41 0303 	adc.w	r3, r1, r3
 800589a:	f04f 0400 	mov.w	r4, #0
 800589e:	f04f 0500 	mov.w	r5, #0
 80058a2:	00dd      	lsls	r5, r3, #3
 80058a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a8:	00d4      	lsls	r4, r2, #3
 80058aa:	4622      	mov	r2, r4
 80058ac:	462b      	mov	r3, r5
 80058ae:	eb12 0a00 	adds.w	sl, r2, r0
 80058b2:	eb43 0b01 	adc.w	fp, r3, r1
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	f04f 0300 	mov.w	r3, #0
 80058c8:	008b      	lsls	r3, r1, #2
 80058ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ce:	0082      	lsls	r2, r0, #2
 80058d0:	4650      	mov	r0, sl
 80058d2:	4659      	mov	r1, fp
 80058d4:	f7fb f9e0 	bl	8000c98 <__aeabi_uldivmod>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <UART_SetConfig+0x38c>)
 80058de:	fba3 1302 	umull	r1, r3, r3, r2
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2164      	movs	r1, #100	; 0x64
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	; 0x32
 80058f0:	4a09      	ldr	r2, [pc, #36]	; (8005918 <UART_SetConfig+0x38c>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4432      	add	r2, r6
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	377c      	adds	r7, #124	; 0x7c
 8005908:	46bd      	mov	sp, r7
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	bf00      	nop
 8005910:	40011000 	.word	0x40011000
 8005914:	40011400 	.word	0x40011400
 8005918:	51eb851f 	.word	0x51eb851f

0800591c <atoi>:
 800591c:	220a      	movs	r2, #10
 800591e:	2100      	movs	r1, #0
 8005920:	f001 be14 	b.w	800754c <strtol>

08005924 <__errno>:
 8005924:	4b01      	ldr	r3, [pc, #4]	; (800592c <__errno+0x8>)
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	20000030 	.word	0x20000030

08005930 <__libc_init_array>:
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	4d0d      	ldr	r5, [pc, #52]	; (8005968 <__libc_init_array+0x38>)
 8005934:	4c0d      	ldr	r4, [pc, #52]	; (800596c <__libc_init_array+0x3c>)
 8005936:	1b64      	subs	r4, r4, r5
 8005938:	10a4      	asrs	r4, r4, #2
 800593a:	2600      	movs	r6, #0
 800593c:	42a6      	cmp	r6, r4
 800593e:	d109      	bne.n	8005954 <__libc_init_array+0x24>
 8005940:	4d0b      	ldr	r5, [pc, #44]	; (8005970 <__libc_init_array+0x40>)
 8005942:	4c0c      	ldr	r4, [pc, #48]	; (8005974 <__libc_init_array+0x44>)
 8005944:	f004 fcda 	bl	800a2fc <_init>
 8005948:	1b64      	subs	r4, r4, r5
 800594a:	10a4      	asrs	r4, r4, #2
 800594c:	2600      	movs	r6, #0
 800594e:	42a6      	cmp	r6, r4
 8005950:	d105      	bne.n	800595e <__libc_init_array+0x2e>
 8005952:	bd70      	pop	{r4, r5, r6, pc}
 8005954:	f855 3b04 	ldr.w	r3, [r5], #4
 8005958:	4798      	blx	r3
 800595a:	3601      	adds	r6, #1
 800595c:	e7ee      	b.n	800593c <__libc_init_array+0xc>
 800595e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005962:	4798      	blx	r3
 8005964:	3601      	adds	r6, #1
 8005966:	e7f2      	b.n	800594e <__libc_init_array+0x1e>
 8005968:	0800b344 	.word	0x0800b344
 800596c:	0800b344 	.word	0x0800b344
 8005970:	0800b344 	.word	0x0800b344
 8005974:	0800b348 	.word	0x0800b348

08005978 <memset>:
 8005978:	4402      	add	r2, r0
 800597a:	4603      	mov	r3, r0
 800597c:	4293      	cmp	r3, r2
 800597e:	d100      	bne.n	8005982 <memset+0xa>
 8005980:	4770      	bx	lr
 8005982:	f803 1b01 	strb.w	r1, [r3], #1
 8005986:	e7f9      	b.n	800597c <memset+0x4>

08005988 <__cvt>:
 8005988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	ec55 4b10 	vmov	r4, r5, d0
 8005990:	2d00      	cmp	r5, #0
 8005992:	460e      	mov	r6, r1
 8005994:	4619      	mov	r1, r3
 8005996:	462b      	mov	r3, r5
 8005998:	bfbb      	ittet	lt
 800599a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800599e:	461d      	movlt	r5, r3
 80059a0:	2300      	movge	r3, #0
 80059a2:	232d      	movlt	r3, #45	; 0x2d
 80059a4:	700b      	strb	r3, [r1, #0]
 80059a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059ac:	4691      	mov	r9, r2
 80059ae:	f023 0820 	bic.w	r8, r3, #32
 80059b2:	bfbc      	itt	lt
 80059b4:	4622      	movlt	r2, r4
 80059b6:	4614      	movlt	r4, r2
 80059b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059bc:	d005      	beq.n	80059ca <__cvt+0x42>
 80059be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059c2:	d100      	bne.n	80059c6 <__cvt+0x3e>
 80059c4:	3601      	adds	r6, #1
 80059c6:	2102      	movs	r1, #2
 80059c8:	e000      	b.n	80059cc <__cvt+0x44>
 80059ca:	2103      	movs	r1, #3
 80059cc:	ab03      	add	r3, sp, #12
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	ab02      	add	r3, sp, #8
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	ec45 4b10 	vmov	d0, r4, r5
 80059d8:	4653      	mov	r3, sl
 80059da:	4632      	mov	r2, r6
 80059dc:	f001 ff0c 	bl	80077f8 <_dtoa_r>
 80059e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059e4:	4607      	mov	r7, r0
 80059e6:	d102      	bne.n	80059ee <__cvt+0x66>
 80059e8:	f019 0f01 	tst.w	r9, #1
 80059ec:	d022      	beq.n	8005a34 <__cvt+0xac>
 80059ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059f2:	eb07 0906 	add.w	r9, r7, r6
 80059f6:	d110      	bne.n	8005a1a <__cvt+0x92>
 80059f8:	783b      	ldrb	r3, [r7, #0]
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d10a      	bne.n	8005a14 <__cvt+0x8c>
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7fb f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a0a:	b918      	cbnz	r0, 8005a14 <__cvt+0x8c>
 8005a0c:	f1c6 0601 	rsb	r6, r6, #1
 8005a10:	f8ca 6000 	str.w	r6, [sl]
 8005a14:	f8da 3000 	ldr.w	r3, [sl]
 8005a18:	4499      	add	r9, r3
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4620      	mov	r0, r4
 8005a20:	4629      	mov	r1, r5
 8005a22:	f7fb f859 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a26:	b108      	cbz	r0, 8005a2c <__cvt+0xa4>
 8005a28:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a2c:	2230      	movs	r2, #48	; 0x30
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	454b      	cmp	r3, r9
 8005a32:	d307      	bcc.n	8005a44 <__cvt+0xbc>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a38:	1bdb      	subs	r3, r3, r7
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	b004      	add	sp, #16
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	9103      	str	r1, [sp, #12]
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e7f0      	b.n	8005a2e <__cvt+0xa6>

08005a4c <__exponent>:
 8005a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2900      	cmp	r1, #0
 8005a52:	bfb8      	it	lt
 8005a54:	4249      	neglt	r1, r1
 8005a56:	f803 2b02 	strb.w	r2, [r3], #2
 8005a5a:	bfb4      	ite	lt
 8005a5c:	222d      	movlt	r2, #45	; 0x2d
 8005a5e:	222b      	movge	r2, #43	; 0x2b
 8005a60:	2909      	cmp	r1, #9
 8005a62:	7042      	strb	r2, [r0, #1]
 8005a64:	dd2a      	ble.n	8005abc <__exponent+0x70>
 8005a66:	f10d 0407 	add.w	r4, sp, #7
 8005a6a:	46a4      	mov	ip, r4
 8005a6c:	270a      	movs	r7, #10
 8005a6e:	46a6      	mov	lr, r4
 8005a70:	460a      	mov	r2, r1
 8005a72:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a76:	fb07 1516 	mls	r5, r7, r6, r1
 8005a7a:	3530      	adds	r5, #48	; 0x30
 8005a7c:	2a63      	cmp	r2, #99	; 0x63
 8005a7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a86:	4631      	mov	r1, r6
 8005a88:	dcf1      	bgt.n	8005a6e <__exponent+0x22>
 8005a8a:	3130      	adds	r1, #48	; 0x30
 8005a8c:	f1ae 0502 	sub.w	r5, lr, #2
 8005a90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a94:	1c44      	adds	r4, r0, #1
 8005a96:	4629      	mov	r1, r5
 8005a98:	4561      	cmp	r1, ip
 8005a9a:	d30a      	bcc.n	8005ab2 <__exponent+0x66>
 8005a9c:	f10d 0209 	add.w	r2, sp, #9
 8005aa0:	eba2 020e 	sub.w	r2, r2, lr
 8005aa4:	4565      	cmp	r5, ip
 8005aa6:	bf88      	it	hi
 8005aa8:	2200      	movhi	r2, #0
 8005aaa:	4413      	add	r3, r2
 8005aac:	1a18      	subs	r0, r3, r0
 8005aae:	b003      	add	sp, #12
 8005ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ab6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005aba:	e7ed      	b.n	8005a98 <__exponent+0x4c>
 8005abc:	2330      	movs	r3, #48	; 0x30
 8005abe:	3130      	adds	r1, #48	; 0x30
 8005ac0:	7083      	strb	r3, [r0, #2]
 8005ac2:	70c1      	strb	r1, [r0, #3]
 8005ac4:	1d03      	adds	r3, r0, #4
 8005ac6:	e7f1      	b.n	8005aac <__exponent+0x60>

08005ac8 <_printf_float>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	ed2d 8b02 	vpush	{d8}
 8005ad0:	b08d      	sub	sp, #52	; 0x34
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ad8:	4616      	mov	r6, r2
 8005ada:	461f      	mov	r7, r3
 8005adc:	4605      	mov	r5, r0
 8005ade:	f003 f99d 	bl	8008e1c <_localeconv_r>
 8005ae2:	f8d0 a000 	ldr.w	sl, [r0]
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	f7fa fb7a 	bl	80001e0 <strlen>
 8005aec:	2300      	movs	r3, #0
 8005aee:	930a      	str	r3, [sp, #40]	; 0x28
 8005af0:	6823      	ldr	r3, [r4, #0]
 8005af2:	9305      	str	r3, [sp, #20]
 8005af4:	f8d8 3000 	ldr.w	r3, [r8]
 8005af8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005afc:	3307      	adds	r3, #7
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	f103 0208 	add.w	r2, r3, #8
 8005b06:	f8c8 2000 	str.w	r2, [r8]
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b1a:	9307      	str	r3, [sp, #28]
 8005b1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b20:	ee08 0a10 	vmov	s16, r0
 8005b24:	4b9f      	ldr	r3, [pc, #636]	; (8005da4 <_printf_float+0x2dc>)
 8005b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	f7fb f805 	bl	8000b3c <__aeabi_dcmpun>
 8005b32:	bb88      	cbnz	r0, 8005b98 <_printf_float+0xd0>
 8005b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b38:	4b9a      	ldr	r3, [pc, #616]	; (8005da4 <_printf_float+0x2dc>)
 8005b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b3e:	f7fa ffdf 	bl	8000b00 <__aeabi_dcmple>
 8005b42:	bb48      	cbnz	r0, 8005b98 <_printf_float+0xd0>
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	f7fa ffce 	bl	8000aec <__aeabi_dcmplt>
 8005b50:	b110      	cbz	r0, 8005b58 <_printf_float+0x90>
 8005b52:	232d      	movs	r3, #45	; 0x2d
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b58:	4b93      	ldr	r3, [pc, #588]	; (8005da8 <_printf_float+0x2e0>)
 8005b5a:	4894      	ldr	r0, [pc, #592]	; (8005dac <_printf_float+0x2e4>)
 8005b5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b60:	bf94      	ite	ls
 8005b62:	4698      	movls	r8, r3
 8005b64:	4680      	movhi	r8, r0
 8005b66:	2303      	movs	r3, #3
 8005b68:	6123      	str	r3, [r4, #16]
 8005b6a:	9b05      	ldr	r3, [sp, #20]
 8005b6c:	f023 0204 	bic.w	r2, r3, #4
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	f04f 0900 	mov.w	r9, #0
 8005b76:	9700      	str	r7, [sp, #0]
 8005b78:	4633      	mov	r3, r6
 8005b7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 f9d8 	bl	8005f34 <_printf_common>
 8005b84:	3001      	adds	r0, #1
 8005b86:	f040 8090 	bne.w	8005caa <_printf_float+0x1e2>
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	b00d      	add	sp, #52	; 0x34
 8005b90:	ecbd 8b02 	vpop	{d8}
 8005b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	4640      	mov	r0, r8
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	f7fa ffcc 	bl	8000b3c <__aeabi_dcmpun>
 8005ba4:	b140      	cbz	r0, 8005bb8 <_printf_float+0xf0>
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bfbc      	itt	lt
 8005bac:	232d      	movlt	r3, #45	; 0x2d
 8005bae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bb2:	487f      	ldr	r0, [pc, #508]	; (8005db0 <_printf_float+0x2e8>)
 8005bb4:	4b7f      	ldr	r3, [pc, #508]	; (8005db4 <_printf_float+0x2ec>)
 8005bb6:	e7d1      	b.n	8005b5c <_printf_float+0x94>
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bbe:	9206      	str	r2, [sp, #24]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	d13f      	bne.n	8005c44 <_printf_float+0x17c>
 8005bc4:	2306      	movs	r3, #6
 8005bc6:	6063      	str	r3, [r4, #4]
 8005bc8:	9b05      	ldr	r3, [sp, #20]
 8005bca:	6861      	ldr	r1, [r4, #4]
 8005bcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9303      	str	r3, [sp, #12]
 8005bd4:	ab0a      	add	r3, sp, #40	; 0x28
 8005bd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bda:	ab09      	add	r3, sp, #36	; 0x24
 8005bdc:	ec49 8b10 	vmov	d0, r8, r9
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6022      	str	r2, [r4, #0]
 8005be4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005be8:	4628      	mov	r0, r5
 8005bea:	f7ff fecd 	bl	8005988 <__cvt>
 8005bee:	9b06      	ldr	r3, [sp, #24]
 8005bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf2:	2b47      	cmp	r3, #71	; 0x47
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	d108      	bne.n	8005c0a <_printf_float+0x142>
 8005bf8:	1cc8      	adds	r0, r1, #3
 8005bfa:	db02      	blt.n	8005c02 <_printf_float+0x13a>
 8005bfc:	6863      	ldr	r3, [r4, #4]
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	dd41      	ble.n	8005c86 <_printf_float+0x1be>
 8005c02:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c06:	fa5f fb8b 	uxtb.w	fp, fp
 8005c0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c0e:	d820      	bhi.n	8005c52 <_printf_float+0x18a>
 8005c10:	3901      	subs	r1, #1
 8005c12:	465a      	mov	r2, fp
 8005c14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c18:	9109      	str	r1, [sp, #36]	; 0x24
 8005c1a:	f7ff ff17 	bl	8005a4c <__exponent>
 8005c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c20:	1813      	adds	r3, r2, r0
 8005c22:	2a01      	cmp	r2, #1
 8005c24:	4681      	mov	r9, r0
 8005c26:	6123      	str	r3, [r4, #16]
 8005c28:	dc02      	bgt.n	8005c30 <_printf_float+0x168>
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	07d2      	lsls	r2, r2, #31
 8005c2e:	d501      	bpl.n	8005c34 <_printf_float+0x16c>
 8005c30:	3301      	adds	r3, #1
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d09c      	beq.n	8005b76 <_printf_float+0xae>
 8005c3c:	232d      	movs	r3, #45	; 0x2d
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c42:	e798      	b.n	8005b76 <_printf_float+0xae>
 8005c44:	9a06      	ldr	r2, [sp, #24]
 8005c46:	2a47      	cmp	r2, #71	; 0x47
 8005c48:	d1be      	bne.n	8005bc8 <_printf_float+0x100>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1bc      	bne.n	8005bc8 <_printf_float+0x100>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e7b9      	b.n	8005bc6 <_printf_float+0xfe>
 8005c52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c56:	d118      	bne.n	8005c8a <_printf_float+0x1c2>
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	6863      	ldr	r3, [r4, #4]
 8005c5c:	dd0b      	ble.n	8005c76 <_printf_float+0x1ae>
 8005c5e:	6121      	str	r1, [r4, #16]
 8005c60:	b913      	cbnz	r3, 8005c68 <_printf_float+0x1a0>
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	07d0      	lsls	r0, r2, #31
 8005c66:	d502      	bpl.n	8005c6e <_printf_float+0x1a6>
 8005c68:	3301      	adds	r3, #1
 8005c6a:	440b      	add	r3, r1
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c70:	f04f 0900 	mov.w	r9, #0
 8005c74:	e7de      	b.n	8005c34 <_printf_float+0x16c>
 8005c76:	b913      	cbnz	r3, 8005c7e <_printf_float+0x1b6>
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	07d2      	lsls	r2, r2, #31
 8005c7c:	d501      	bpl.n	8005c82 <_printf_float+0x1ba>
 8005c7e:	3302      	adds	r3, #2
 8005c80:	e7f4      	b.n	8005c6c <_printf_float+0x1a4>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e7f2      	b.n	8005c6c <_printf_float+0x1a4>
 8005c86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8c:	4299      	cmp	r1, r3
 8005c8e:	db05      	blt.n	8005c9c <_printf_float+0x1d4>
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	6121      	str	r1, [r4, #16]
 8005c94:	07d8      	lsls	r0, r3, #31
 8005c96:	d5ea      	bpl.n	8005c6e <_printf_float+0x1a6>
 8005c98:	1c4b      	adds	r3, r1, #1
 8005c9a:	e7e7      	b.n	8005c6c <_printf_float+0x1a4>
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	bfd4      	ite	le
 8005ca0:	f1c1 0202 	rsble	r2, r1, #2
 8005ca4:	2201      	movgt	r2, #1
 8005ca6:	4413      	add	r3, r2
 8005ca8:	e7e0      	b.n	8005c6c <_printf_float+0x1a4>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	055a      	lsls	r2, r3, #21
 8005cae:	d407      	bmi.n	8005cc0 <_printf_float+0x1f8>
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d12c      	bne.n	8005d18 <_printf_float+0x250>
 8005cbe:	e764      	b.n	8005b8a <_printf_float+0xc2>
 8005cc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cc4:	f240 80e0 	bls.w	8005e88 <_printf_float+0x3c0>
 8005cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f7fa ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d034      	beq.n	8005d42 <_printf_float+0x27a>
 8005cd8:	4a37      	ldr	r2, [pc, #220]	; (8005db8 <_printf_float+0x2f0>)
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f af51 	beq.w	8005b8a <_printf_float+0xc2>
 8005ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cec:	429a      	cmp	r2, r3
 8005cee:	db02      	blt.n	8005cf6 <_printf_float+0x22e>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	07d8      	lsls	r0, r3, #31
 8005cf4:	d510      	bpl.n	8005d18 <_printf_float+0x250>
 8005cf6:	ee18 3a10 	vmov	r3, s16
 8005cfa:	4652      	mov	r2, sl
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	4628      	mov	r0, r5
 8005d00:	47b8      	blx	r7
 8005d02:	3001      	adds	r0, #1
 8005d04:	f43f af41 	beq.w	8005b8a <_printf_float+0xc2>
 8005d08:	f04f 0800 	mov.w	r8, #0
 8005d0c:	f104 091a 	add.w	r9, r4, #26
 8005d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	4543      	cmp	r3, r8
 8005d16:	dc09      	bgt.n	8005d2c <_printf_float+0x264>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	079b      	lsls	r3, r3, #30
 8005d1c:	f100 8105 	bmi.w	8005f2a <_printf_float+0x462>
 8005d20:	68e0      	ldr	r0, [r4, #12]
 8005d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d24:	4298      	cmp	r0, r3
 8005d26:	bfb8      	it	lt
 8005d28:	4618      	movlt	r0, r3
 8005d2a:	e730      	b.n	8005b8e <_printf_float+0xc6>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	464a      	mov	r2, r9
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	47b8      	blx	r7
 8005d36:	3001      	adds	r0, #1
 8005d38:	f43f af27 	beq.w	8005b8a <_printf_float+0xc2>
 8005d3c:	f108 0801 	add.w	r8, r8, #1
 8005d40:	e7e6      	b.n	8005d10 <_printf_float+0x248>
 8005d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc39      	bgt.n	8005dbc <_printf_float+0x2f4>
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <_printf_float+0x2f0>)
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4628      	mov	r0, r5
 8005d50:	47b8      	blx	r7
 8005d52:	3001      	adds	r0, #1
 8005d54:	f43f af19 	beq.w	8005b8a <_printf_float+0xc2>
 8005d58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	d102      	bne.n	8005d66 <_printf_float+0x29e>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07d9      	lsls	r1, r3, #31
 8005d64:	d5d8      	bpl.n	8005d18 <_printf_float+0x250>
 8005d66:	ee18 3a10 	vmov	r3, s16
 8005d6a:	4652      	mov	r2, sl
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	f43f af09 	beq.w	8005b8a <_printf_float+0xc2>
 8005d78:	f04f 0900 	mov.w	r9, #0
 8005d7c:	f104 0a1a 	add.w	sl, r4, #26
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	425b      	negs	r3, r3
 8005d84:	454b      	cmp	r3, r9
 8005d86:	dc01      	bgt.n	8005d8c <_printf_float+0x2c4>
 8005d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8a:	e792      	b.n	8005cb2 <_printf_float+0x1ea>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f aef7 	beq.w	8005b8a <_printf_float+0xc2>
 8005d9c:	f109 0901 	add.w	r9, r9, #1
 8005da0:	e7ee      	b.n	8005d80 <_printf_float+0x2b8>
 8005da2:	bf00      	nop
 8005da4:	7fefffff 	.word	0x7fefffff
 8005da8:	0800ae8c 	.word	0x0800ae8c
 8005dac:	0800ae90 	.word	0x0800ae90
 8005db0:	0800ae98 	.word	0x0800ae98
 8005db4:	0800ae94 	.word	0x0800ae94
 8005db8:	0800ae9c 	.word	0x0800ae9c
 8005dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	bfa8      	it	ge
 8005dc4:	461a      	movge	r2, r3
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	4691      	mov	r9, r2
 8005dca:	dc37      	bgt.n	8005e3c <_printf_float+0x374>
 8005dcc:	f04f 0b00 	mov.w	fp, #0
 8005dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dd4:	f104 021a 	add.w	r2, r4, #26
 8005dd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	eba3 0309 	sub.w	r3, r3, r9
 8005de0:	455b      	cmp	r3, fp
 8005de2:	dc33      	bgt.n	8005e4c <_printf_float+0x384>
 8005de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005de8:	429a      	cmp	r2, r3
 8005dea:	db3b      	blt.n	8005e64 <_printf_float+0x39c>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07da      	lsls	r2, r3, #31
 8005df0:	d438      	bmi.n	8005e64 <_printf_float+0x39c>
 8005df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005df4:	9b05      	ldr	r3, [sp, #20]
 8005df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	eba2 0901 	sub.w	r9, r2, r1
 8005dfe:	4599      	cmp	r9, r3
 8005e00:	bfa8      	it	ge
 8005e02:	4699      	movge	r9, r3
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	dc35      	bgt.n	8005e76 <_printf_float+0x3ae>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e12:	f104 0a1a 	add.w	sl, r4, #26
 8005e16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	eba3 0309 	sub.w	r3, r3, r9
 8005e20:	4543      	cmp	r3, r8
 8005e22:	f77f af79 	ble.w	8005d18 <_printf_float+0x250>
 8005e26:	2301      	movs	r3, #1
 8005e28:	4652      	mov	r2, sl
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	47b8      	blx	r7
 8005e30:	3001      	adds	r0, #1
 8005e32:	f43f aeaa 	beq.w	8005b8a <_printf_float+0xc2>
 8005e36:	f108 0801 	add.w	r8, r8, #1
 8005e3a:	e7ec      	b.n	8005e16 <_printf_float+0x34e>
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4642      	mov	r2, r8
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	d1c0      	bne.n	8005dcc <_printf_float+0x304>
 8005e4a:	e69e      	b.n	8005b8a <_printf_float+0xc2>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	9205      	str	r2, [sp, #20]
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f ae97 	beq.w	8005b8a <_printf_float+0xc2>
 8005e5c:	9a05      	ldr	r2, [sp, #20]
 8005e5e:	f10b 0b01 	add.w	fp, fp, #1
 8005e62:	e7b9      	b.n	8005dd8 <_printf_float+0x310>
 8005e64:	ee18 3a10 	vmov	r3, s16
 8005e68:	4652      	mov	r2, sl
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	d1be      	bne.n	8005df2 <_printf_float+0x32a>
 8005e74:	e689      	b.n	8005b8a <_printf_float+0xc2>
 8005e76:	9a05      	ldr	r2, [sp, #20]
 8005e78:	464b      	mov	r3, r9
 8005e7a:	4442      	add	r2, r8
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	d1c1      	bne.n	8005e0a <_printf_float+0x342>
 8005e86:	e680      	b.n	8005b8a <_printf_float+0xc2>
 8005e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e8a:	2a01      	cmp	r2, #1
 8005e8c:	dc01      	bgt.n	8005e92 <_printf_float+0x3ca>
 8005e8e:	07db      	lsls	r3, r3, #31
 8005e90:	d538      	bpl.n	8005f04 <_printf_float+0x43c>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4642      	mov	r2, r8
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f43f ae74 	beq.w	8005b8a <_printf_float+0xc2>
 8005ea2:	ee18 3a10 	vmov	r3, s16
 8005ea6:	4652      	mov	r2, sl
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	4628      	mov	r0, r5
 8005eac:	47b8      	blx	r7
 8005eae:	3001      	adds	r0, #1
 8005eb0:	f43f ae6b 	beq.w	8005b8a <_printf_float+0xc2>
 8005eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f7fa fe0c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ec0:	b9d8      	cbnz	r0, 8005efa <_printf_float+0x432>
 8005ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec4:	f108 0201 	add.w	r2, r8, #1
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d10e      	bne.n	8005ef2 <_printf_float+0x42a>
 8005ed4:	e659      	b.n	8005b8a <_printf_float+0xc2>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4652      	mov	r2, sl
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f ae52 	beq.w	8005b8a <_printf_float+0xc2>
 8005ee6:	f108 0801 	add.w	r8, r8, #1
 8005eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eec:	3b01      	subs	r3, #1
 8005eee:	4543      	cmp	r3, r8
 8005ef0:	dcf1      	bgt.n	8005ed6 <_printf_float+0x40e>
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ef8:	e6dc      	b.n	8005cb4 <_printf_float+0x1ec>
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	f104 0a1a 	add.w	sl, r4, #26
 8005f02:	e7f2      	b.n	8005eea <_printf_float+0x422>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4642      	mov	r2, r8
 8005f08:	e7df      	b.n	8005eca <_printf_float+0x402>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	464a      	mov	r2, r9
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f ae38 	beq.w	8005b8a <_printf_float+0xc2>
 8005f1a:	f108 0801 	add.w	r8, r8, #1
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f22:	1a5b      	subs	r3, r3, r1
 8005f24:	4543      	cmp	r3, r8
 8005f26:	dcf0      	bgt.n	8005f0a <_printf_float+0x442>
 8005f28:	e6fa      	b.n	8005d20 <_printf_float+0x258>
 8005f2a:	f04f 0800 	mov.w	r8, #0
 8005f2e:	f104 0919 	add.w	r9, r4, #25
 8005f32:	e7f4      	b.n	8005f1e <_printf_float+0x456>

08005f34 <_printf_common>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	4616      	mov	r6, r2
 8005f3a:	4699      	mov	r9, r3
 8005f3c:	688a      	ldr	r2, [r1, #8]
 8005f3e:	690b      	ldr	r3, [r1, #16]
 8005f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f44:	4293      	cmp	r3, r2
 8005f46:	bfb8      	it	lt
 8005f48:	4613      	movlt	r3, r2
 8005f4a:	6033      	str	r3, [r6, #0]
 8005f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f50:	4607      	mov	r7, r0
 8005f52:	460c      	mov	r4, r1
 8005f54:	b10a      	cbz	r2, 8005f5a <_printf_common+0x26>
 8005f56:	3301      	adds	r3, #1
 8005f58:	6033      	str	r3, [r6, #0]
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	0699      	lsls	r1, r3, #26
 8005f5e:	bf42      	ittt	mi
 8005f60:	6833      	ldrmi	r3, [r6, #0]
 8005f62:	3302      	addmi	r3, #2
 8005f64:	6033      	strmi	r3, [r6, #0]
 8005f66:	6825      	ldr	r5, [r4, #0]
 8005f68:	f015 0506 	ands.w	r5, r5, #6
 8005f6c:	d106      	bne.n	8005f7c <_printf_common+0x48>
 8005f6e:	f104 0a19 	add.w	sl, r4, #25
 8005f72:	68e3      	ldr	r3, [r4, #12]
 8005f74:	6832      	ldr	r2, [r6, #0]
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	dc26      	bgt.n	8005fca <_printf_common+0x96>
 8005f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f80:	1e13      	subs	r3, r2, #0
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	bf18      	it	ne
 8005f86:	2301      	movne	r3, #1
 8005f88:	0692      	lsls	r2, r2, #26
 8005f8a:	d42b      	bmi.n	8005fe4 <_printf_common+0xb0>
 8005f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f90:	4649      	mov	r1, r9
 8005f92:	4638      	mov	r0, r7
 8005f94:	47c0      	blx	r8
 8005f96:	3001      	adds	r0, #1
 8005f98:	d01e      	beq.n	8005fd8 <_printf_common+0xa4>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	68e5      	ldr	r5, [r4, #12]
 8005f9e:	6832      	ldr	r2, [r6, #0]
 8005fa0:	f003 0306 	and.w	r3, r3, #6
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	bf08      	it	eq
 8005fa8:	1aad      	subeq	r5, r5, r2
 8005faa:	68a3      	ldr	r3, [r4, #8]
 8005fac:	6922      	ldr	r2, [r4, #16]
 8005fae:	bf0c      	ite	eq
 8005fb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb4:	2500      	movne	r5, #0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	bfc4      	itt	gt
 8005fba:	1a9b      	subgt	r3, r3, r2
 8005fbc:	18ed      	addgt	r5, r5, r3
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	341a      	adds	r4, #26
 8005fc2:	42b5      	cmp	r5, r6
 8005fc4:	d11a      	bne.n	8005ffc <_printf_common+0xc8>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e008      	b.n	8005fdc <_printf_common+0xa8>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4652      	mov	r2, sl
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	47c0      	blx	r8
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d103      	bne.n	8005fe0 <_printf_common+0xac>
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	e7c6      	b.n	8005f72 <_printf_common+0x3e>
 8005fe4:	18e1      	adds	r1, r4, r3
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	2030      	movs	r0, #48	; 0x30
 8005fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fee:	4422      	add	r2, r4
 8005ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	e7c7      	b.n	8005f8c <_printf_common+0x58>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4622      	mov	r2, r4
 8006000:	4649      	mov	r1, r9
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	3001      	adds	r0, #1
 8006008:	d0e6      	beq.n	8005fd8 <_printf_common+0xa4>
 800600a:	3601      	adds	r6, #1
 800600c:	e7d9      	b.n	8005fc2 <_printf_common+0x8e>
	...

08006010 <_printf_i>:
 8006010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	460c      	mov	r4, r1
 8006016:	4691      	mov	r9, r2
 8006018:	7e27      	ldrb	r7, [r4, #24]
 800601a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800601c:	2f78      	cmp	r7, #120	; 0x78
 800601e:	4680      	mov	r8, r0
 8006020:	469a      	mov	sl, r3
 8006022:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006026:	d807      	bhi.n	8006038 <_printf_i+0x28>
 8006028:	2f62      	cmp	r7, #98	; 0x62
 800602a:	d80a      	bhi.n	8006042 <_printf_i+0x32>
 800602c:	2f00      	cmp	r7, #0
 800602e:	f000 80d8 	beq.w	80061e2 <_printf_i+0x1d2>
 8006032:	2f58      	cmp	r7, #88	; 0x58
 8006034:	f000 80a3 	beq.w	800617e <_printf_i+0x16e>
 8006038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800603c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006040:	e03a      	b.n	80060b8 <_printf_i+0xa8>
 8006042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006046:	2b15      	cmp	r3, #21
 8006048:	d8f6      	bhi.n	8006038 <_printf_i+0x28>
 800604a:	a001      	add	r0, pc, #4	; (adr r0, 8006050 <_printf_i+0x40>)
 800604c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006050:	080060a9 	.word	0x080060a9
 8006054:	080060bd 	.word	0x080060bd
 8006058:	08006039 	.word	0x08006039
 800605c:	08006039 	.word	0x08006039
 8006060:	08006039 	.word	0x08006039
 8006064:	08006039 	.word	0x08006039
 8006068:	080060bd 	.word	0x080060bd
 800606c:	08006039 	.word	0x08006039
 8006070:	08006039 	.word	0x08006039
 8006074:	08006039 	.word	0x08006039
 8006078:	08006039 	.word	0x08006039
 800607c:	080061c9 	.word	0x080061c9
 8006080:	080060ed 	.word	0x080060ed
 8006084:	080061ab 	.word	0x080061ab
 8006088:	08006039 	.word	0x08006039
 800608c:	08006039 	.word	0x08006039
 8006090:	080061eb 	.word	0x080061eb
 8006094:	08006039 	.word	0x08006039
 8006098:	080060ed 	.word	0x080060ed
 800609c:	08006039 	.word	0x08006039
 80060a0:	08006039 	.word	0x08006039
 80060a4:	080061b3 	.word	0x080061b3
 80060a8:	680b      	ldr	r3, [r1, #0]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	600a      	str	r2, [r1, #0]
 80060b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0a3      	b.n	8006204 <_printf_i+0x1f4>
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	6808      	ldr	r0, [r1, #0]
 80060c0:	062e      	lsls	r6, r5, #24
 80060c2:	f100 0304 	add.w	r3, r0, #4
 80060c6:	d50a      	bpl.n	80060de <_printf_i+0xce>
 80060c8:	6805      	ldr	r5, [r0, #0]
 80060ca:	600b      	str	r3, [r1, #0]
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	da03      	bge.n	80060d8 <_printf_i+0xc8>
 80060d0:	232d      	movs	r3, #45	; 0x2d
 80060d2:	426d      	negs	r5, r5
 80060d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d8:	485e      	ldr	r0, [pc, #376]	; (8006254 <_printf_i+0x244>)
 80060da:	230a      	movs	r3, #10
 80060dc:	e019      	b.n	8006112 <_printf_i+0x102>
 80060de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060e2:	6805      	ldr	r5, [r0, #0]
 80060e4:	600b      	str	r3, [r1, #0]
 80060e6:	bf18      	it	ne
 80060e8:	b22d      	sxthne	r5, r5
 80060ea:	e7ef      	b.n	80060cc <_printf_i+0xbc>
 80060ec:	680b      	ldr	r3, [r1, #0]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	1d18      	adds	r0, r3, #4
 80060f2:	6008      	str	r0, [r1, #0]
 80060f4:	0628      	lsls	r0, r5, #24
 80060f6:	d501      	bpl.n	80060fc <_printf_i+0xec>
 80060f8:	681d      	ldr	r5, [r3, #0]
 80060fa:	e002      	b.n	8006102 <_printf_i+0xf2>
 80060fc:	0669      	lsls	r1, r5, #25
 80060fe:	d5fb      	bpl.n	80060f8 <_printf_i+0xe8>
 8006100:	881d      	ldrh	r5, [r3, #0]
 8006102:	4854      	ldr	r0, [pc, #336]	; (8006254 <_printf_i+0x244>)
 8006104:	2f6f      	cmp	r7, #111	; 0x6f
 8006106:	bf0c      	ite	eq
 8006108:	2308      	moveq	r3, #8
 800610a:	230a      	movne	r3, #10
 800610c:	2100      	movs	r1, #0
 800610e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006112:	6866      	ldr	r6, [r4, #4]
 8006114:	60a6      	str	r6, [r4, #8]
 8006116:	2e00      	cmp	r6, #0
 8006118:	bfa2      	ittt	ge
 800611a:	6821      	ldrge	r1, [r4, #0]
 800611c:	f021 0104 	bicge.w	r1, r1, #4
 8006120:	6021      	strge	r1, [r4, #0]
 8006122:	b90d      	cbnz	r5, 8006128 <_printf_i+0x118>
 8006124:	2e00      	cmp	r6, #0
 8006126:	d04d      	beq.n	80061c4 <_printf_i+0x1b4>
 8006128:	4616      	mov	r6, r2
 800612a:	fbb5 f1f3 	udiv	r1, r5, r3
 800612e:	fb03 5711 	mls	r7, r3, r1, r5
 8006132:	5dc7      	ldrb	r7, [r0, r7]
 8006134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006138:	462f      	mov	r7, r5
 800613a:	42bb      	cmp	r3, r7
 800613c:	460d      	mov	r5, r1
 800613e:	d9f4      	bls.n	800612a <_printf_i+0x11a>
 8006140:	2b08      	cmp	r3, #8
 8006142:	d10b      	bne.n	800615c <_printf_i+0x14c>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	07df      	lsls	r7, r3, #31
 8006148:	d508      	bpl.n	800615c <_printf_i+0x14c>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	6861      	ldr	r1, [r4, #4]
 800614e:	4299      	cmp	r1, r3
 8006150:	bfde      	ittt	le
 8006152:	2330      	movle	r3, #48	; 0x30
 8006154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006158:	f106 36ff 	addle.w	r6, r6, #4294967295
 800615c:	1b92      	subs	r2, r2, r6
 800615e:	6122      	str	r2, [r4, #16]
 8006160:	f8cd a000 	str.w	sl, [sp]
 8006164:	464b      	mov	r3, r9
 8006166:	aa03      	add	r2, sp, #12
 8006168:	4621      	mov	r1, r4
 800616a:	4640      	mov	r0, r8
 800616c:	f7ff fee2 	bl	8005f34 <_printf_common>
 8006170:	3001      	adds	r0, #1
 8006172:	d14c      	bne.n	800620e <_printf_i+0x1fe>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295
 8006178:	b004      	add	sp, #16
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	4835      	ldr	r0, [pc, #212]	; (8006254 <_printf_i+0x244>)
 8006180:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006184:	6823      	ldr	r3, [r4, #0]
 8006186:	680e      	ldr	r6, [r1, #0]
 8006188:	061f      	lsls	r7, r3, #24
 800618a:	f856 5b04 	ldr.w	r5, [r6], #4
 800618e:	600e      	str	r6, [r1, #0]
 8006190:	d514      	bpl.n	80061bc <_printf_i+0x1ac>
 8006192:	07d9      	lsls	r1, r3, #31
 8006194:	bf44      	itt	mi
 8006196:	f043 0320 	orrmi.w	r3, r3, #32
 800619a:	6023      	strmi	r3, [r4, #0]
 800619c:	b91d      	cbnz	r5, 80061a6 <_printf_i+0x196>
 800619e:	6823      	ldr	r3, [r4, #0]
 80061a0:	f023 0320 	bic.w	r3, r3, #32
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	2310      	movs	r3, #16
 80061a8:	e7b0      	b.n	800610c <_printf_i+0xfc>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f043 0320 	orr.w	r3, r3, #32
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	2378      	movs	r3, #120	; 0x78
 80061b4:	4828      	ldr	r0, [pc, #160]	; (8006258 <_printf_i+0x248>)
 80061b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ba:	e7e3      	b.n	8006184 <_printf_i+0x174>
 80061bc:	065e      	lsls	r6, r3, #25
 80061be:	bf48      	it	mi
 80061c0:	b2ad      	uxthmi	r5, r5
 80061c2:	e7e6      	b.n	8006192 <_printf_i+0x182>
 80061c4:	4616      	mov	r6, r2
 80061c6:	e7bb      	b.n	8006140 <_printf_i+0x130>
 80061c8:	680b      	ldr	r3, [r1, #0]
 80061ca:	6826      	ldr	r6, [r4, #0]
 80061cc:	6960      	ldr	r0, [r4, #20]
 80061ce:	1d1d      	adds	r5, r3, #4
 80061d0:	600d      	str	r5, [r1, #0]
 80061d2:	0635      	lsls	r5, r6, #24
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	d501      	bpl.n	80061dc <_printf_i+0x1cc>
 80061d8:	6018      	str	r0, [r3, #0]
 80061da:	e002      	b.n	80061e2 <_printf_i+0x1d2>
 80061dc:	0671      	lsls	r1, r6, #25
 80061de:	d5fb      	bpl.n	80061d8 <_printf_i+0x1c8>
 80061e0:	8018      	strh	r0, [r3, #0]
 80061e2:	2300      	movs	r3, #0
 80061e4:	6123      	str	r3, [r4, #16]
 80061e6:	4616      	mov	r6, r2
 80061e8:	e7ba      	b.n	8006160 <_printf_i+0x150>
 80061ea:	680b      	ldr	r3, [r1, #0]
 80061ec:	1d1a      	adds	r2, r3, #4
 80061ee:	600a      	str	r2, [r1, #0]
 80061f0:	681e      	ldr	r6, [r3, #0]
 80061f2:	6862      	ldr	r2, [r4, #4]
 80061f4:	2100      	movs	r1, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7f9 fffa 	bl	80001f0 <memchr>
 80061fc:	b108      	cbz	r0, 8006202 <_printf_i+0x1f2>
 80061fe:	1b80      	subs	r0, r0, r6
 8006200:	6060      	str	r0, [r4, #4]
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	2300      	movs	r3, #0
 8006208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620c:	e7a8      	b.n	8006160 <_printf_i+0x150>
 800620e:	6923      	ldr	r3, [r4, #16]
 8006210:	4632      	mov	r2, r6
 8006212:	4649      	mov	r1, r9
 8006214:	4640      	mov	r0, r8
 8006216:	47d0      	blx	sl
 8006218:	3001      	adds	r0, #1
 800621a:	d0ab      	beq.n	8006174 <_printf_i+0x164>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	079b      	lsls	r3, r3, #30
 8006220:	d413      	bmi.n	800624a <_printf_i+0x23a>
 8006222:	68e0      	ldr	r0, [r4, #12]
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	4298      	cmp	r0, r3
 8006228:	bfb8      	it	lt
 800622a:	4618      	movlt	r0, r3
 800622c:	e7a4      	b.n	8006178 <_printf_i+0x168>
 800622e:	2301      	movs	r3, #1
 8006230:	4632      	mov	r2, r6
 8006232:	4649      	mov	r1, r9
 8006234:	4640      	mov	r0, r8
 8006236:	47d0      	blx	sl
 8006238:	3001      	adds	r0, #1
 800623a:	d09b      	beq.n	8006174 <_printf_i+0x164>
 800623c:	3501      	adds	r5, #1
 800623e:	68e3      	ldr	r3, [r4, #12]
 8006240:	9903      	ldr	r1, [sp, #12]
 8006242:	1a5b      	subs	r3, r3, r1
 8006244:	42ab      	cmp	r3, r5
 8006246:	dcf2      	bgt.n	800622e <_printf_i+0x21e>
 8006248:	e7eb      	b.n	8006222 <_printf_i+0x212>
 800624a:	2500      	movs	r5, #0
 800624c:	f104 0619 	add.w	r6, r4, #25
 8006250:	e7f5      	b.n	800623e <_printf_i+0x22e>
 8006252:	bf00      	nop
 8006254:	0800ae9e 	.word	0x0800ae9e
 8006258:	0800aeaf 	.word	0x0800aeaf

0800625c <_scanf_float>:
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	b087      	sub	sp, #28
 8006262:	4617      	mov	r7, r2
 8006264:	9303      	str	r3, [sp, #12]
 8006266:	688b      	ldr	r3, [r1, #8]
 8006268:	1e5a      	subs	r2, r3, #1
 800626a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800626e:	bf83      	ittte	hi
 8006270:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006274:	195b      	addhi	r3, r3, r5
 8006276:	9302      	strhi	r3, [sp, #8]
 8006278:	2300      	movls	r3, #0
 800627a:	bf86      	itte	hi
 800627c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006280:	608b      	strhi	r3, [r1, #8]
 8006282:	9302      	strls	r3, [sp, #8]
 8006284:	680b      	ldr	r3, [r1, #0]
 8006286:	468b      	mov	fp, r1
 8006288:	2500      	movs	r5, #0
 800628a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800628e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006292:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006296:	4680      	mov	r8, r0
 8006298:	460c      	mov	r4, r1
 800629a:	465e      	mov	r6, fp
 800629c:	46aa      	mov	sl, r5
 800629e:	46a9      	mov	r9, r5
 80062a0:	9501      	str	r5, [sp, #4]
 80062a2:	68a2      	ldr	r2, [r4, #8]
 80062a4:	b152      	cbz	r2, 80062bc <_scanf_float+0x60>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b4e      	cmp	r3, #78	; 0x4e
 80062ac:	d864      	bhi.n	8006378 <_scanf_float+0x11c>
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d83c      	bhi.n	800632c <_scanf_float+0xd0>
 80062b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80062b6:	b2c8      	uxtb	r0, r1
 80062b8:	280e      	cmp	r0, #14
 80062ba:	d93a      	bls.n	8006332 <_scanf_float+0xd6>
 80062bc:	f1b9 0f00 	cmp.w	r9, #0
 80062c0:	d003      	beq.n	80062ca <_scanf_float+0x6e>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ce:	f1ba 0f01 	cmp.w	sl, #1
 80062d2:	f200 8113 	bhi.w	80064fc <_scanf_float+0x2a0>
 80062d6:	455e      	cmp	r6, fp
 80062d8:	f200 8105 	bhi.w	80064e6 <_scanf_float+0x28a>
 80062dc:	2501      	movs	r5, #1
 80062de:	4628      	mov	r0, r5
 80062e0:	b007      	add	sp, #28
 80062e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80062ea:	2a0d      	cmp	r2, #13
 80062ec:	d8e6      	bhi.n	80062bc <_scanf_float+0x60>
 80062ee:	a101      	add	r1, pc, #4	; (adr r1, 80062f4 <_scanf_float+0x98>)
 80062f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80062f4:	08006433 	.word	0x08006433
 80062f8:	080062bd 	.word	0x080062bd
 80062fc:	080062bd 	.word	0x080062bd
 8006300:	080062bd 	.word	0x080062bd
 8006304:	08006493 	.word	0x08006493
 8006308:	0800646b 	.word	0x0800646b
 800630c:	080062bd 	.word	0x080062bd
 8006310:	080062bd 	.word	0x080062bd
 8006314:	08006441 	.word	0x08006441
 8006318:	080062bd 	.word	0x080062bd
 800631c:	080062bd 	.word	0x080062bd
 8006320:	080062bd 	.word	0x080062bd
 8006324:	080062bd 	.word	0x080062bd
 8006328:	080063f9 	.word	0x080063f9
 800632c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006330:	e7db      	b.n	80062ea <_scanf_float+0x8e>
 8006332:	290e      	cmp	r1, #14
 8006334:	d8c2      	bhi.n	80062bc <_scanf_float+0x60>
 8006336:	a001      	add	r0, pc, #4	; (adr r0, 800633c <_scanf_float+0xe0>)
 8006338:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800633c:	080063eb 	.word	0x080063eb
 8006340:	080062bd 	.word	0x080062bd
 8006344:	080063eb 	.word	0x080063eb
 8006348:	0800647f 	.word	0x0800647f
 800634c:	080062bd 	.word	0x080062bd
 8006350:	08006399 	.word	0x08006399
 8006354:	080063d5 	.word	0x080063d5
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063d5 	.word	0x080063d5
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	2b6e      	cmp	r3, #110	; 0x6e
 800637a:	d809      	bhi.n	8006390 <_scanf_float+0x134>
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d8b2      	bhi.n	80062e6 <_scanf_float+0x8a>
 8006380:	2b54      	cmp	r3, #84	; 0x54
 8006382:	d077      	beq.n	8006474 <_scanf_float+0x218>
 8006384:	2b59      	cmp	r3, #89	; 0x59
 8006386:	d199      	bne.n	80062bc <_scanf_float+0x60>
 8006388:	2d07      	cmp	r5, #7
 800638a:	d197      	bne.n	80062bc <_scanf_float+0x60>
 800638c:	2508      	movs	r5, #8
 800638e:	e029      	b.n	80063e4 <_scanf_float+0x188>
 8006390:	2b74      	cmp	r3, #116	; 0x74
 8006392:	d06f      	beq.n	8006474 <_scanf_float+0x218>
 8006394:	2b79      	cmp	r3, #121	; 0x79
 8006396:	e7f6      	b.n	8006386 <_scanf_float+0x12a>
 8006398:	6821      	ldr	r1, [r4, #0]
 800639a:	05c8      	lsls	r0, r1, #23
 800639c:	d51a      	bpl.n	80063d4 <_scanf_float+0x178>
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80063a4:	6021      	str	r1, [r4, #0]
 80063a6:	f109 0901 	add.w	r9, r9, #1
 80063aa:	b11b      	cbz	r3, 80063b4 <_scanf_float+0x158>
 80063ac:	3b01      	subs	r3, #1
 80063ae:	3201      	adds	r2, #1
 80063b0:	9302      	str	r3, [sp, #8]
 80063b2:	60a2      	str	r2, [r4, #8]
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	3301      	adds	r3, #1
 80063be:	6123      	str	r3, [r4, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	f340 8084 	ble.w	80064d4 <_scanf_float+0x278>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	3301      	adds	r3, #1
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	e766      	b.n	80062a2 <_scanf_float+0x46>
 80063d4:	eb1a 0f05 	cmn.w	sl, r5
 80063d8:	f47f af70 	bne.w	80062bc <_scanf_float+0x60>
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	f806 3b01 	strb.w	r3, [r6], #1
 80063e8:	e7e4      	b.n	80063b4 <_scanf_float+0x158>
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	0610      	lsls	r0, r2, #24
 80063ee:	f57f af65 	bpl.w	80062bc <_scanf_float+0x60>
 80063f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f6:	e7f4      	b.n	80063e2 <_scanf_float+0x186>
 80063f8:	f1ba 0f00 	cmp.w	sl, #0
 80063fc:	d10e      	bne.n	800641c <_scanf_float+0x1c0>
 80063fe:	f1b9 0f00 	cmp.w	r9, #0
 8006402:	d10e      	bne.n	8006422 <_scanf_float+0x1c6>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800640a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800640e:	d108      	bne.n	8006422 <_scanf_float+0x1c6>
 8006410:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006414:	6022      	str	r2, [r4, #0]
 8006416:	f04f 0a01 	mov.w	sl, #1
 800641a:	e7e3      	b.n	80063e4 <_scanf_float+0x188>
 800641c:	f1ba 0f02 	cmp.w	sl, #2
 8006420:	d055      	beq.n	80064ce <_scanf_float+0x272>
 8006422:	2d01      	cmp	r5, #1
 8006424:	d002      	beq.n	800642c <_scanf_float+0x1d0>
 8006426:	2d04      	cmp	r5, #4
 8006428:	f47f af48 	bne.w	80062bc <_scanf_float+0x60>
 800642c:	3501      	adds	r5, #1
 800642e:	b2ed      	uxtb	r5, r5
 8006430:	e7d8      	b.n	80063e4 <_scanf_float+0x188>
 8006432:	f1ba 0f01 	cmp.w	sl, #1
 8006436:	f47f af41 	bne.w	80062bc <_scanf_float+0x60>
 800643a:	f04f 0a02 	mov.w	sl, #2
 800643e:	e7d1      	b.n	80063e4 <_scanf_float+0x188>
 8006440:	b97d      	cbnz	r5, 8006462 <_scanf_float+0x206>
 8006442:	f1b9 0f00 	cmp.w	r9, #0
 8006446:	f47f af3c 	bne.w	80062c2 <_scanf_float+0x66>
 800644a:	6822      	ldr	r2, [r4, #0]
 800644c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006450:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006454:	f47f af39 	bne.w	80062ca <_scanf_float+0x6e>
 8006458:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	2501      	movs	r5, #1
 8006460:	e7c0      	b.n	80063e4 <_scanf_float+0x188>
 8006462:	2d03      	cmp	r5, #3
 8006464:	d0e2      	beq.n	800642c <_scanf_float+0x1d0>
 8006466:	2d05      	cmp	r5, #5
 8006468:	e7de      	b.n	8006428 <_scanf_float+0x1cc>
 800646a:	2d02      	cmp	r5, #2
 800646c:	f47f af26 	bne.w	80062bc <_scanf_float+0x60>
 8006470:	2503      	movs	r5, #3
 8006472:	e7b7      	b.n	80063e4 <_scanf_float+0x188>
 8006474:	2d06      	cmp	r5, #6
 8006476:	f47f af21 	bne.w	80062bc <_scanf_float+0x60>
 800647a:	2507      	movs	r5, #7
 800647c:	e7b2      	b.n	80063e4 <_scanf_float+0x188>
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	0591      	lsls	r1, r2, #22
 8006482:	f57f af1b 	bpl.w	80062bc <_scanf_float+0x60>
 8006486:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006490:	e7a8      	b.n	80063e4 <_scanf_float+0x188>
 8006492:	6822      	ldr	r2, [r4, #0]
 8006494:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006498:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800649c:	d006      	beq.n	80064ac <_scanf_float+0x250>
 800649e:	0550      	lsls	r0, r2, #21
 80064a0:	f57f af0c 	bpl.w	80062bc <_scanf_float+0x60>
 80064a4:	f1b9 0f00 	cmp.w	r9, #0
 80064a8:	f43f af0f 	beq.w	80062ca <_scanf_float+0x6e>
 80064ac:	0591      	lsls	r1, r2, #22
 80064ae:	bf58      	it	pl
 80064b0:	9901      	ldrpl	r1, [sp, #4]
 80064b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064b6:	bf58      	it	pl
 80064b8:	eba9 0101 	subpl.w	r1, r9, r1
 80064bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80064c0:	bf58      	it	pl
 80064c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80064c6:	6022      	str	r2, [r4, #0]
 80064c8:	f04f 0900 	mov.w	r9, #0
 80064cc:	e78a      	b.n	80063e4 <_scanf_float+0x188>
 80064ce:	f04f 0a03 	mov.w	sl, #3
 80064d2:	e787      	b.n	80063e4 <_scanf_float+0x188>
 80064d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064d8:	4639      	mov	r1, r7
 80064da:	4640      	mov	r0, r8
 80064dc:	4798      	blx	r3
 80064de:	2800      	cmp	r0, #0
 80064e0:	f43f aedf 	beq.w	80062a2 <_scanf_float+0x46>
 80064e4:	e6ea      	b.n	80062bc <_scanf_float+0x60>
 80064e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064ee:	463a      	mov	r2, r7
 80064f0:	4640      	mov	r0, r8
 80064f2:	4798      	blx	r3
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	6123      	str	r3, [r4, #16]
 80064fa:	e6ec      	b.n	80062d6 <_scanf_float+0x7a>
 80064fc:	1e6b      	subs	r3, r5, #1
 80064fe:	2b06      	cmp	r3, #6
 8006500:	d825      	bhi.n	800654e <_scanf_float+0x2f2>
 8006502:	2d02      	cmp	r5, #2
 8006504:	d836      	bhi.n	8006574 <_scanf_float+0x318>
 8006506:	455e      	cmp	r6, fp
 8006508:	f67f aee8 	bls.w	80062dc <_scanf_float+0x80>
 800650c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006510:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006514:	463a      	mov	r2, r7
 8006516:	4640      	mov	r0, r8
 8006518:	4798      	blx	r3
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	3b01      	subs	r3, #1
 800651e:	6123      	str	r3, [r4, #16]
 8006520:	e7f1      	b.n	8006506 <_scanf_float+0x2aa>
 8006522:	9802      	ldr	r0, [sp, #8]
 8006524:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006528:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	463a      	mov	r2, r7
 8006530:	4640      	mov	r0, r8
 8006532:	4798      	blx	r3
 8006534:	6923      	ldr	r3, [r4, #16]
 8006536:	3b01      	subs	r3, #1
 8006538:	6123      	str	r3, [r4, #16]
 800653a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800653e:	fa5f fa8a 	uxtb.w	sl, sl
 8006542:	f1ba 0f02 	cmp.w	sl, #2
 8006546:	d1ec      	bne.n	8006522 <_scanf_float+0x2c6>
 8006548:	3d03      	subs	r5, #3
 800654a:	b2ed      	uxtb	r5, r5
 800654c:	1b76      	subs	r6, r6, r5
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	05da      	lsls	r2, r3, #23
 8006552:	d52f      	bpl.n	80065b4 <_scanf_float+0x358>
 8006554:	055b      	lsls	r3, r3, #21
 8006556:	d510      	bpl.n	800657a <_scanf_float+0x31e>
 8006558:	455e      	cmp	r6, fp
 800655a:	f67f aebf 	bls.w	80062dc <_scanf_float+0x80>
 800655e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006562:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006566:	463a      	mov	r2, r7
 8006568:	4640      	mov	r0, r8
 800656a:	4798      	blx	r3
 800656c:	6923      	ldr	r3, [r4, #16]
 800656e:	3b01      	subs	r3, #1
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	e7f1      	b.n	8006558 <_scanf_float+0x2fc>
 8006574:	46aa      	mov	sl, r5
 8006576:	9602      	str	r6, [sp, #8]
 8006578:	e7df      	b.n	800653a <_scanf_float+0x2de>
 800657a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	2965      	cmp	r1, #101	; 0x65
 8006582:	f103 33ff 	add.w	r3, r3, #4294967295
 8006586:	f106 35ff 	add.w	r5, r6, #4294967295
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	d00c      	beq.n	80065a8 <_scanf_float+0x34c>
 800658e:	2945      	cmp	r1, #69	; 0x45
 8006590:	d00a      	beq.n	80065a8 <_scanf_float+0x34c>
 8006592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006596:	463a      	mov	r2, r7
 8006598:	4640      	mov	r0, r8
 800659a:	4798      	blx	r3
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	1eb5      	subs	r5, r6, #2
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065ac:	463a      	mov	r2, r7
 80065ae:	4640      	mov	r0, r8
 80065b0:	4798      	blx	r3
 80065b2:	462e      	mov	r6, r5
 80065b4:	6825      	ldr	r5, [r4, #0]
 80065b6:	f015 0510 	ands.w	r5, r5, #16
 80065ba:	d158      	bne.n	800666e <_scanf_float+0x412>
 80065bc:	7035      	strb	r5, [r6, #0]
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c8:	d11c      	bne.n	8006604 <_scanf_float+0x3a8>
 80065ca:	9b01      	ldr	r3, [sp, #4]
 80065cc:	454b      	cmp	r3, r9
 80065ce:	eba3 0209 	sub.w	r2, r3, r9
 80065d2:	d124      	bne.n	800661e <_scanf_float+0x3c2>
 80065d4:	2200      	movs	r2, #0
 80065d6:	4659      	mov	r1, fp
 80065d8:	4640      	mov	r0, r8
 80065da:	f000 ff2b 	bl	8007434 <_strtod_r>
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	6821      	ldr	r1, [r4, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f011 0f02 	tst.w	r1, #2
 80065e8:	ec57 6b10 	vmov	r6, r7, d0
 80065ec:	f103 0204 	add.w	r2, r3, #4
 80065f0:	d020      	beq.n	8006634 <_scanf_float+0x3d8>
 80065f2:	9903      	ldr	r1, [sp, #12]
 80065f4:	600a      	str	r2, [r1, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	e9c3 6700 	strd	r6, r7, [r3]
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60e3      	str	r3, [r4, #12]
 8006602:	e66c      	b.n	80062de <_scanf_float+0x82>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0e4      	beq.n	80065d4 <_scanf_float+0x378>
 800660a:	9905      	ldr	r1, [sp, #20]
 800660c:	230a      	movs	r3, #10
 800660e:	462a      	mov	r2, r5
 8006610:	3101      	adds	r1, #1
 8006612:	4640      	mov	r0, r8
 8006614:	f000 ff98 	bl	8007548 <_strtol_r>
 8006618:	9b04      	ldr	r3, [sp, #16]
 800661a:	9e05      	ldr	r6, [sp, #20]
 800661c:	1ac2      	subs	r2, r0, r3
 800661e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006622:	429e      	cmp	r6, r3
 8006624:	bf28      	it	cs
 8006626:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800662a:	4912      	ldr	r1, [pc, #72]	; (8006674 <_scanf_float+0x418>)
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f8b9 	bl	80067a4 <siprintf>
 8006632:	e7cf      	b.n	80065d4 <_scanf_float+0x378>
 8006634:	f011 0f04 	tst.w	r1, #4
 8006638:	9903      	ldr	r1, [sp, #12]
 800663a:	600a      	str	r2, [r1, #0]
 800663c:	d1db      	bne.n	80065f6 <_scanf_float+0x39a>
 800663e:	f8d3 8000 	ldr.w	r8, [r3]
 8006642:	ee10 2a10 	vmov	r2, s0
 8006646:	ee10 0a10 	vmov	r0, s0
 800664a:	463b      	mov	r3, r7
 800664c:	4639      	mov	r1, r7
 800664e:	f7fa fa75 	bl	8000b3c <__aeabi_dcmpun>
 8006652:	b128      	cbz	r0, 8006660 <_scanf_float+0x404>
 8006654:	4808      	ldr	r0, [pc, #32]	; (8006678 <_scanf_float+0x41c>)
 8006656:	f000 f89f 	bl	8006798 <nanf>
 800665a:	ed88 0a00 	vstr	s0, [r8]
 800665e:	e7cd      	b.n	80065fc <_scanf_float+0x3a0>
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7fa fac8 	bl	8000bf8 <__aeabi_d2f>
 8006668:	f8c8 0000 	str.w	r0, [r8]
 800666c:	e7c6      	b.n	80065fc <_scanf_float+0x3a0>
 800666e:	2500      	movs	r5, #0
 8006670:	e635      	b.n	80062de <_scanf_float+0x82>
 8006672:	bf00      	nop
 8006674:	0800aec0 	.word	0x0800aec0
 8006678:	0800b338 	.word	0x0800b338

0800667c <iprintf>:
 800667c:	b40f      	push	{r0, r1, r2, r3}
 800667e:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <iprintf+0x2c>)
 8006680:	b513      	push	{r0, r1, r4, lr}
 8006682:	681c      	ldr	r4, [r3, #0]
 8006684:	b124      	cbz	r4, 8006690 <iprintf+0x14>
 8006686:	69a3      	ldr	r3, [r4, #24]
 8006688:	b913      	cbnz	r3, 8006690 <iprintf+0x14>
 800668a:	4620      	mov	r0, r4
 800668c:	f001 ffba 	bl	8008604 <__sinit>
 8006690:	ab05      	add	r3, sp, #20
 8006692:	9a04      	ldr	r2, [sp, #16]
 8006694:	68a1      	ldr	r1, [r4, #8]
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	4620      	mov	r0, r4
 800669a:	f003 fb4d 	bl	8009d38 <_vfiprintf_r>
 800669e:	b002      	add	sp, #8
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	b004      	add	sp, #16
 80066a6:	4770      	bx	lr
 80066a8:	20000030 	.word	0x20000030

080066ac <_puts_r>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	460e      	mov	r6, r1
 80066b0:	4605      	mov	r5, r0
 80066b2:	b118      	cbz	r0, 80066bc <_puts_r+0x10>
 80066b4:	6983      	ldr	r3, [r0, #24]
 80066b6:	b90b      	cbnz	r3, 80066bc <_puts_r+0x10>
 80066b8:	f001 ffa4 	bl	8008604 <__sinit>
 80066bc:	69ab      	ldr	r3, [r5, #24]
 80066be:	68ac      	ldr	r4, [r5, #8]
 80066c0:	b913      	cbnz	r3, 80066c8 <_puts_r+0x1c>
 80066c2:	4628      	mov	r0, r5
 80066c4:	f001 ff9e 	bl	8008604 <__sinit>
 80066c8:	4b2c      	ldr	r3, [pc, #176]	; (800677c <_puts_r+0xd0>)
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d120      	bne.n	8006710 <_puts_r+0x64>
 80066ce:	686c      	ldr	r4, [r5, #4]
 80066d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d2:	07db      	lsls	r3, r3, #31
 80066d4:	d405      	bmi.n	80066e2 <_puts_r+0x36>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	0598      	lsls	r0, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_puts_r+0x36>
 80066dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066de:	f002 fba2 	bl	8008e26 <__retarget_lock_acquire_recursive>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	0719      	lsls	r1, r3, #28
 80066e6:	d51d      	bpl.n	8006724 <_puts_r+0x78>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	b1db      	cbz	r3, 8006724 <_puts_r+0x78>
 80066ec:	3e01      	subs	r6, #1
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066f4:	3b01      	subs	r3, #1
 80066f6:	60a3      	str	r3, [r4, #8]
 80066f8:	bb39      	cbnz	r1, 800674a <_puts_r+0x9e>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da38      	bge.n	8006770 <_puts_r+0xc4>
 80066fe:	4622      	mov	r2, r4
 8006700:	210a      	movs	r1, #10
 8006702:	4628      	mov	r0, r5
 8006704:	f000 ff2c 	bl	8007560 <__swbuf_r>
 8006708:	3001      	adds	r0, #1
 800670a:	d011      	beq.n	8006730 <_puts_r+0x84>
 800670c:	250a      	movs	r5, #10
 800670e:	e011      	b.n	8006734 <_puts_r+0x88>
 8006710:	4b1b      	ldr	r3, [pc, #108]	; (8006780 <_puts_r+0xd4>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <_puts_r+0x6e>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7da      	b.n	80066d0 <_puts_r+0x24>
 800671a:	4b1a      	ldr	r3, [pc, #104]	; (8006784 <_puts_r+0xd8>)
 800671c:	429c      	cmp	r4, r3
 800671e:	bf08      	it	eq
 8006720:	68ec      	ldreq	r4, [r5, #12]
 8006722:	e7d5      	b.n	80066d0 <_puts_r+0x24>
 8006724:	4621      	mov	r1, r4
 8006726:	4628      	mov	r0, r5
 8006728:	f000 ff6c 	bl	8007604 <__swsetup_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	d0dd      	beq.n	80066ec <_puts_r+0x40>
 8006730:	f04f 35ff 	mov.w	r5, #4294967295
 8006734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006736:	07da      	lsls	r2, r3, #31
 8006738:	d405      	bmi.n	8006746 <_puts_r+0x9a>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	059b      	lsls	r3, r3, #22
 800673e:	d402      	bmi.n	8006746 <_puts_r+0x9a>
 8006740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006742:	f002 fb71 	bl	8008e28 <__retarget_lock_release_recursive>
 8006746:	4628      	mov	r0, r5
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	2b00      	cmp	r3, #0
 800674c:	da04      	bge.n	8006758 <_puts_r+0xac>
 800674e:	69a2      	ldr	r2, [r4, #24]
 8006750:	429a      	cmp	r2, r3
 8006752:	dc06      	bgt.n	8006762 <_puts_r+0xb6>
 8006754:	290a      	cmp	r1, #10
 8006756:	d004      	beq.n	8006762 <_puts_r+0xb6>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	7019      	strb	r1, [r3, #0]
 8006760:	e7c5      	b.n	80066ee <_puts_r+0x42>
 8006762:	4622      	mov	r2, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fefb 	bl	8007560 <__swbuf_r>
 800676a:	3001      	adds	r0, #1
 800676c:	d1bf      	bne.n	80066ee <_puts_r+0x42>
 800676e:	e7df      	b.n	8006730 <_puts_r+0x84>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	250a      	movs	r5, #10
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	701d      	strb	r5, [r3, #0]
 800677a:	e7db      	b.n	8006734 <_puts_r+0x88>
 800677c:	0800b0d0 	.word	0x0800b0d0
 8006780:	0800b0f0 	.word	0x0800b0f0
 8006784:	0800b0b0 	.word	0x0800b0b0

08006788 <puts>:
 8006788:	4b02      	ldr	r3, [pc, #8]	; (8006794 <puts+0xc>)
 800678a:	4601      	mov	r1, r0
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	f7ff bf8d 	b.w	80066ac <_puts_r>
 8006792:	bf00      	nop
 8006794:	20000030 	.word	0x20000030

08006798 <nanf>:
 8006798:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80067a0 <nanf+0x8>
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	7fc00000 	.word	0x7fc00000

080067a4 <siprintf>:
 80067a4:	b40e      	push	{r1, r2, r3}
 80067a6:	b500      	push	{lr}
 80067a8:	b09c      	sub	sp, #112	; 0x70
 80067aa:	ab1d      	add	r3, sp, #116	; 0x74
 80067ac:	9002      	str	r0, [sp, #8]
 80067ae:	9006      	str	r0, [sp, #24]
 80067b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067b4:	4809      	ldr	r0, [pc, #36]	; (80067dc <siprintf+0x38>)
 80067b6:	9107      	str	r1, [sp, #28]
 80067b8:	9104      	str	r1, [sp, #16]
 80067ba:	4909      	ldr	r1, [pc, #36]	; (80067e0 <siprintf+0x3c>)
 80067bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c0:	9105      	str	r1, [sp, #20]
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	a902      	add	r1, sp, #8
 80067c8:	f003 f98c 	bl	8009ae4 <_svfiprintf_r>
 80067cc:	9b02      	ldr	r3, [sp, #8]
 80067ce:	2200      	movs	r2, #0
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	b01c      	add	sp, #112	; 0x70
 80067d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d8:	b003      	add	sp, #12
 80067da:	4770      	bx	lr
 80067dc:	20000030 	.word	0x20000030
 80067e0:	ffff0208 	.word	0xffff0208

080067e4 <sulp>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	ec45 4b10 	vmov	d0, r4, r5
 80067ee:	4616      	mov	r6, r2
 80067f0:	f002 ff14 	bl	800961c <__ulp>
 80067f4:	ec51 0b10 	vmov	r0, r1, d0
 80067f8:	b17e      	cbz	r6, 800681a <sulp+0x36>
 80067fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006802:	2b00      	cmp	r3, #0
 8006804:	dd09      	ble.n	800681a <sulp+0x36>
 8006806:	051b      	lsls	r3, r3, #20
 8006808:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800680c:	2400      	movs	r4, #0
 800680e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006812:	4622      	mov	r2, r4
 8006814:	462b      	mov	r3, r5
 8006816:	f7f9 fef7 	bl	8000608 <__aeabi_dmul>
 800681a:	bd70      	pop	{r4, r5, r6, pc}
 800681c:	0000      	movs	r0, r0
	...

08006820 <_strtod_l>:
 8006820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006824:	b0a3      	sub	sp, #140	; 0x8c
 8006826:	461f      	mov	r7, r3
 8006828:	2300      	movs	r3, #0
 800682a:	931e      	str	r3, [sp, #120]	; 0x78
 800682c:	4ba4      	ldr	r3, [pc, #656]	; (8006ac0 <_strtod_l+0x2a0>)
 800682e:	9219      	str	r2, [sp, #100]	; 0x64
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	4604      	mov	r4, r0
 8006836:	4618      	mov	r0, r3
 8006838:	4688      	mov	r8, r1
 800683a:	f7f9 fcd1 	bl	80001e0 <strlen>
 800683e:	f04f 0a00 	mov.w	sl, #0
 8006842:	4605      	mov	r5, r0
 8006844:	f04f 0b00 	mov.w	fp, #0
 8006848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800684c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	2a2b      	cmp	r2, #43	; 0x2b
 8006852:	d04c      	beq.n	80068ee <_strtod_l+0xce>
 8006854:	d839      	bhi.n	80068ca <_strtod_l+0xaa>
 8006856:	2a0d      	cmp	r2, #13
 8006858:	d832      	bhi.n	80068c0 <_strtod_l+0xa0>
 800685a:	2a08      	cmp	r2, #8
 800685c:	d832      	bhi.n	80068c4 <_strtod_l+0xa4>
 800685e:	2a00      	cmp	r2, #0
 8006860:	d03c      	beq.n	80068dc <_strtod_l+0xbc>
 8006862:	2300      	movs	r3, #0
 8006864:	930e      	str	r3, [sp, #56]	; 0x38
 8006866:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006868:	7833      	ldrb	r3, [r6, #0]
 800686a:	2b30      	cmp	r3, #48	; 0x30
 800686c:	f040 80b4 	bne.w	80069d8 <_strtod_l+0x1b8>
 8006870:	7873      	ldrb	r3, [r6, #1]
 8006872:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006876:	2b58      	cmp	r3, #88	; 0x58
 8006878:	d16c      	bne.n	8006954 <_strtod_l+0x134>
 800687a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687c:	9301      	str	r3, [sp, #4]
 800687e:	ab1e      	add	r3, sp, #120	; 0x78
 8006880:	9702      	str	r7, [sp, #8]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4a8f      	ldr	r2, [pc, #572]	; (8006ac4 <_strtod_l+0x2a4>)
 8006886:	ab1f      	add	r3, sp, #124	; 0x7c
 8006888:	a91d      	add	r1, sp, #116	; 0x74
 800688a:	4620      	mov	r0, r4
 800688c:	f001 ffbe 	bl	800880c <__gethex>
 8006890:	f010 0707 	ands.w	r7, r0, #7
 8006894:	4605      	mov	r5, r0
 8006896:	d005      	beq.n	80068a4 <_strtod_l+0x84>
 8006898:	2f06      	cmp	r7, #6
 800689a:	d12a      	bne.n	80068f2 <_strtod_l+0xd2>
 800689c:	3601      	adds	r6, #1
 800689e:	2300      	movs	r3, #0
 80068a0:	961d      	str	r6, [sp, #116]	; 0x74
 80068a2:	930e      	str	r3, [sp, #56]	; 0x38
 80068a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f040 8596 	bne.w	80073d8 <_strtod_l+0xbb8>
 80068ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ae:	b1db      	cbz	r3, 80068e8 <_strtod_l+0xc8>
 80068b0:	4652      	mov	r2, sl
 80068b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068b6:	ec43 2b10 	vmov	d0, r2, r3
 80068ba:	b023      	add	sp, #140	; 0x8c
 80068bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c0:	2a20      	cmp	r2, #32
 80068c2:	d1ce      	bne.n	8006862 <_strtod_l+0x42>
 80068c4:	3301      	adds	r3, #1
 80068c6:	931d      	str	r3, [sp, #116]	; 0x74
 80068c8:	e7c0      	b.n	800684c <_strtod_l+0x2c>
 80068ca:	2a2d      	cmp	r2, #45	; 0x2d
 80068cc:	d1c9      	bne.n	8006862 <_strtod_l+0x42>
 80068ce:	2201      	movs	r2, #1
 80068d0:	920e      	str	r2, [sp, #56]	; 0x38
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	921d      	str	r2, [sp, #116]	; 0x74
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1c4      	bne.n	8006866 <_strtod_l+0x46>
 80068dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f040 8576 	bne.w	80073d4 <_strtod_l+0xbb4>
 80068e8:	4652      	mov	r2, sl
 80068ea:	465b      	mov	r3, fp
 80068ec:	e7e3      	b.n	80068b6 <_strtod_l+0x96>
 80068ee:	2200      	movs	r2, #0
 80068f0:	e7ee      	b.n	80068d0 <_strtod_l+0xb0>
 80068f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068f4:	b13a      	cbz	r2, 8006906 <_strtod_l+0xe6>
 80068f6:	2135      	movs	r1, #53	; 0x35
 80068f8:	a820      	add	r0, sp, #128	; 0x80
 80068fa:	f002 ff9a 	bl	8009832 <__copybits>
 80068fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006900:	4620      	mov	r0, r4
 8006902:	f002 fb5f 	bl	8008fc4 <_Bfree>
 8006906:	3f01      	subs	r7, #1
 8006908:	2f05      	cmp	r7, #5
 800690a:	d807      	bhi.n	800691c <_strtod_l+0xfc>
 800690c:	e8df f007 	tbb	[pc, r7]
 8006910:	1d180b0e 	.word	0x1d180b0e
 8006914:	030e      	.short	0x030e
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	46da      	mov	sl, fp
 800691c:	0728      	lsls	r0, r5, #28
 800691e:	d5c1      	bpl.n	80068a4 <_strtod_l+0x84>
 8006920:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006924:	e7be      	b.n	80068a4 <_strtod_l+0x84>
 8006926:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800692a:	e7f7      	b.n	800691c <_strtod_l+0xfc>
 800692c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006930:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006932:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006936:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800693a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800693e:	e7ed      	b.n	800691c <_strtod_l+0xfc>
 8006940:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006ac8 <_strtod_l+0x2a8>
 8006944:	f04f 0a00 	mov.w	sl, #0
 8006948:	e7e8      	b.n	800691c <_strtod_l+0xfc>
 800694a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800694e:	f04f 3aff 	mov.w	sl, #4294967295
 8006952:	e7e3      	b.n	800691c <_strtod_l+0xfc>
 8006954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	921d      	str	r2, [sp, #116]	; 0x74
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b30      	cmp	r3, #48	; 0x30
 800695e:	d0f9      	beq.n	8006954 <_strtod_l+0x134>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d09f      	beq.n	80068a4 <_strtod_l+0x84>
 8006964:	2301      	movs	r3, #1
 8006966:	f04f 0900 	mov.w	r9, #0
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800696e:	930a      	str	r3, [sp, #40]	; 0x28
 8006970:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006974:	464f      	mov	r7, r9
 8006976:	220a      	movs	r2, #10
 8006978:	981d      	ldr	r0, [sp, #116]	; 0x74
 800697a:	7806      	ldrb	r6, [r0, #0]
 800697c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006980:	b2d9      	uxtb	r1, r3
 8006982:	2909      	cmp	r1, #9
 8006984:	d92a      	bls.n	80069dc <_strtod_l+0x1bc>
 8006986:	9907      	ldr	r1, [sp, #28]
 8006988:	462a      	mov	r2, r5
 800698a:	f003 fb60 	bl	800a04e <strncmp>
 800698e:	b398      	cbz	r0, 80069f8 <_strtod_l+0x1d8>
 8006990:	2000      	movs	r0, #0
 8006992:	4633      	mov	r3, r6
 8006994:	463d      	mov	r5, r7
 8006996:	9007      	str	r0, [sp, #28]
 8006998:	4602      	mov	r2, r0
 800699a:	2b65      	cmp	r3, #101	; 0x65
 800699c:	d001      	beq.n	80069a2 <_strtod_l+0x182>
 800699e:	2b45      	cmp	r3, #69	; 0x45
 80069a0:	d118      	bne.n	80069d4 <_strtod_l+0x1b4>
 80069a2:	b91d      	cbnz	r5, 80069ac <_strtod_l+0x18c>
 80069a4:	9b04      	ldr	r3, [sp, #16]
 80069a6:	4303      	orrs	r3, r0
 80069a8:	d098      	beq.n	80068dc <_strtod_l+0xbc>
 80069aa:	2500      	movs	r5, #0
 80069ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80069b0:	f108 0301 	add.w	r3, r8, #1
 80069b4:	931d      	str	r3, [sp, #116]	; 0x74
 80069b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80069ba:	2b2b      	cmp	r3, #43	; 0x2b
 80069bc:	d075      	beq.n	8006aaa <_strtod_l+0x28a>
 80069be:	2b2d      	cmp	r3, #45	; 0x2d
 80069c0:	d07b      	beq.n	8006aba <_strtod_l+0x29a>
 80069c2:	f04f 0c00 	mov.w	ip, #0
 80069c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80069ca:	2909      	cmp	r1, #9
 80069cc:	f240 8082 	bls.w	8006ad4 <_strtod_l+0x2b4>
 80069d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80069d4:	2600      	movs	r6, #0
 80069d6:	e09d      	b.n	8006b14 <_strtod_l+0x2f4>
 80069d8:	2300      	movs	r3, #0
 80069da:	e7c4      	b.n	8006966 <_strtod_l+0x146>
 80069dc:	2f08      	cmp	r7, #8
 80069de:	bfd8      	it	le
 80069e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80069e2:	f100 0001 	add.w	r0, r0, #1
 80069e6:	bfda      	itte	le
 80069e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80069ec:	9309      	strle	r3, [sp, #36]	; 0x24
 80069ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 80069f2:	3701      	adds	r7, #1
 80069f4:	901d      	str	r0, [sp, #116]	; 0x74
 80069f6:	e7bf      	b.n	8006978 <_strtod_l+0x158>
 80069f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069fa:	195a      	adds	r2, r3, r5
 80069fc:	921d      	str	r2, [sp, #116]	; 0x74
 80069fe:	5d5b      	ldrb	r3, [r3, r5]
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	d037      	beq.n	8006a74 <_strtod_l+0x254>
 8006a04:	9007      	str	r0, [sp, #28]
 8006a06:	463d      	mov	r5, r7
 8006a08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a0c:	2a09      	cmp	r2, #9
 8006a0e:	d912      	bls.n	8006a36 <_strtod_l+0x216>
 8006a10:	2201      	movs	r2, #1
 8006a12:	e7c2      	b.n	800699a <_strtod_l+0x17a>
 8006a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	921d      	str	r2, [sp, #116]	; 0x74
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	d0f8      	beq.n	8006a14 <_strtod_l+0x1f4>
 8006a22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006a26:	2a08      	cmp	r2, #8
 8006a28:	f200 84db 	bhi.w	80073e2 <_strtod_l+0xbc2>
 8006a2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a2e:	9007      	str	r0, [sp, #28]
 8006a30:	2000      	movs	r0, #0
 8006a32:	920a      	str	r2, [sp, #40]	; 0x28
 8006a34:	4605      	mov	r5, r0
 8006a36:	3b30      	subs	r3, #48	; 0x30
 8006a38:	f100 0201 	add.w	r2, r0, #1
 8006a3c:	d014      	beq.n	8006a68 <_strtod_l+0x248>
 8006a3e:	9907      	ldr	r1, [sp, #28]
 8006a40:	4411      	add	r1, r2
 8006a42:	9107      	str	r1, [sp, #28]
 8006a44:	462a      	mov	r2, r5
 8006a46:	eb00 0e05 	add.w	lr, r0, r5
 8006a4a:	210a      	movs	r1, #10
 8006a4c:	4572      	cmp	r2, lr
 8006a4e:	d113      	bne.n	8006a78 <_strtod_l+0x258>
 8006a50:	182a      	adds	r2, r5, r0
 8006a52:	2a08      	cmp	r2, #8
 8006a54:	f105 0501 	add.w	r5, r5, #1
 8006a58:	4405      	add	r5, r0
 8006a5a:	dc1c      	bgt.n	8006a96 <_strtod_l+0x276>
 8006a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5e:	220a      	movs	r2, #10
 8006a60:	fb02 3301 	mla	r3, r2, r1, r3
 8006a64:	9309      	str	r3, [sp, #36]	; 0x24
 8006a66:	2200      	movs	r2, #0
 8006a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a6a:	1c59      	adds	r1, r3, #1
 8006a6c:	911d      	str	r1, [sp, #116]	; 0x74
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	4610      	mov	r0, r2
 8006a72:	e7c9      	b.n	8006a08 <_strtod_l+0x1e8>
 8006a74:	4638      	mov	r0, r7
 8006a76:	e7d2      	b.n	8006a1e <_strtod_l+0x1fe>
 8006a78:	2a08      	cmp	r2, #8
 8006a7a:	dc04      	bgt.n	8006a86 <_strtod_l+0x266>
 8006a7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006a7e:	434e      	muls	r6, r1
 8006a80:	9609      	str	r6, [sp, #36]	; 0x24
 8006a82:	3201      	adds	r2, #1
 8006a84:	e7e2      	b.n	8006a4c <_strtod_l+0x22c>
 8006a86:	f102 0c01 	add.w	ip, r2, #1
 8006a8a:	f1bc 0f10 	cmp.w	ip, #16
 8006a8e:	bfd8      	it	le
 8006a90:	fb01 f909 	mulle.w	r9, r1, r9
 8006a94:	e7f5      	b.n	8006a82 <_strtod_l+0x262>
 8006a96:	2d10      	cmp	r5, #16
 8006a98:	bfdc      	itt	le
 8006a9a:	220a      	movle	r2, #10
 8006a9c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006aa0:	e7e1      	b.n	8006a66 <_strtod_l+0x246>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9307      	str	r3, [sp, #28]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	e77c      	b.n	80069a4 <_strtod_l+0x184>
 8006aaa:	f04f 0c00 	mov.w	ip, #0
 8006aae:	f108 0302 	add.w	r3, r8, #2
 8006ab2:	931d      	str	r3, [sp, #116]	; 0x74
 8006ab4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ab8:	e785      	b.n	80069c6 <_strtod_l+0x1a6>
 8006aba:	f04f 0c01 	mov.w	ip, #1
 8006abe:	e7f6      	b.n	8006aae <_strtod_l+0x28e>
 8006ac0:	0800b17c 	.word	0x0800b17c
 8006ac4:	0800aec8 	.word	0x0800aec8
 8006ac8:	7ff00000 	.word	0x7ff00000
 8006acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ace:	1c59      	adds	r1, r3, #1
 8006ad0:	911d      	str	r1, [sp, #116]	; 0x74
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b30      	cmp	r3, #48	; 0x30
 8006ad6:	d0f9      	beq.n	8006acc <_strtod_l+0x2ac>
 8006ad8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006adc:	2908      	cmp	r1, #8
 8006ade:	f63f af79 	bhi.w	80069d4 <_strtod_l+0x1b4>
 8006ae2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006ae6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ae8:	9308      	str	r3, [sp, #32]
 8006aea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	911d      	str	r1, [sp, #116]	; 0x74
 8006af0:	785b      	ldrb	r3, [r3, #1]
 8006af2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006af6:	2e09      	cmp	r6, #9
 8006af8:	d937      	bls.n	8006b6a <_strtod_l+0x34a>
 8006afa:	9e08      	ldr	r6, [sp, #32]
 8006afc:	1b89      	subs	r1, r1, r6
 8006afe:	2908      	cmp	r1, #8
 8006b00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006b04:	dc02      	bgt.n	8006b0c <_strtod_l+0x2ec>
 8006b06:	4576      	cmp	r6, lr
 8006b08:	bfa8      	it	ge
 8006b0a:	4676      	movge	r6, lr
 8006b0c:	f1bc 0f00 	cmp.w	ip, #0
 8006b10:	d000      	beq.n	8006b14 <_strtod_l+0x2f4>
 8006b12:	4276      	negs	r6, r6
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	d14f      	bne.n	8006bb8 <_strtod_l+0x398>
 8006b18:	9904      	ldr	r1, [sp, #16]
 8006b1a:	4301      	orrs	r1, r0
 8006b1c:	f47f aec2 	bne.w	80068a4 <_strtod_l+0x84>
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	f47f aedb 	bne.w	80068dc <_strtod_l+0xbc>
 8006b26:	2b69      	cmp	r3, #105	; 0x69
 8006b28:	d027      	beq.n	8006b7a <_strtod_l+0x35a>
 8006b2a:	dc24      	bgt.n	8006b76 <_strtod_l+0x356>
 8006b2c:	2b49      	cmp	r3, #73	; 0x49
 8006b2e:	d024      	beq.n	8006b7a <_strtod_l+0x35a>
 8006b30:	2b4e      	cmp	r3, #78	; 0x4e
 8006b32:	f47f aed3 	bne.w	80068dc <_strtod_l+0xbc>
 8006b36:	499e      	ldr	r1, [pc, #632]	; (8006db0 <_strtod_l+0x590>)
 8006b38:	a81d      	add	r0, sp, #116	; 0x74
 8006b3a:	f002 f8bf 	bl	8008cbc <__match>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f aecc 	beq.w	80068dc <_strtod_l+0xbc>
 8006b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b28      	cmp	r3, #40	; 0x28
 8006b4a:	d12d      	bne.n	8006ba8 <_strtod_l+0x388>
 8006b4c:	4999      	ldr	r1, [pc, #612]	; (8006db4 <_strtod_l+0x594>)
 8006b4e:	aa20      	add	r2, sp, #128	; 0x80
 8006b50:	a81d      	add	r0, sp, #116	; 0x74
 8006b52:	f002 f8c7 	bl	8008ce4 <__hexnan>
 8006b56:	2805      	cmp	r0, #5
 8006b58:	d126      	bne.n	8006ba8 <_strtod_l+0x388>
 8006b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006b60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b68:	e69c      	b.n	80068a4 <_strtod_l+0x84>
 8006b6a:	210a      	movs	r1, #10
 8006b6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006b70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006b74:	e7b9      	b.n	8006aea <_strtod_l+0x2ca>
 8006b76:	2b6e      	cmp	r3, #110	; 0x6e
 8006b78:	e7db      	b.n	8006b32 <_strtod_l+0x312>
 8006b7a:	498f      	ldr	r1, [pc, #572]	; (8006db8 <_strtod_l+0x598>)
 8006b7c:	a81d      	add	r0, sp, #116	; 0x74
 8006b7e:	f002 f89d 	bl	8008cbc <__match>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f43f aeaa 	beq.w	80068dc <_strtod_l+0xbc>
 8006b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b8a:	498c      	ldr	r1, [pc, #560]	; (8006dbc <_strtod_l+0x59c>)
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	a81d      	add	r0, sp, #116	; 0x74
 8006b90:	931d      	str	r3, [sp, #116]	; 0x74
 8006b92:	f002 f893 	bl	8008cbc <__match>
 8006b96:	b910      	cbnz	r0, 8006b9e <_strtod_l+0x37e>
 8006b98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	931d      	str	r3, [sp, #116]	; 0x74
 8006b9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006dcc <_strtod_l+0x5ac>
 8006ba2:	f04f 0a00 	mov.w	sl, #0
 8006ba6:	e67d      	b.n	80068a4 <_strtod_l+0x84>
 8006ba8:	4885      	ldr	r0, [pc, #532]	; (8006dc0 <_strtod_l+0x5a0>)
 8006baa:	f003 f9f5 	bl	8009f98 <nan>
 8006bae:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006bb2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006bb6:	e675      	b.n	80068a4 <_strtod_l+0x84>
 8006bb8:	9b07      	ldr	r3, [sp, #28]
 8006bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bbc:	1af3      	subs	r3, r6, r3
 8006bbe:	2f00      	cmp	r7, #0
 8006bc0:	bf08      	it	eq
 8006bc2:	462f      	moveq	r7, r5
 8006bc4:	2d10      	cmp	r5, #16
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	46a8      	mov	r8, r5
 8006bca:	bfa8      	it	ge
 8006bcc:	f04f 0810 	movge.w	r8, #16
 8006bd0:	f7f9 fca0 	bl	8000514 <__aeabi_ui2d>
 8006bd4:	2d09      	cmp	r5, #9
 8006bd6:	4682      	mov	sl, r0
 8006bd8:	468b      	mov	fp, r1
 8006bda:	dd13      	ble.n	8006c04 <_strtod_l+0x3e4>
 8006bdc:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <_strtod_l+0x5a4>)
 8006bde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006be2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006be6:	f7f9 fd0f 	bl	8000608 <__aeabi_dmul>
 8006bea:	4682      	mov	sl, r0
 8006bec:	4648      	mov	r0, r9
 8006bee:	468b      	mov	fp, r1
 8006bf0:	f7f9 fc90 	bl	8000514 <__aeabi_ui2d>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	4659      	mov	r1, fp
 8006bfc:	f7f9 fb4e 	bl	800029c <__adddf3>
 8006c00:	4682      	mov	sl, r0
 8006c02:	468b      	mov	fp, r1
 8006c04:	2d0f      	cmp	r5, #15
 8006c06:	dc38      	bgt.n	8006c7a <_strtod_l+0x45a>
 8006c08:	9b08      	ldr	r3, [sp, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f43f ae4a 	beq.w	80068a4 <_strtod_l+0x84>
 8006c10:	dd24      	ble.n	8006c5c <_strtod_l+0x43c>
 8006c12:	2b16      	cmp	r3, #22
 8006c14:	dc0b      	bgt.n	8006c2e <_strtod_l+0x40e>
 8006c16:	4d6b      	ldr	r5, [pc, #428]	; (8006dc4 <_strtod_l+0x5a4>)
 8006c18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006c1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006c20:	4652      	mov	r2, sl
 8006c22:	465b      	mov	r3, fp
 8006c24:	f7f9 fcf0 	bl	8000608 <__aeabi_dmul>
 8006c28:	4682      	mov	sl, r0
 8006c2a:	468b      	mov	fp, r1
 8006c2c:	e63a      	b.n	80068a4 <_strtod_l+0x84>
 8006c2e:	9a08      	ldr	r2, [sp, #32]
 8006c30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006c34:	4293      	cmp	r3, r2
 8006c36:	db20      	blt.n	8006c7a <_strtod_l+0x45a>
 8006c38:	4c62      	ldr	r4, [pc, #392]	; (8006dc4 <_strtod_l+0x5a4>)
 8006c3a:	f1c5 050f 	rsb	r5, r5, #15
 8006c3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c42:	4652      	mov	r2, sl
 8006c44:	465b      	mov	r3, fp
 8006c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4a:	f7f9 fcdd 	bl	8000608 <__aeabi_dmul>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	1b5d      	subs	r5, r3, r5
 8006c52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c5a:	e7e3      	b.n	8006c24 <_strtod_l+0x404>
 8006c5c:	9b08      	ldr	r3, [sp, #32]
 8006c5e:	3316      	adds	r3, #22
 8006c60:	db0b      	blt.n	8006c7a <_strtod_l+0x45a>
 8006c62:	9b07      	ldr	r3, [sp, #28]
 8006c64:	4a57      	ldr	r2, [pc, #348]	; (8006dc4 <_strtod_l+0x5a4>)
 8006c66:	1b9e      	subs	r6, r3, r6
 8006c68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006c6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c70:	4650      	mov	r0, sl
 8006c72:	4659      	mov	r1, fp
 8006c74:	f7f9 fdf2 	bl	800085c <__aeabi_ddiv>
 8006c78:	e7d6      	b.n	8006c28 <_strtod_l+0x408>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	eba5 0808 	sub.w	r8, r5, r8
 8006c80:	4498      	add	r8, r3
 8006c82:	f1b8 0f00 	cmp.w	r8, #0
 8006c86:	dd71      	ble.n	8006d6c <_strtod_l+0x54c>
 8006c88:	f018 030f 	ands.w	r3, r8, #15
 8006c8c:	d00a      	beq.n	8006ca4 <_strtod_l+0x484>
 8006c8e:	494d      	ldr	r1, [pc, #308]	; (8006dc4 <_strtod_l+0x5a4>)
 8006c90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c94:	4652      	mov	r2, sl
 8006c96:	465b      	mov	r3, fp
 8006c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c9c:	f7f9 fcb4 	bl	8000608 <__aeabi_dmul>
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	468b      	mov	fp, r1
 8006ca4:	f038 080f 	bics.w	r8, r8, #15
 8006ca8:	d04d      	beq.n	8006d46 <_strtod_l+0x526>
 8006caa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006cae:	dd22      	ble.n	8006cf6 <_strtod_l+0x4d6>
 8006cb0:	2500      	movs	r5, #0
 8006cb2:	462e      	mov	r6, r5
 8006cb4:	9509      	str	r5, [sp, #36]	; 0x24
 8006cb6:	9507      	str	r5, [sp, #28]
 8006cb8:	2322      	movs	r3, #34	; 0x22
 8006cba:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006dcc <_strtod_l+0x5ac>
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	f04f 0a00 	mov.w	sl, #0
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f43f adec 	beq.w	80068a4 <_strtod_l+0x84>
 8006ccc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f002 f978 	bl	8008fc4 <_Bfree>
 8006cd4:	9907      	ldr	r1, [sp, #28]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f002 f974 	bl	8008fc4 <_Bfree>
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f002 f970 	bl	8008fc4 <_Bfree>
 8006ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f002 f96c 	bl	8008fc4 <_Bfree>
 8006cec:	4629      	mov	r1, r5
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f002 f968 	bl	8008fc4 <_Bfree>
 8006cf4:	e5d6      	b.n	80068a4 <_strtod_l+0x84>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006cfc:	4650      	mov	r0, sl
 8006cfe:	4659      	mov	r1, fp
 8006d00:	4699      	mov	r9, r3
 8006d02:	f1b8 0f01 	cmp.w	r8, #1
 8006d06:	dc21      	bgt.n	8006d4c <_strtod_l+0x52c>
 8006d08:	b10b      	cbz	r3, 8006d0e <_strtod_l+0x4ee>
 8006d0a:	4682      	mov	sl, r0
 8006d0c:	468b      	mov	fp, r1
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	; (8006dc8 <_strtod_l+0x5a8>)
 8006d10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006d18:	4652      	mov	r2, sl
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006d20:	f7f9 fc72 	bl	8000608 <__aeabi_dmul>
 8006d24:	4b29      	ldr	r3, [pc, #164]	; (8006dcc <_strtod_l+0x5ac>)
 8006d26:	460a      	mov	r2, r1
 8006d28:	400b      	ands	r3, r1
 8006d2a:	4929      	ldr	r1, [pc, #164]	; (8006dd0 <_strtod_l+0x5b0>)
 8006d2c:	428b      	cmp	r3, r1
 8006d2e:	4682      	mov	sl, r0
 8006d30:	d8be      	bhi.n	8006cb0 <_strtod_l+0x490>
 8006d32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d36:	428b      	cmp	r3, r1
 8006d38:	bf86      	itte	hi
 8006d3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006dd4 <_strtod_l+0x5b4>
 8006d3e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006d46:	2300      	movs	r3, #0
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	e081      	b.n	8006e50 <_strtod_l+0x630>
 8006d4c:	f018 0f01 	tst.w	r8, #1
 8006d50:	d007      	beq.n	8006d62 <_strtod_l+0x542>
 8006d52:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <_strtod_l+0x5a8>)
 8006d54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	f7f9 fc54 	bl	8000608 <__aeabi_dmul>
 8006d60:	2301      	movs	r3, #1
 8006d62:	f109 0901 	add.w	r9, r9, #1
 8006d66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d6a:	e7ca      	b.n	8006d02 <_strtod_l+0x4e2>
 8006d6c:	d0eb      	beq.n	8006d46 <_strtod_l+0x526>
 8006d6e:	f1c8 0800 	rsb	r8, r8, #0
 8006d72:	f018 020f 	ands.w	r2, r8, #15
 8006d76:	d00a      	beq.n	8006d8e <_strtod_l+0x56e>
 8006d78:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <_strtod_l+0x5a4>)
 8006d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d7e:	4650      	mov	r0, sl
 8006d80:	4659      	mov	r1, fp
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	f7f9 fd69 	bl	800085c <__aeabi_ddiv>
 8006d8a:	4682      	mov	sl, r0
 8006d8c:	468b      	mov	fp, r1
 8006d8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d92:	d0d8      	beq.n	8006d46 <_strtod_l+0x526>
 8006d94:	f1b8 0f1f 	cmp.w	r8, #31
 8006d98:	dd1e      	ble.n	8006dd8 <_strtod_l+0x5b8>
 8006d9a:	2500      	movs	r5, #0
 8006d9c:	462e      	mov	r6, r5
 8006d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8006da0:	9507      	str	r5, [sp, #28]
 8006da2:	2322      	movs	r3, #34	; 0x22
 8006da4:	f04f 0a00 	mov.w	sl, #0
 8006da8:	f04f 0b00 	mov.w	fp, #0
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	e789      	b.n	8006cc4 <_strtod_l+0x4a4>
 8006db0:	0800ae99 	.word	0x0800ae99
 8006db4:	0800aedc 	.word	0x0800aedc
 8006db8:	0800ae91 	.word	0x0800ae91
 8006dbc:	0800b01c 	.word	0x0800b01c
 8006dc0:	0800b338 	.word	0x0800b338
 8006dc4:	0800b218 	.word	0x0800b218
 8006dc8:	0800b1f0 	.word	0x0800b1f0
 8006dcc:	7ff00000 	.word	0x7ff00000
 8006dd0:	7ca00000 	.word	0x7ca00000
 8006dd4:	7fefffff 	.word	0x7fefffff
 8006dd8:	f018 0310 	ands.w	r3, r8, #16
 8006ddc:	bf18      	it	ne
 8006dde:	236a      	movne	r3, #106	; 0x6a
 8006de0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007198 <_strtod_l+0x978>
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	4650      	mov	r0, sl
 8006de8:	4659      	mov	r1, fp
 8006dea:	2300      	movs	r3, #0
 8006dec:	f018 0f01 	tst.w	r8, #1
 8006df0:	d004      	beq.n	8006dfc <_strtod_l+0x5dc>
 8006df2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006df6:	f7f9 fc07 	bl	8000608 <__aeabi_dmul>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006e00:	f109 0908 	add.w	r9, r9, #8
 8006e04:	d1f2      	bne.n	8006dec <_strtod_l+0x5cc>
 8006e06:	b10b      	cbz	r3, 8006e0c <_strtod_l+0x5ec>
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	b1bb      	cbz	r3, 8006e40 <_strtod_l+0x620>
 8006e10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006e14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	4659      	mov	r1, fp
 8006e1c:	dd10      	ble.n	8006e40 <_strtod_l+0x620>
 8006e1e:	2b1f      	cmp	r3, #31
 8006e20:	f340 8128 	ble.w	8007074 <_strtod_l+0x854>
 8006e24:	2b34      	cmp	r3, #52	; 0x34
 8006e26:	bfde      	ittt	le
 8006e28:	3b20      	suble	r3, #32
 8006e2a:	f04f 32ff 	movle.w	r2, #4294967295
 8006e2e:	fa02 f303 	lslle.w	r3, r2, r3
 8006e32:	f04f 0a00 	mov.w	sl, #0
 8006e36:	bfcc      	ite	gt
 8006e38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006e3c:	ea03 0b01 	andle.w	fp, r3, r1
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	4650      	mov	r0, sl
 8006e46:	4659      	mov	r1, fp
 8006e48:	f7f9 fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1a4      	bne.n	8006d9a <_strtod_l+0x57a>
 8006e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e56:	462b      	mov	r3, r5
 8006e58:	463a      	mov	r2, r7
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f002 f91e 	bl	800909c <__s2b>
 8006e60:	9009      	str	r0, [sp, #36]	; 0x24
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f43f af24 	beq.w	8006cb0 <_strtod_l+0x490>
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	1b9e      	subs	r6, r3, r6
 8006e6c:	9b08      	ldr	r3, [sp, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfb4      	ite	lt
 8006e72:	4633      	movlt	r3, r6
 8006e74:	2300      	movge	r3, #0
 8006e76:	9310      	str	r3, [sp, #64]	; 0x40
 8006e78:	9b08      	ldr	r3, [sp, #32]
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e80:	9318      	str	r3, [sp, #96]	; 0x60
 8006e82:	462e      	mov	r6, r5
 8006e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e86:	4620      	mov	r0, r4
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	f002 f85b 	bl	8008f44 <_Balloc>
 8006e8e:	9007      	str	r0, [sp, #28]
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f43f af11 	beq.w	8006cb8 <_strtod_l+0x498>
 8006e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	3202      	adds	r2, #2
 8006e9c:	f103 010c 	add.w	r1, r3, #12
 8006ea0:	0092      	lsls	r2, r2, #2
 8006ea2:	300c      	adds	r0, #12
 8006ea4:	f002 f840 	bl	8008f28 <memcpy>
 8006ea8:	ec4b ab10 	vmov	d0, sl, fp
 8006eac:	aa20      	add	r2, sp, #128	; 0x80
 8006eae:	a91f      	add	r1, sp, #124	; 0x7c
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006eb6:	f002 fc2d 	bl	8009714 <__d2b>
 8006eba:	901e      	str	r0, [sp, #120]	; 0x78
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f43f aefb 	beq.w	8006cb8 <_strtod_l+0x498>
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f002 f983 	bl	80091d0 <__i2b>
 8006eca:	4606      	mov	r6, r0
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	f43f aef3 	beq.w	8006cb8 <_strtod_l+0x498>
 8006ed2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ed4:	9904      	ldr	r1, [sp, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfab      	itete	ge
 8006eda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006edc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006ede:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006ee0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006ee4:	bfac      	ite	ge
 8006ee6:	eb03 0902 	addge.w	r9, r3, r2
 8006eea:	1ad7      	sublt	r7, r2, r3
 8006eec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006eee:	eba3 0801 	sub.w	r8, r3, r1
 8006ef2:	4490      	add	r8, r2
 8006ef4:	4ba3      	ldr	r3, [pc, #652]	; (8007184 <_strtod_l+0x964>)
 8006ef6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006efa:	4598      	cmp	r8, r3
 8006efc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f00:	f280 80cc 	bge.w	800709c <_strtod_l+0x87c>
 8006f04:	eba3 0308 	sub.w	r3, r3, r8
 8006f08:	2b1f      	cmp	r3, #31
 8006f0a:	eba2 0203 	sub.w	r2, r2, r3
 8006f0e:	f04f 0101 	mov.w	r1, #1
 8006f12:	f300 80b6 	bgt.w	8007082 <_strtod_l+0x862>
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f20:	eb09 0802 	add.w	r8, r9, r2
 8006f24:	9b04      	ldr	r3, [sp, #16]
 8006f26:	45c1      	cmp	r9, r8
 8006f28:	4417      	add	r7, r2
 8006f2a:	441f      	add	r7, r3
 8006f2c:	464b      	mov	r3, r9
 8006f2e:	bfa8      	it	ge
 8006f30:	4643      	movge	r3, r8
 8006f32:	42bb      	cmp	r3, r7
 8006f34:	bfa8      	it	ge
 8006f36:	463b      	movge	r3, r7
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfc2      	ittt	gt
 8006f3c:	eba8 0803 	subgt.w	r8, r8, r3
 8006f40:	1aff      	subgt	r7, r7, r3
 8006f42:	eba9 0903 	subgt.w	r9, r9, r3
 8006f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd17      	ble.n	8006f7c <_strtod_l+0x75c>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4620      	mov	r0, r4
 8006f52:	f002 f9f9 	bl	8009348 <__pow5mult>
 8006f56:	4606      	mov	r6, r0
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f43f aead 	beq.w	8006cb8 <_strtod_l+0x498>
 8006f5e:	4601      	mov	r1, r0
 8006f60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f62:	4620      	mov	r0, r4
 8006f64:	f002 f94a 	bl	80091fc <__multiply>
 8006f68:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	f43f aea4 	beq.w	8006cb8 <_strtod_l+0x498>
 8006f70:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f72:	4620      	mov	r0, r4
 8006f74:	f002 f826 	bl	8008fc4 <_Bfree>
 8006f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f7a:	931e      	str	r3, [sp, #120]	; 0x78
 8006f7c:	f1b8 0f00 	cmp.w	r8, #0
 8006f80:	f300 8091 	bgt.w	80070a6 <_strtod_l+0x886>
 8006f84:	9b08      	ldr	r3, [sp, #32]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	dd08      	ble.n	8006f9c <_strtod_l+0x77c>
 8006f8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f8c:	9907      	ldr	r1, [sp, #28]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f002 f9da 	bl	8009348 <__pow5mult>
 8006f94:	9007      	str	r0, [sp, #28]
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f ae8e 	beq.w	8006cb8 <_strtod_l+0x498>
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	dd08      	ble.n	8006fb2 <_strtod_l+0x792>
 8006fa0:	9907      	ldr	r1, [sp, #28]
 8006fa2:	463a      	mov	r2, r7
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f002 fa29 	bl	80093fc <__lshift>
 8006faa:	9007      	str	r0, [sp, #28]
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f43f ae83 	beq.w	8006cb8 <_strtod_l+0x498>
 8006fb2:	f1b9 0f00 	cmp.w	r9, #0
 8006fb6:	dd08      	ble.n	8006fca <_strtod_l+0x7aa>
 8006fb8:	4631      	mov	r1, r6
 8006fba:	464a      	mov	r2, r9
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f002 fa1d 	bl	80093fc <__lshift>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	f43f ae77 	beq.w	8006cb8 <_strtod_l+0x498>
 8006fca:	9a07      	ldr	r2, [sp, #28]
 8006fcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f002 fa9c 	bl	800950c <__mdiff>
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f43f ae6e 	beq.w	8006cb8 <_strtod_l+0x498>
 8006fdc:	68c3      	ldr	r3, [r0, #12]
 8006fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60c3      	str	r3, [r0, #12]
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	f002 fa75 	bl	80094d4 <__mcmp>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	da65      	bge.n	80070ba <_strtod_l+0x89a>
 8006fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ff0:	ea53 030a 	orrs.w	r3, r3, sl
 8006ff4:	f040 8087 	bne.w	8007106 <_strtod_l+0x8e6>
 8006ff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f040 8082 	bne.w	8007106 <_strtod_l+0x8e6>
 8007002:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007006:	0d1b      	lsrs	r3, r3, #20
 8007008:	051b      	lsls	r3, r3, #20
 800700a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800700e:	d97a      	bls.n	8007106 <_strtod_l+0x8e6>
 8007010:	696b      	ldr	r3, [r5, #20]
 8007012:	b913      	cbnz	r3, 800701a <_strtod_l+0x7fa>
 8007014:	692b      	ldr	r3, [r5, #16]
 8007016:	2b01      	cmp	r3, #1
 8007018:	dd75      	ble.n	8007106 <_strtod_l+0x8e6>
 800701a:	4629      	mov	r1, r5
 800701c:	2201      	movs	r2, #1
 800701e:	4620      	mov	r0, r4
 8007020:	f002 f9ec 	bl	80093fc <__lshift>
 8007024:	4631      	mov	r1, r6
 8007026:	4605      	mov	r5, r0
 8007028:	f002 fa54 	bl	80094d4 <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	dd6a      	ble.n	8007106 <_strtod_l+0x8e6>
 8007030:	9904      	ldr	r1, [sp, #16]
 8007032:	4a55      	ldr	r2, [pc, #340]	; (8007188 <_strtod_l+0x968>)
 8007034:	465b      	mov	r3, fp
 8007036:	2900      	cmp	r1, #0
 8007038:	f000 8085 	beq.w	8007146 <_strtod_l+0x926>
 800703c:	ea02 010b 	and.w	r1, r2, fp
 8007040:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007044:	dc7f      	bgt.n	8007146 <_strtod_l+0x926>
 8007046:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800704a:	f77f aeaa 	ble.w	8006da2 <_strtod_l+0x582>
 800704e:	4a4f      	ldr	r2, [pc, #316]	; (800718c <_strtod_l+0x96c>)
 8007050:	2300      	movs	r3, #0
 8007052:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007056:	4650      	mov	r0, sl
 8007058:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800705c:	4659      	mov	r1, fp
 800705e:	f7f9 fad3 	bl	8000608 <__aeabi_dmul>
 8007062:	460b      	mov	r3, r1
 8007064:	4303      	orrs	r3, r0
 8007066:	bf08      	it	eq
 8007068:	2322      	moveq	r3, #34	; 0x22
 800706a:	4682      	mov	sl, r0
 800706c:	468b      	mov	fp, r1
 800706e:	bf08      	it	eq
 8007070:	6023      	streq	r3, [r4, #0]
 8007072:	e62b      	b.n	8006ccc <_strtod_l+0x4ac>
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	ea03 0a0a 	and.w	sl, r3, sl
 8007080:	e6de      	b.n	8006e40 <_strtod_l+0x620>
 8007082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800708a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800708e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007092:	fa01 f308 	lsl.w	r3, r1, r8
 8007096:	930c      	str	r3, [sp, #48]	; 0x30
 8007098:	9111      	str	r1, [sp, #68]	; 0x44
 800709a:	e741      	b.n	8006f20 <_strtod_l+0x700>
 800709c:	2300      	movs	r3, #0
 800709e:	930c      	str	r3, [sp, #48]	; 0x30
 80070a0:	2301      	movs	r3, #1
 80070a2:	9311      	str	r3, [sp, #68]	; 0x44
 80070a4:	e73c      	b.n	8006f20 <_strtod_l+0x700>
 80070a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80070a8:	4642      	mov	r2, r8
 80070aa:	4620      	mov	r0, r4
 80070ac:	f002 f9a6 	bl	80093fc <__lshift>
 80070b0:	901e      	str	r0, [sp, #120]	; 0x78
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f47f af66 	bne.w	8006f84 <_strtod_l+0x764>
 80070b8:	e5fe      	b.n	8006cb8 <_strtod_l+0x498>
 80070ba:	465f      	mov	r7, fp
 80070bc:	d16e      	bne.n	800719c <_strtod_l+0x97c>
 80070be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070c4:	b342      	cbz	r2, 8007118 <_strtod_l+0x8f8>
 80070c6:	4a32      	ldr	r2, [pc, #200]	; (8007190 <_strtod_l+0x970>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d128      	bne.n	800711e <_strtod_l+0x8fe>
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	4650      	mov	r0, sl
 80070d0:	b1eb      	cbz	r3, 800710e <_strtod_l+0x8ee>
 80070d2:	4a2d      	ldr	r2, [pc, #180]	; (8007188 <_strtod_l+0x968>)
 80070d4:	403a      	ands	r2, r7
 80070d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80070da:	f04f 31ff 	mov.w	r1, #4294967295
 80070de:	d819      	bhi.n	8007114 <_strtod_l+0x8f4>
 80070e0:	0d12      	lsrs	r2, r2, #20
 80070e2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	4298      	cmp	r0, r3
 80070ec:	d117      	bne.n	800711e <_strtod_l+0x8fe>
 80070ee:	4b29      	ldr	r3, [pc, #164]	; (8007194 <_strtod_l+0x974>)
 80070f0:	429f      	cmp	r7, r3
 80070f2:	d102      	bne.n	80070fa <_strtod_l+0x8da>
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f addf 	beq.w	8006cb8 <_strtod_l+0x498>
 80070fa:	4b23      	ldr	r3, [pc, #140]	; (8007188 <_strtod_l+0x968>)
 80070fc:	403b      	ands	r3, r7
 80070fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	9b04      	ldr	r3, [sp, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1a0      	bne.n	800704e <_strtod_l+0x82e>
 800710c:	e5de      	b.n	8006ccc <_strtod_l+0x4ac>
 800710e:	f04f 33ff 	mov.w	r3, #4294967295
 8007112:	e7ea      	b.n	80070ea <_strtod_l+0x8ca>
 8007114:	460b      	mov	r3, r1
 8007116:	e7e8      	b.n	80070ea <_strtod_l+0x8ca>
 8007118:	ea53 030a 	orrs.w	r3, r3, sl
 800711c:	d088      	beq.n	8007030 <_strtod_l+0x810>
 800711e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007120:	b1db      	cbz	r3, 800715a <_strtod_l+0x93a>
 8007122:	423b      	tst	r3, r7
 8007124:	d0ef      	beq.n	8007106 <_strtod_l+0x8e6>
 8007126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007128:	9a04      	ldr	r2, [sp, #16]
 800712a:	4650      	mov	r0, sl
 800712c:	4659      	mov	r1, fp
 800712e:	b1c3      	cbz	r3, 8007162 <_strtod_l+0x942>
 8007130:	f7ff fb58 	bl	80067e4 <sulp>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800713c:	f7f9 f8ae 	bl	800029c <__adddf3>
 8007140:	4682      	mov	sl, r0
 8007142:	468b      	mov	fp, r1
 8007144:	e7df      	b.n	8007106 <_strtod_l+0x8e6>
 8007146:	4013      	ands	r3, r2
 8007148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800714c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007154:	f04f 3aff 	mov.w	sl, #4294967295
 8007158:	e7d5      	b.n	8007106 <_strtod_l+0x8e6>
 800715a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800715c:	ea13 0f0a 	tst.w	r3, sl
 8007160:	e7e0      	b.n	8007124 <_strtod_l+0x904>
 8007162:	f7ff fb3f 	bl	80067e4 <sulp>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800716e:	f7f9 f893 	bl	8000298 <__aeabi_dsub>
 8007172:	2200      	movs	r2, #0
 8007174:	2300      	movs	r3, #0
 8007176:	4682      	mov	sl, r0
 8007178:	468b      	mov	fp, r1
 800717a:	f7f9 fcad 	bl	8000ad8 <__aeabi_dcmpeq>
 800717e:	2800      	cmp	r0, #0
 8007180:	d0c1      	beq.n	8007106 <_strtod_l+0x8e6>
 8007182:	e60e      	b.n	8006da2 <_strtod_l+0x582>
 8007184:	fffffc02 	.word	0xfffffc02
 8007188:	7ff00000 	.word	0x7ff00000
 800718c:	39500000 	.word	0x39500000
 8007190:	000fffff 	.word	0x000fffff
 8007194:	7fefffff 	.word	0x7fefffff
 8007198:	0800aef0 	.word	0x0800aef0
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	f002 fb14 	bl	80097cc <__ratio>
 80071a4:	ec59 8b10 	vmov	r8, r9, d0
 80071a8:	ee10 0a10 	vmov	r0, s0
 80071ac:	2200      	movs	r2, #0
 80071ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fca4 	bl	8000b00 <__aeabi_dcmple>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d07c      	beq.n	80072b6 <_strtod_l+0xa96>
 80071bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04c      	beq.n	800725c <_strtod_l+0xa3c>
 80071c2:	4b95      	ldr	r3, [pc, #596]	; (8007418 <_strtod_l+0xbf8>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80071ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007418 <_strtod_l+0xbf8>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	4b92      	ldr	r3, [pc, #584]	; (800741c <_strtod_l+0xbfc>)
 80071d4:	403b      	ands	r3, r7
 80071d6:	9311      	str	r3, [sp, #68]	; 0x44
 80071d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80071da:	4b91      	ldr	r3, [pc, #580]	; (8007420 <_strtod_l+0xc00>)
 80071dc:	429a      	cmp	r2, r3
 80071de:	f040 80b2 	bne.w	8007346 <_strtod_l+0xb26>
 80071e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80071ee:	ec4b ab10 	vmov	d0, sl, fp
 80071f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80071f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071fa:	f002 fa0f 	bl	800961c <__ulp>
 80071fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007202:	ec53 2b10 	vmov	r2, r3, d0
 8007206:	f7f9 f9ff 	bl	8000608 <__aeabi_dmul>
 800720a:	4652      	mov	r2, sl
 800720c:	465b      	mov	r3, fp
 800720e:	f7f9 f845 	bl	800029c <__adddf3>
 8007212:	460b      	mov	r3, r1
 8007214:	4981      	ldr	r1, [pc, #516]	; (800741c <_strtod_l+0xbfc>)
 8007216:	4a83      	ldr	r2, [pc, #524]	; (8007424 <_strtod_l+0xc04>)
 8007218:	4019      	ands	r1, r3
 800721a:	4291      	cmp	r1, r2
 800721c:	4682      	mov	sl, r0
 800721e:	d95e      	bls.n	80072de <_strtod_l+0xabe>
 8007220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007222:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007226:	4293      	cmp	r3, r2
 8007228:	d103      	bne.n	8007232 <_strtod_l+0xa12>
 800722a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722c:	3301      	adds	r3, #1
 800722e:	f43f ad43 	beq.w	8006cb8 <_strtod_l+0x498>
 8007232:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007430 <_strtod_l+0xc10>
 8007236:	f04f 3aff 	mov.w	sl, #4294967295
 800723a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800723c:	4620      	mov	r0, r4
 800723e:	f001 fec1 	bl	8008fc4 <_Bfree>
 8007242:	9907      	ldr	r1, [sp, #28]
 8007244:	4620      	mov	r0, r4
 8007246:	f001 febd 	bl	8008fc4 <_Bfree>
 800724a:	4631      	mov	r1, r6
 800724c:	4620      	mov	r0, r4
 800724e:	f001 feb9 	bl	8008fc4 <_Bfree>
 8007252:	4629      	mov	r1, r5
 8007254:	4620      	mov	r0, r4
 8007256:	f001 feb5 	bl	8008fc4 <_Bfree>
 800725a:	e613      	b.n	8006e84 <_strtod_l+0x664>
 800725c:	f1ba 0f00 	cmp.w	sl, #0
 8007260:	d11b      	bne.n	800729a <_strtod_l+0xa7a>
 8007262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007266:	b9f3      	cbnz	r3, 80072a6 <_strtod_l+0xa86>
 8007268:	4b6b      	ldr	r3, [pc, #428]	; (8007418 <_strtod_l+0xbf8>)
 800726a:	2200      	movs	r2, #0
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f7f9 fc3c 	bl	8000aec <__aeabi_dcmplt>
 8007274:	b9d0      	cbnz	r0, 80072ac <_strtod_l+0xa8c>
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	4b6b      	ldr	r3, [pc, #428]	; (8007428 <_strtod_l+0xc08>)
 800727c:	2200      	movs	r2, #0
 800727e:	f7f9 f9c3 	bl	8000608 <__aeabi_dmul>
 8007282:	4680      	mov	r8, r0
 8007284:	4689      	mov	r9, r1
 8007286:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800728a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800728e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007290:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007294:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007298:	e79b      	b.n	80071d2 <_strtod_l+0x9b2>
 800729a:	f1ba 0f01 	cmp.w	sl, #1
 800729e:	d102      	bne.n	80072a6 <_strtod_l+0xa86>
 80072a0:	2f00      	cmp	r7, #0
 80072a2:	f43f ad7e 	beq.w	8006da2 <_strtod_l+0x582>
 80072a6:	4b61      	ldr	r3, [pc, #388]	; (800742c <_strtod_l+0xc0c>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	e78c      	b.n	80071c6 <_strtod_l+0x9a6>
 80072ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007428 <_strtod_l+0xc08>
 80072b0:	f04f 0800 	mov.w	r8, #0
 80072b4:	e7e7      	b.n	8007286 <_strtod_l+0xa66>
 80072b6:	4b5c      	ldr	r3, [pc, #368]	; (8007428 <_strtod_l+0xc08>)
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	2200      	movs	r2, #0
 80072be:	f7f9 f9a3 	bl	8000608 <__aeabi_dmul>
 80072c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	b933      	cbnz	r3, 80072d8 <_strtod_l+0xab8>
 80072ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072ce:	9012      	str	r0, [sp, #72]	; 0x48
 80072d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80072d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80072d6:	e7dd      	b.n	8007294 <_strtod_l+0xa74>
 80072d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80072dc:	e7f9      	b.n	80072d2 <_strtod_l+0xab2>
 80072de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80072e2:	9b04      	ldr	r3, [sp, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1a8      	bne.n	800723a <_strtod_l+0xa1a>
 80072e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072ee:	0d1b      	lsrs	r3, r3, #20
 80072f0:	051b      	lsls	r3, r3, #20
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d1a1      	bne.n	800723a <_strtod_l+0xa1a>
 80072f6:	4640      	mov	r0, r8
 80072f8:	4649      	mov	r1, r9
 80072fa:	f7f9 fce5 	bl	8000cc8 <__aeabi_d2lz>
 80072fe:	f7f9 f955 	bl	80005ac <__aeabi_l2d>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ffc5 	bl	8000298 <__aeabi_dsub>
 800730e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007314:	ea43 030a 	orr.w	r3, r3, sl
 8007318:	4313      	orrs	r3, r2
 800731a:	4680      	mov	r8, r0
 800731c:	4689      	mov	r9, r1
 800731e:	d053      	beq.n	80073c8 <_strtod_l+0xba8>
 8007320:	a335      	add	r3, pc, #212	; (adr r3, 80073f8 <_strtod_l+0xbd8>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f7f9 fbe1 	bl	8000aec <__aeabi_dcmplt>
 800732a:	2800      	cmp	r0, #0
 800732c:	f47f acce 	bne.w	8006ccc <_strtod_l+0x4ac>
 8007330:	a333      	add	r3, pc, #204	; (adr r3, 8007400 <_strtod_l+0xbe0>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	4640      	mov	r0, r8
 8007338:	4649      	mov	r1, r9
 800733a:	f7f9 fbf5 	bl	8000b28 <__aeabi_dcmpgt>
 800733e:	2800      	cmp	r0, #0
 8007340:	f43f af7b 	beq.w	800723a <_strtod_l+0xa1a>
 8007344:	e4c2      	b.n	8006ccc <_strtod_l+0x4ac>
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	b333      	cbz	r3, 8007398 <_strtod_l+0xb78>
 800734a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800734c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007350:	d822      	bhi.n	8007398 <_strtod_l+0xb78>
 8007352:	a32d      	add	r3, pc, #180	; (adr r3, 8007408 <_strtod_l+0xbe8>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f9 fbd0 	bl	8000b00 <__aeabi_dcmple>
 8007360:	b1a0      	cbz	r0, 800738c <_strtod_l+0xb6c>
 8007362:	4649      	mov	r1, r9
 8007364:	4640      	mov	r0, r8
 8007366:	f7f9 fc27 	bl	8000bb8 <__aeabi_d2uiz>
 800736a:	2801      	cmp	r0, #1
 800736c:	bf38      	it	cc
 800736e:	2001      	movcc	r0, #1
 8007370:	f7f9 f8d0 	bl	8000514 <__aeabi_ui2d>
 8007374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007376:	4680      	mov	r8, r0
 8007378:	4689      	mov	r9, r1
 800737a:	bb13      	cbnz	r3, 80073c2 <_strtod_l+0xba2>
 800737c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007380:	9014      	str	r0, [sp, #80]	; 0x50
 8007382:	9315      	str	r3, [sp, #84]	; 0x54
 8007384:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007388:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800738c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800738e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	930d      	str	r3, [sp, #52]	; 0x34
 8007398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800739c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80073a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80073a4:	f002 f93a 	bl	800961c <__ulp>
 80073a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073ac:	ec53 2b10 	vmov	r2, r3, d0
 80073b0:	f7f9 f92a 	bl	8000608 <__aeabi_dmul>
 80073b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073b8:	f7f8 ff70 	bl	800029c <__adddf3>
 80073bc:	4682      	mov	sl, r0
 80073be:	468b      	mov	fp, r1
 80073c0:	e78f      	b.n	80072e2 <_strtod_l+0xac2>
 80073c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80073c6:	e7dd      	b.n	8007384 <_strtod_l+0xb64>
 80073c8:	a311      	add	r3, pc, #68	; (adr r3, 8007410 <_strtod_l+0xbf0>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 fb8d 	bl	8000aec <__aeabi_dcmplt>
 80073d2:	e7b4      	b.n	800733e <_strtod_l+0xb1e>
 80073d4:	2300      	movs	r3, #0
 80073d6:	930e      	str	r3, [sp, #56]	; 0x38
 80073d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	f7ff ba65 	b.w	80068ac <_strtod_l+0x8c>
 80073e2:	2b65      	cmp	r3, #101	; 0x65
 80073e4:	f43f ab5d 	beq.w	8006aa2 <_strtod_l+0x282>
 80073e8:	2b45      	cmp	r3, #69	; 0x45
 80073ea:	f43f ab5a 	beq.w	8006aa2 <_strtod_l+0x282>
 80073ee:	2201      	movs	r2, #1
 80073f0:	f7ff bb92 	b.w	8006b18 <_strtod_l+0x2f8>
 80073f4:	f3af 8000 	nop.w
 80073f8:	94a03595 	.word	0x94a03595
 80073fc:	3fdfffff 	.word	0x3fdfffff
 8007400:	35afe535 	.word	0x35afe535
 8007404:	3fe00000 	.word	0x3fe00000
 8007408:	ffc00000 	.word	0xffc00000
 800740c:	41dfffff 	.word	0x41dfffff
 8007410:	94a03595 	.word	0x94a03595
 8007414:	3fcfffff 	.word	0x3fcfffff
 8007418:	3ff00000 	.word	0x3ff00000
 800741c:	7ff00000 	.word	0x7ff00000
 8007420:	7fe00000 	.word	0x7fe00000
 8007424:	7c9fffff 	.word	0x7c9fffff
 8007428:	3fe00000 	.word	0x3fe00000
 800742c:	bff00000 	.word	0xbff00000
 8007430:	7fefffff 	.word	0x7fefffff

08007434 <_strtod_r>:
 8007434:	4b01      	ldr	r3, [pc, #4]	; (800743c <_strtod_r+0x8>)
 8007436:	f7ff b9f3 	b.w	8006820 <_strtod_l>
 800743a:	bf00      	nop
 800743c:	20000098 	.word	0x20000098

08007440 <_strtol_l.isra.0>:
 8007440:	2b01      	cmp	r3, #1
 8007442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007446:	d001      	beq.n	800744c <_strtol_l.isra.0+0xc>
 8007448:	2b24      	cmp	r3, #36	; 0x24
 800744a:	d906      	bls.n	800745a <_strtol_l.isra.0+0x1a>
 800744c:	f7fe fa6a 	bl	8005924 <__errno>
 8007450:	2316      	movs	r3, #22
 8007452:	6003      	str	r3, [r0, #0]
 8007454:	2000      	movs	r0, #0
 8007456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745a:	4f3a      	ldr	r7, [pc, #232]	; (8007544 <_strtol_l.isra.0+0x104>)
 800745c:	468e      	mov	lr, r1
 800745e:	4676      	mov	r6, lr
 8007460:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007464:	5de5      	ldrb	r5, [r4, r7]
 8007466:	f015 0508 	ands.w	r5, r5, #8
 800746a:	d1f8      	bne.n	800745e <_strtol_l.isra.0+0x1e>
 800746c:	2c2d      	cmp	r4, #45	; 0x2d
 800746e:	d134      	bne.n	80074da <_strtol_l.isra.0+0x9a>
 8007470:	f89e 4000 	ldrb.w	r4, [lr]
 8007474:	f04f 0801 	mov.w	r8, #1
 8007478:	f106 0e02 	add.w	lr, r6, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d05c      	beq.n	800753a <_strtol_l.isra.0+0xfa>
 8007480:	2b10      	cmp	r3, #16
 8007482:	d10c      	bne.n	800749e <_strtol_l.isra.0+0x5e>
 8007484:	2c30      	cmp	r4, #48	; 0x30
 8007486:	d10a      	bne.n	800749e <_strtol_l.isra.0+0x5e>
 8007488:	f89e 4000 	ldrb.w	r4, [lr]
 800748c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007490:	2c58      	cmp	r4, #88	; 0x58
 8007492:	d14d      	bne.n	8007530 <_strtol_l.isra.0+0xf0>
 8007494:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007498:	2310      	movs	r3, #16
 800749a:	f10e 0e02 	add.w	lr, lr, #2
 800749e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80074a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074a6:	2600      	movs	r6, #0
 80074a8:	fbbc f9f3 	udiv	r9, ip, r3
 80074ac:	4635      	mov	r5, r6
 80074ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80074b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80074b6:	2f09      	cmp	r7, #9
 80074b8:	d818      	bhi.n	80074ec <_strtol_l.isra.0+0xac>
 80074ba:	463c      	mov	r4, r7
 80074bc:	42a3      	cmp	r3, r4
 80074be:	dd24      	ble.n	800750a <_strtol_l.isra.0+0xca>
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	db1f      	blt.n	8007504 <_strtol_l.isra.0+0xc4>
 80074c4:	45a9      	cmp	r9, r5
 80074c6:	d31d      	bcc.n	8007504 <_strtol_l.isra.0+0xc4>
 80074c8:	d101      	bne.n	80074ce <_strtol_l.isra.0+0x8e>
 80074ca:	45a2      	cmp	sl, r4
 80074cc:	db1a      	blt.n	8007504 <_strtol_l.isra.0+0xc4>
 80074ce:	fb05 4503 	mla	r5, r5, r3, r4
 80074d2:	2601      	movs	r6, #1
 80074d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80074d8:	e7eb      	b.n	80074b2 <_strtol_l.isra.0+0x72>
 80074da:	2c2b      	cmp	r4, #43	; 0x2b
 80074dc:	bf08      	it	eq
 80074de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80074e2:	46a8      	mov	r8, r5
 80074e4:	bf08      	it	eq
 80074e6:	f106 0e02 	addeq.w	lr, r6, #2
 80074ea:	e7c7      	b.n	800747c <_strtol_l.isra.0+0x3c>
 80074ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80074f0:	2f19      	cmp	r7, #25
 80074f2:	d801      	bhi.n	80074f8 <_strtol_l.isra.0+0xb8>
 80074f4:	3c37      	subs	r4, #55	; 0x37
 80074f6:	e7e1      	b.n	80074bc <_strtol_l.isra.0+0x7c>
 80074f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80074fc:	2f19      	cmp	r7, #25
 80074fe:	d804      	bhi.n	800750a <_strtol_l.isra.0+0xca>
 8007500:	3c57      	subs	r4, #87	; 0x57
 8007502:	e7db      	b.n	80074bc <_strtol_l.isra.0+0x7c>
 8007504:	f04f 36ff 	mov.w	r6, #4294967295
 8007508:	e7e4      	b.n	80074d4 <_strtol_l.isra.0+0x94>
 800750a:	2e00      	cmp	r6, #0
 800750c:	da05      	bge.n	800751a <_strtol_l.isra.0+0xda>
 800750e:	2322      	movs	r3, #34	; 0x22
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	4665      	mov	r5, ip
 8007514:	b942      	cbnz	r2, 8007528 <_strtol_l.isra.0+0xe8>
 8007516:	4628      	mov	r0, r5
 8007518:	e79d      	b.n	8007456 <_strtol_l.isra.0+0x16>
 800751a:	f1b8 0f00 	cmp.w	r8, #0
 800751e:	d000      	beq.n	8007522 <_strtol_l.isra.0+0xe2>
 8007520:	426d      	negs	r5, r5
 8007522:	2a00      	cmp	r2, #0
 8007524:	d0f7      	beq.n	8007516 <_strtol_l.isra.0+0xd6>
 8007526:	b10e      	cbz	r6, 800752c <_strtol_l.isra.0+0xec>
 8007528:	f10e 31ff 	add.w	r1, lr, #4294967295
 800752c:	6011      	str	r1, [r2, #0]
 800752e:	e7f2      	b.n	8007516 <_strtol_l.isra.0+0xd6>
 8007530:	2430      	movs	r4, #48	; 0x30
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1b3      	bne.n	800749e <_strtol_l.isra.0+0x5e>
 8007536:	2308      	movs	r3, #8
 8007538:	e7b1      	b.n	800749e <_strtol_l.isra.0+0x5e>
 800753a:	2c30      	cmp	r4, #48	; 0x30
 800753c:	d0a4      	beq.n	8007488 <_strtol_l.isra.0+0x48>
 800753e:	230a      	movs	r3, #10
 8007540:	e7ad      	b.n	800749e <_strtol_l.isra.0+0x5e>
 8007542:	bf00      	nop
 8007544:	0800af19 	.word	0x0800af19

08007548 <_strtol_r>:
 8007548:	f7ff bf7a 	b.w	8007440 <_strtol_l.isra.0>

0800754c <strtol>:
 800754c:	4613      	mov	r3, r2
 800754e:	460a      	mov	r2, r1
 8007550:	4601      	mov	r1, r0
 8007552:	4802      	ldr	r0, [pc, #8]	; (800755c <strtol+0x10>)
 8007554:	6800      	ldr	r0, [r0, #0]
 8007556:	f7ff bf73 	b.w	8007440 <_strtol_l.isra.0>
 800755a:	bf00      	nop
 800755c:	20000030 	.word	0x20000030

08007560 <__swbuf_r>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	460e      	mov	r6, r1
 8007564:	4614      	mov	r4, r2
 8007566:	4605      	mov	r5, r0
 8007568:	b118      	cbz	r0, 8007572 <__swbuf_r+0x12>
 800756a:	6983      	ldr	r3, [r0, #24]
 800756c:	b90b      	cbnz	r3, 8007572 <__swbuf_r+0x12>
 800756e:	f001 f849 	bl	8008604 <__sinit>
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <__swbuf_r+0x98>)
 8007574:	429c      	cmp	r4, r3
 8007576:	d12b      	bne.n	80075d0 <__swbuf_r+0x70>
 8007578:	686c      	ldr	r4, [r5, #4]
 800757a:	69a3      	ldr	r3, [r4, #24]
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	071a      	lsls	r2, r3, #28
 8007582:	d52f      	bpl.n	80075e4 <__swbuf_r+0x84>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	b36b      	cbz	r3, 80075e4 <__swbuf_r+0x84>
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1ac0      	subs	r0, r0, r3
 800758e:	6963      	ldr	r3, [r4, #20]
 8007590:	b2f6      	uxtb	r6, r6
 8007592:	4283      	cmp	r3, r0
 8007594:	4637      	mov	r7, r6
 8007596:	dc04      	bgt.n	80075a2 <__swbuf_r+0x42>
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f000 ff9e 	bl	80084dc <_fflush_r>
 80075a0:	bb30      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	701e      	strb	r6, [r3, #0]
 80075b0:	6963      	ldr	r3, [r4, #20]
 80075b2:	3001      	adds	r0, #1
 80075b4:	4283      	cmp	r3, r0
 80075b6:	d004      	beq.n	80075c2 <__swbuf_r+0x62>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d506      	bpl.n	80075cc <__swbuf_r+0x6c>
 80075be:	2e0a      	cmp	r6, #10
 80075c0:	d104      	bne.n	80075cc <__swbuf_r+0x6c>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 ff89 	bl	80084dc <_fflush_r>
 80075ca:	b988      	cbnz	r0, 80075f0 <__swbuf_r+0x90>
 80075cc:	4638      	mov	r0, r7
 80075ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <__swbuf_r+0x9c>)
 80075d2:	429c      	cmp	r4, r3
 80075d4:	d101      	bne.n	80075da <__swbuf_r+0x7a>
 80075d6:	68ac      	ldr	r4, [r5, #8]
 80075d8:	e7cf      	b.n	800757a <__swbuf_r+0x1a>
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <__swbuf_r+0xa0>)
 80075dc:	429c      	cmp	r4, r3
 80075de:	bf08      	it	eq
 80075e0:	68ec      	ldreq	r4, [r5, #12]
 80075e2:	e7ca      	b.n	800757a <__swbuf_r+0x1a>
 80075e4:	4621      	mov	r1, r4
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 f80c 	bl	8007604 <__swsetup_r>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d0cb      	beq.n	8007588 <__swbuf_r+0x28>
 80075f0:	f04f 37ff 	mov.w	r7, #4294967295
 80075f4:	e7ea      	b.n	80075cc <__swbuf_r+0x6c>
 80075f6:	bf00      	nop
 80075f8:	0800b0d0 	.word	0x0800b0d0
 80075fc:	0800b0f0 	.word	0x0800b0f0
 8007600:	0800b0b0 	.word	0x0800b0b0

08007604 <__swsetup_r>:
 8007604:	4b32      	ldr	r3, [pc, #200]	; (80076d0 <__swsetup_r+0xcc>)
 8007606:	b570      	push	{r4, r5, r6, lr}
 8007608:	681d      	ldr	r5, [r3, #0]
 800760a:	4606      	mov	r6, r0
 800760c:	460c      	mov	r4, r1
 800760e:	b125      	cbz	r5, 800761a <__swsetup_r+0x16>
 8007610:	69ab      	ldr	r3, [r5, #24]
 8007612:	b913      	cbnz	r3, 800761a <__swsetup_r+0x16>
 8007614:	4628      	mov	r0, r5
 8007616:	f000 fff5 	bl	8008604 <__sinit>
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <__swsetup_r+0xd0>)
 800761c:	429c      	cmp	r4, r3
 800761e:	d10f      	bne.n	8007640 <__swsetup_r+0x3c>
 8007620:	686c      	ldr	r4, [r5, #4]
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007628:	0719      	lsls	r1, r3, #28
 800762a:	d42c      	bmi.n	8007686 <__swsetup_r+0x82>
 800762c:	06dd      	lsls	r5, r3, #27
 800762e:	d411      	bmi.n	8007654 <__swsetup_r+0x50>
 8007630:	2309      	movs	r3, #9
 8007632:	6033      	str	r3, [r6, #0]
 8007634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	f04f 30ff 	mov.w	r0, #4294967295
 800763e:	e03e      	b.n	80076be <__swsetup_r+0xba>
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <__swsetup_r+0xd4>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <__swsetup_r+0x46>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7eb      	b.n	8007622 <__swsetup_r+0x1e>
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <__swsetup_r+0xd8>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7e6      	b.n	8007622 <__swsetup_r+0x1e>
 8007654:	0758      	lsls	r0, r3, #29
 8007656:	d512      	bpl.n	800767e <__swsetup_r+0x7a>
 8007658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800765a:	b141      	cbz	r1, 800766e <__swsetup_r+0x6a>
 800765c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007660:	4299      	cmp	r1, r3
 8007662:	d002      	beq.n	800766a <__swsetup_r+0x66>
 8007664:	4630      	mov	r0, r6
 8007666:	f002 f937 	bl	80098d8 <_free_r>
 800766a:	2300      	movs	r3, #0
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	2300      	movs	r3, #0
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	6023      	str	r3, [r4, #0]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0308 	orr.w	r3, r3, #8
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	b94b      	cbnz	r3, 800769e <__swsetup_r+0x9a>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d003      	beq.n	800769e <__swsetup_r+0x9a>
 8007696:	4621      	mov	r1, r4
 8007698:	4630      	mov	r0, r6
 800769a:	f001 fbeb 	bl	8008e74 <__smakebuf_r>
 800769e:	89a0      	ldrh	r0, [r4, #12]
 80076a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076a4:	f010 0301 	ands.w	r3, r0, #1
 80076a8:	d00a      	beq.n	80076c0 <__swsetup_r+0xbc>
 80076aa:	2300      	movs	r3, #0
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6963      	ldr	r3, [r4, #20]
 80076b0:	425b      	negs	r3, r3
 80076b2:	61a3      	str	r3, [r4, #24]
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b943      	cbnz	r3, 80076ca <__swsetup_r+0xc6>
 80076b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076bc:	d1ba      	bne.n	8007634 <__swsetup_r+0x30>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	0781      	lsls	r1, r0, #30
 80076c2:	bf58      	it	pl
 80076c4:	6963      	ldrpl	r3, [r4, #20]
 80076c6:	60a3      	str	r3, [r4, #8]
 80076c8:	e7f4      	b.n	80076b4 <__swsetup_r+0xb0>
 80076ca:	2000      	movs	r0, #0
 80076cc:	e7f7      	b.n	80076be <__swsetup_r+0xba>
 80076ce:	bf00      	nop
 80076d0:	20000030 	.word	0x20000030
 80076d4:	0800b0d0 	.word	0x0800b0d0
 80076d8:	0800b0f0 	.word	0x0800b0f0
 80076dc:	0800b0b0 	.word	0x0800b0b0

080076e0 <quorem>:
 80076e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e4:	6903      	ldr	r3, [r0, #16]
 80076e6:	690c      	ldr	r4, [r1, #16]
 80076e8:	42a3      	cmp	r3, r4
 80076ea:	4607      	mov	r7, r0
 80076ec:	f2c0 8081 	blt.w	80077f2 <quorem+0x112>
 80076f0:	3c01      	subs	r4, #1
 80076f2:	f101 0814 	add.w	r8, r1, #20
 80076f6:	f100 0514 	add.w	r5, r0, #20
 80076fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076fe:	9301      	str	r3, [sp, #4]
 8007700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007708:	3301      	adds	r3, #1
 800770a:	429a      	cmp	r2, r3
 800770c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007714:	fbb2 f6f3 	udiv	r6, r2, r3
 8007718:	d331      	bcc.n	800777e <quorem+0x9e>
 800771a:	f04f 0e00 	mov.w	lr, #0
 800771e:	4640      	mov	r0, r8
 8007720:	46ac      	mov	ip, r5
 8007722:	46f2      	mov	sl, lr
 8007724:	f850 2b04 	ldr.w	r2, [r0], #4
 8007728:	b293      	uxth	r3, r2
 800772a:	fb06 e303 	mla	r3, r6, r3, lr
 800772e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007732:	b29b      	uxth	r3, r3
 8007734:	ebaa 0303 	sub.w	r3, sl, r3
 8007738:	0c12      	lsrs	r2, r2, #16
 800773a:	f8dc a000 	ldr.w	sl, [ip]
 800773e:	fb06 e202 	mla	r2, r6, r2, lr
 8007742:	fa13 f38a 	uxtah	r3, r3, sl
 8007746:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800774a:	fa1f fa82 	uxth.w	sl, r2
 800774e:	f8dc 2000 	ldr.w	r2, [ip]
 8007752:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007756:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800775a:	b29b      	uxth	r3, r3
 800775c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007760:	4581      	cmp	r9, r0
 8007762:	f84c 3b04 	str.w	r3, [ip], #4
 8007766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800776a:	d2db      	bcs.n	8007724 <quorem+0x44>
 800776c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007770:	b92b      	cbnz	r3, 800777e <quorem+0x9e>
 8007772:	9b01      	ldr	r3, [sp, #4]
 8007774:	3b04      	subs	r3, #4
 8007776:	429d      	cmp	r5, r3
 8007778:	461a      	mov	r2, r3
 800777a:	d32e      	bcc.n	80077da <quorem+0xfa>
 800777c:	613c      	str	r4, [r7, #16]
 800777e:	4638      	mov	r0, r7
 8007780:	f001 fea8 	bl	80094d4 <__mcmp>
 8007784:	2800      	cmp	r0, #0
 8007786:	db24      	blt.n	80077d2 <quorem+0xf2>
 8007788:	3601      	adds	r6, #1
 800778a:	4628      	mov	r0, r5
 800778c:	f04f 0c00 	mov.w	ip, #0
 8007790:	f858 2b04 	ldr.w	r2, [r8], #4
 8007794:	f8d0 e000 	ldr.w	lr, [r0]
 8007798:	b293      	uxth	r3, r2
 800779a:	ebac 0303 	sub.w	r3, ip, r3
 800779e:	0c12      	lsrs	r2, r2, #16
 80077a0:	fa13 f38e 	uxtah	r3, r3, lr
 80077a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077b2:	45c1      	cmp	r9, r8
 80077b4:	f840 3b04 	str.w	r3, [r0], #4
 80077b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077bc:	d2e8      	bcs.n	8007790 <quorem+0xb0>
 80077be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c6:	b922      	cbnz	r2, 80077d2 <quorem+0xf2>
 80077c8:	3b04      	subs	r3, #4
 80077ca:	429d      	cmp	r5, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	d30a      	bcc.n	80077e6 <quorem+0x106>
 80077d0:	613c      	str	r4, [r7, #16]
 80077d2:	4630      	mov	r0, r6
 80077d4:	b003      	add	sp, #12
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	3b04      	subs	r3, #4
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d1cc      	bne.n	800777c <quorem+0x9c>
 80077e2:	3c01      	subs	r4, #1
 80077e4:	e7c7      	b.n	8007776 <quorem+0x96>
 80077e6:	6812      	ldr	r2, [r2, #0]
 80077e8:	3b04      	subs	r3, #4
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	d1f0      	bne.n	80077d0 <quorem+0xf0>
 80077ee:	3c01      	subs	r4, #1
 80077f0:	e7eb      	b.n	80077ca <quorem+0xea>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e7ee      	b.n	80077d4 <quorem+0xf4>
	...

080077f8 <_dtoa_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	ed2d 8b02 	vpush	{d8}
 8007800:	ec57 6b10 	vmov	r6, r7, d0
 8007804:	b095      	sub	sp, #84	; 0x54
 8007806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800780c:	9105      	str	r1, [sp, #20]
 800780e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007812:	4604      	mov	r4, r0
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	930f      	str	r3, [sp, #60]	; 0x3c
 8007818:	b975      	cbnz	r5, 8007838 <_dtoa_r+0x40>
 800781a:	2010      	movs	r0, #16
 800781c:	f001 fb6a 	bl	8008ef4 <malloc>
 8007820:	4602      	mov	r2, r0
 8007822:	6260      	str	r0, [r4, #36]	; 0x24
 8007824:	b920      	cbnz	r0, 8007830 <_dtoa_r+0x38>
 8007826:	4bb2      	ldr	r3, [pc, #712]	; (8007af0 <_dtoa_r+0x2f8>)
 8007828:	21ea      	movs	r1, #234	; 0xea
 800782a:	48b2      	ldr	r0, [pc, #712]	; (8007af4 <_dtoa_r+0x2fc>)
 800782c:	f002 fc40 	bl	800a0b0 <__assert_func>
 8007830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007834:	6005      	str	r5, [r0, #0]
 8007836:	60c5      	str	r5, [r0, #12]
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	6819      	ldr	r1, [r3, #0]
 800783c:	b151      	cbz	r1, 8007854 <_dtoa_r+0x5c>
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	604a      	str	r2, [r1, #4]
 8007842:	2301      	movs	r3, #1
 8007844:	4093      	lsls	r3, r2
 8007846:	608b      	str	r3, [r1, #8]
 8007848:	4620      	mov	r0, r4
 800784a:	f001 fbbb 	bl	8008fc4 <_Bfree>
 800784e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007850:	2200      	movs	r2, #0
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	1e3b      	subs	r3, r7, #0
 8007856:	bfb9      	ittee	lt
 8007858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800785c:	9303      	strlt	r3, [sp, #12]
 800785e:	2300      	movge	r3, #0
 8007860:	f8c8 3000 	strge.w	r3, [r8]
 8007864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007868:	4ba3      	ldr	r3, [pc, #652]	; (8007af8 <_dtoa_r+0x300>)
 800786a:	bfbc      	itt	lt
 800786c:	2201      	movlt	r2, #1
 800786e:	f8c8 2000 	strlt.w	r2, [r8]
 8007872:	ea33 0309 	bics.w	r3, r3, r9
 8007876:	d11b      	bne.n	80078b0 <_dtoa_r+0xb8>
 8007878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800787a:	f242 730f 	movw	r3, #9999	; 0x270f
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007884:	4333      	orrs	r3, r6
 8007886:	f000 857a 	beq.w	800837e <_dtoa_r+0xb86>
 800788a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800788c:	b963      	cbnz	r3, 80078a8 <_dtoa_r+0xb0>
 800788e:	4b9b      	ldr	r3, [pc, #620]	; (8007afc <_dtoa_r+0x304>)
 8007890:	e024      	b.n	80078dc <_dtoa_r+0xe4>
 8007892:	4b9b      	ldr	r3, [pc, #620]	; (8007b00 <_dtoa_r+0x308>)
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	3308      	adds	r3, #8
 8007898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	9800      	ldr	r0, [sp, #0]
 800789e:	b015      	add	sp, #84	; 0x54
 80078a0:	ecbd 8b02 	vpop	{d8}
 80078a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a8:	4b94      	ldr	r3, [pc, #592]	; (8007afc <_dtoa_r+0x304>)
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	3303      	adds	r3, #3
 80078ae:	e7f3      	b.n	8007898 <_dtoa_r+0xa0>
 80078b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078b4:	2200      	movs	r2, #0
 80078b6:	ec51 0b17 	vmov	r0, r1, d7
 80078ba:	2300      	movs	r3, #0
 80078bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80078c0:	f7f9 f90a 	bl	8000ad8 <__aeabi_dcmpeq>
 80078c4:	4680      	mov	r8, r0
 80078c6:	b158      	cbz	r0, 80078e0 <_dtoa_r+0xe8>
 80078c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ca:	2301      	movs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8551 	beq.w	8008378 <_dtoa_r+0xb80>
 80078d6:	488b      	ldr	r0, [pc, #556]	; (8007b04 <_dtoa_r+0x30c>)
 80078d8:	6018      	str	r0, [r3, #0]
 80078da:	1e43      	subs	r3, r0, #1
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	e7dd      	b.n	800789c <_dtoa_r+0xa4>
 80078e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80078e4:	aa12      	add	r2, sp, #72	; 0x48
 80078e6:	a913      	add	r1, sp, #76	; 0x4c
 80078e8:	4620      	mov	r0, r4
 80078ea:	f001 ff13 	bl	8009714 <__d2b>
 80078ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078f2:	4683      	mov	fp, r0
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	d07c      	beq.n	80079f2 <_dtoa_r+0x1fa>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80078fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800790a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800790e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007912:	4b7d      	ldr	r3, [pc, #500]	; (8007b08 <_dtoa_r+0x310>)
 8007914:	2200      	movs	r2, #0
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f8 fcbd 	bl	8000298 <__aeabi_dsub>
 800791e:	a36e      	add	r3, pc, #440	; (adr r3, 8007ad8 <_dtoa_r+0x2e0>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 fe70 	bl	8000608 <__aeabi_dmul>
 8007928:	a36d      	add	r3, pc, #436	; (adr r3, 8007ae0 <_dtoa_r+0x2e8>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	f7f8 fcb5 	bl	800029c <__adddf3>
 8007932:	4606      	mov	r6, r0
 8007934:	4628      	mov	r0, r5
 8007936:	460f      	mov	r7, r1
 8007938:	f7f8 fdfc 	bl	8000534 <__aeabi_i2d>
 800793c:	a36a      	add	r3, pc, #424	; (adr r3, 8007ae8 <_dtoa_r+0x2f0>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fe61 	bl	8000608 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f8 fca5 	bl	800029c <__adddf3>
 8007952:	4606      	mov	r6, r0
 8007954:	460f      	mov	r7, r1
 8007956:	f7f9 f907 	bl	8000b68 <__aeabi_d2iz>
 800795a:	2200      	movs	r2, #0
 800795c:	4682      	mov	sl, r0
 800795e:	2300      	movs	r3, #0
 8007960:	4630      	mov	r0, r6
 8007962:	4639      	mov	r1, r7
 8007964:	f7f9 f8c2 	bl	8000aec <__aeabi_dcmplt>
 8007968:	b148      	cbz	r0, 800797e <_dtoa_r+0x186>
 800796a:	4650      	mov	r0, sl
 800796c:	f7f8 fde2 	bl	8000534 <__aeabi_i2d>
 8007970:	4632      	mov	r2, r6
 8007972:	463b      	mov	r3, r7
 8007974:	f7f9 f8b0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007978:	b908      	cbnz	r0, 800797e <_dtoa_r+0x186>
 800797a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800797e:	f1ba 0f16 	cmp.w	sl, #22
 8007982:	d854      	bhi.n	8007a2e <_dtoa_r+0x236>
 8007984:	4b61      	ldr	r3, [pc, #388]	; (8007b0c <_dtoa_r+0x314>)
 8007986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007992:	f7f9 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8007996:	2800      	cmp	r0, #0
 8007998:	d04b      	beq.n	8007a32 <_dtoa_r+0x23a>
 800799a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800799e:	2300      	movs	r3, #0
 80079a0:	930e      	str	r3, [sp, #56]	; 0x38
 80079a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079a4:	1b5d      	subs	r5, r3, r5
 80079a6:	1e6b      	subs	r3, r5, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	bf43      	ittte	mi
 80079ac:	2300      	movmi	r3, #0
 80079ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80079b2:	9304      	strmi	r3, [sp, #16]
 80079b4:	f04f 0800 	movpl.w	r8, #0
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	db3b      	blt.n	8007a36 <_dtoa_r+0x23e>
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80079c4:	4453      	add	r3, sl
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9306      	str	r3, [sp, #24]
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d869      	bhi.n	8007aa6 <_dtoa_r+0x2ae>
 80079d2:	2b05      	cmp	r3, #5
 80079d4:	bfc4      	itt	gt
 80079d6:	3b04      	subgt	r3, #4
 80079d8:	9305      	strgt	r3, [sp, #20]
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	f1a3 0302 	sub.w	r3, r3, #2
 80079e0:	bfcc      	ite	gt
 80079e2:	2500      	movgt	r5, #0
 80079e4:	2501      	movle	r5, #1
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d869      	bhi.n	8007abe <_dtoa_r+0x2c6>
 80079ea:	e8df f003 	tbb	[pc, r3]
 80079ee:	4e2c      	.short	0x4e2c
 80079f0:	5a4c      	.short	0x5a4c
 80079f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80079f6:	441d      	add	r5, r3
 80079f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	bfc1      	itttt	gt
 8007a00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a08:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a10:	bfda      	itte	le
 8007a12:	f1c3 0320 	rsble	r3, r3, #32
 8007a16:	fa06 f003 	lslle.w	r0, r6, r3
 8007a1a:	4318      	orrgt	r0, r3
 8007a1c:	f7f8 fd7a 	bl	8000514 <__aeabi_ui2d>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4606      	mov	r6, r0
 8007a24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a28:	3d01      	subs	r5, #1
 8007a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a2c:	e771      	b.n	8007912 <_dtoa_r+0x11a>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e7b6      	b.n	80079a0 <_dtoa_r+0x1a8>
 8007a32:	900e      	str	r0, [sp, #56]	; 0x38
 8007a34:	e7b5      	b.n	80079a2 <_dtoa_r+0x1aa>
 8007a36:	f1ca 0300 	rsb	r3, sl, #0
 8007a3a:	9306      	str	r3, [sp, #24]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	eba8 080a 	sub.w	r8, r8, sl
 8007a42:	930d      	str	r3, [sp, #52]	; 0x34
 8007a44:	e7c2      	b.n	80079cc <_dtoa_r+0x1d4>
 8007a46:	2300      	movs	r3, #0
 8007a48:	9308      	str	r3, [sp, #32]
 8007a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dc39      	bgt.n	8007ac4 <_dtoa_r+0x2cc>
 8007a50:	f04f 0901 	mov.w	r9, #1
 8007a54:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a58:	464b      	mov	r3, r9
 8007a5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a60:	2200      	movs	r2, #0
 8007a62:	6042      	str	r2, [r0, #4]
 8007a64:	2204      	movs	r2, #4
 8007a66:	f102 0614 	add.w	r6, r2, #20
 8007a6a:	429e      	cmp	r6, r3
 8007a6c:	6841      	ldr	r1, [r0, #4]
 8007a6e:	d92f      	bls.n	8007ad0 <_dtoa_r+0x2d8>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f001 fa67 	bl	8008f44 <_Balloc>
 8007a76:	9000      	str	r0, [sp, #0]
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d14b      	bne.n	8007b14 <_dtoa_r+0x31c>
 8007a7c:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <_dtoa_r+0x318>)
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a84:	e6d1      	b.n	800782a <_dtoa_r+0x32>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7de      	b.n	8007a48 <_dtoa_r+0x250>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9308      	str	r3, [sp, #32]
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	eb0a 0903 	add.w	r9, sl, r3
 8007a94:	f109 0301 	add.w	r3, r9, #1
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	bfb8      	it	lt
 8007a9e:	2301      	movlt	r3, #1
 8007aa0:	e7dd      	b.n	8007a5e <_dtoa_r+0x266>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7f2      	b.n	8007a8c <_dtoa_r+0x294>
 8007aa6:	2501      	movs	r5, #1
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	9508      	str	r5, [sp, #32]
 8007aae:	f04f 39ff 	mov.w	r9, #4294967295
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ab8:	2312      	movs	r3, #18
 8007aba:	9209      	str	r2, [sp, #36]	; 0x24
 8007abc:	e7cf      	b.n	8007a5e <_dtoa_r+0x266>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	9308      	str	r3, [sp, #32]
 8007ac2:	e7f4      	b.n	8007aae <_dtoa_r+0x2b6>
 8007ac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007acc:	464b      	mov	r3, r9
 8007ace:	e7c6      	b.n	8007a5e <_dtoa_r+0x266>
 8007ad0:	3101      	adds	r1, #1
 8007ad2:	6041      	str	r1, [r0, #4]
 8007ad4:	0052      	lsls	r2, r2, #1
 8007ad6:	e7c6      	b.n	8007a66 <_dtoa_r+0x26e>
 8007ad8:	636f4361 	.word	0x636f4361
 8007adc:	3fd287a7 	.word	0x3fd287a7
 8007ae0:	8b60c8b3 	.word	0x8b60c8b3
 8007ae4:	3fc68a28 	.word	0x3fc68a28
 8007ae8:	509f79fb 	.word	0x509f79fb
 8007aec:	3fd34413 	.word	0x3fd34413
 8007af0:	0800b026 	.word	0x0800b026
 8007af4:	0800b03d 	.word	0x0800b03d
 8007af8:	7ff00000 	.word	0x7ff00000
 8007afc:	0800b022 	.word	0x0800b022
 8007b00:	0800b019 	.word	0x0800b019
 8007b04:	0800ae9d 	.word	0x0800ae9d
 8007b08:	3ff80000 	.word	0x3ff80000
 8007b0c:	0800b218 	.word	0x0800b218
 8007b10:	0800b09c 	.word	0x0800b09c
 8007b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b16:	9a00      	ldr	r2, [sp, #0]
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	9b01      	ldr	r3, [sp, #4]
 8007b1c:	2b0e      	cmp	r3, #14
 8007b1e:	f200 80ad 	bhi.w	8007c7c <_dtoa_r+0x484>
 8007b22:	2d00      	cmp	r5, #0
 8007b24:	f000 80aa 	beq.w	8007c7c <_dtoa_r+0x484>
 8007b28:	f1ba 0f00 	cmp.w	sl, #0
 8007b2c:	dd36      	ble.n	8007b9c <_dtoa_r+0x3a4>
 8007b2e:	4ac3      	ldr	r2, [pc, #780]	; (8007e3c <_dtoa_r+0x644>)
 8007b30:	f00a 030f 	and.w	r3, sl, #15
 8007b34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b38:	ed93 7b00 	vldr	d7, [r3]
 8007b3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b44:	eeb0 8a47 	vmov.f32	s16, s14
 8007b48:	eef0 8a67 	vmov.f32	s17, s15
 8007b4c:	d016      	beq.n	8007b7c <_dtoa_r+0x384>
 8007b4e:	4bbc      	ldr	r3, [pc, #752]	; (8007e40 <_dtoa_r+0x648>)
 8007b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b58:	f7f8 fe80 	bl	800085c <__aeabi_ddiv>
 8007b5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b60:	f007 070f 	and.w	r7, r7, #15
 8007b64:	2503      	movs	r5, #3
 8007b66:	4eb6      	ldr	r6, [pc, #728]	; (8007e40 <_dtoa_r+0x648>)
 8007b68:	b957      	cbnz	r7, 8007b80 <_dtoa_r+0x388>
 8007b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6e:	ec53 2b18 	vmov	r2, r3, d8
 8007b72:	f7f8 fe73 	bl	800085c <__aeabi_ddiv>
 8007b76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b7a:	e029      	b.n	8007bd0 <_dtoa_r+0x3d8>
 8007b7c:	2502      	movs	r5, #2
 8007b7e:	e7f2      	b.n	8007b66 <_dtoa_r+0x36e>
 8007b80:	07f9      	lsls	r1, r7, #31
 8007b82:	d508      	bpl.n	8007b96 <_dtoa_r+0x39e>
 8007b84:	ec51 0b18 	vmov	r0, r1, d8
 8007b88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b8c:	f7f8 fd3c 	bl	8000608 <__aeabi_dmul>
 8007b90:	ec41 0b18 	vmov	d8, r0, r1
 8007b94:	3501      	adds	r5, #1
 8007b96:	107f      	asrs	r7, r7, #1
 8007b98:	3608      	adds	r6, #8
 8007b9a:	e7e5      	b.n	8007b68 <_dtoa_r+0x370>
 8007b9c:	f000 80a6 	beq.w	8007cec <_dtoa_r+0x4f4>
 8007ba0:	f1ca 0600 	rsb	r6, sl, #0
 8007ba4:	4ba5      	ldr	r3, [pc, #660]	; (8007e3c <_dtoa_r+0x644>)
 8007ba6:	4fa6      	ldr	r7, [pc, #664]	; (8007e40 <_dtoa_r+0x648>)
 8007ba8:	f006 020f 	and.w	r2, r6, #15
 8007bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bb8:	f7f8 fd26 	bl	8000608 <__aeabi_dmul>
 8007bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc0:	1136      	asrs	r6, r6, #4
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2502      	movs	r5, #2
 8007bc6:	2e00      	cmp	r6, #0
 8007bc8:	f040 8085 	bne.w	8007cd6 <_dtoa_r+0x4de>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1d2      	bne.n	8007b76 <_dtoa_r+0x37e>
 8007bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 808c 	beq.w	8007cf0 <_dtoa_r+0x4f8>
 8007bd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007bdc:	4b99      	ldr	r3, [pc, #612]	; (8007e44 <_dtoa_r+0x64c>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	4630      	mov	r0, r6
 8007be2:	4639      	mov	r1, r7
 8007be4:	f7f8 ff82 	bl	8000aec <__aeabi_dcmplt>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f000 8081 	beq.w	8007cf0 <_dtoa_r+0x4f8>
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d07d      	beq.n	8007cf0 <_dtoa_r+0x4f8>
 8007bf4:	f1b9 0f00 	cmp.w	r9, #0
 8007bf8:	dd3c      	ble.n	8007c74 <_dtoa_r+0x47c>
 8007bfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007bfe:	9307      	str	r3, [sp, #28]
 8007c00:	2200      	movs	r2, #0
 8007c02:	4b91      	ldr	r3, [pc, #580]	; (8007e48 <_dtoa_r+0x650>)
 8007c04:	4630      	mov	r0, r6
 8007c06:	4639      	mov	r1, r7
 8007c08:	f7f8 fcfe 	bl	8000608 <__aeabi_dmul>
 8007c0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c10:	3501      	adds	r5, #1
 8007c12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7f8 fc8a 	bl	8000534 <__aeabi_i2d>
 8007c20:	4632      	mov	r2, r6
 8007c22:	463b      	mov	r3, r7
 8007c24:	f7f8 fcf0 	bl	8000608 <__aeabi_dmul>
 8007c28:	4b88      	ldr	r3, [pc, #544]	; (8007e4c <_dtoa_r+0x654>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f7f8 fb36 	bl	800029c <__adddf3>
 8007c30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c38:	9303      	str	r3, [sp, #12]
 8007c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d15c      	bne.n	8007cfa <_dtoa_r+0x502>
 8007c40:	4b83      	ldr	r3, [pc, #524]	; (8007e50 <_dtoa_r+0x658>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	4630      	mov	r0, r6
 8007c46:	4639      	mov	r1, r7
 8007c48:	f7f8 fb26 	bl	8000298 <__aeabi_dsub>
 8007c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	f7f8 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f040 8296 	bne.w	800818a <_dtoa_r+0x992>
 8007c5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c62:	4630      	mov	r0, r6
 8007c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f040 8288 	bne.w	8008184 <_dtoa_r+0x98c>
 8007c74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f2c0 8158 	blt.w	8007f34 <_dtoa_r+0x73c>
 8007c84:	f1ba 0f0e 	cmp.w	sl, #14
 8007c88:	f300 8154 	bgt.w	8007f34 <_dtoa_r+0x73c>
 8007c8c:	4b6b      	ldr	r3, [pc, #428]	; (8007e3c <_dtoa_r+0x644>)
 8007c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f280 80e3 	bge.w	8007e64 <_dtoa_r+0x66c>
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f300 80df 	bgt.w	8007e64 <_dtoa_r+0x66c>
 8007ca6:	f040 826d 	bne.w	8008184 <_dtoa_r+0x98c>
 8007caa:	4b69      	ldr	r3, [pc, #420]	; (8007e50 <_dtoa_r+0x658>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4640      	mov	r0, r8
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	f7f8 fca9 	bl	8000608 <__aeabi_dmul>
 8007cb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cba:	f7f8 ff2b 	bl	8000b14 <__aeabi_dcmpge>
 8007cbe:	9e01      	ldr	r6, [sp, #4]
 8007cc0:	4637      	mov	r7, r6
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	f040 8243 	bne.w	800814e <_dtoa_r+0x956>
 8007cc8:	9d00      	ldr	r5, [sp, #0]
 8007cca:	2331      	movs	r3, #49	; 0x31
 8007ccc:	f805 3b01 	strb.w	r3, [r5], #1
 8007cd0:	f10a 0a01 	add.w	sl, sl, #1
 8007cd4:	e23f      	b.n	8008156 <_dtoa_r+0x95e>
 8007cd6:	07f2      	lsls	r2, r6, #31
 8007cd8:	d505      	bpl.n	8007ce6 <_dtoa_r+0x4ee>
 8007cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cde:	f7f8 fc93 	bl	8000608 <__aeabi_dmul>
 8007ce2:	3501      	adds	r5, #1
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	1076      	asrs	r6, r6, #1
 8007ce8:	3708      	adds	r7, #8
 8007cea:	e76c      	b.n	8007bc6 <_dtoa_r+0x3ce>
 8007cec:	2502      	movs	r5, #2
 8007cee:	e76f      	b.n	8007bd0 <_dtoa_r+0x3d8>
 8007cf0:	9b01      	ldr	r3, [sp, #4]
 8007cf2:	f8cd a01c 	str.w	sl, [sp, #28]
 8007cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf8:	e78d      	b.n	8007c16 <_dtoa_r+0x41e>
 8007cfa:	9900      	ldr	r1, [sp, #0]
 8007cfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d00:	4b4e      	ldr	r3, [pc, #312]	; (8007e3c <_dtoa_r+0x644>)
 8007d02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d06:	4401      	add	r1, r0
 8007d08:	9102      	str	r1, [sp, #8]
 8007d0a:	9908      	ldr	r1, [sp, #32]
 8007d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d10:	eef0 8a67 	vmov.f32	s17, s15
 8007d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d1c:	2900      	cmp	r1, #0
 8007d1e:	d045      	beq.n	8007dac <_dtoa_r+0x5b4>
 8007d20:	494c      	ldr	r1, [pc, #304]	; (8007e54 <_dtoa_r+0x65c>)
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7f8 fd9a 	bl	800085c <__aeabi_ddiv>
 8007d28:	ec53 2b18 	vmov	r2, r3, d8
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	9d00      	ldr	r5, [sp, #0]
 8007d32:	ec41 0b18 	vmov	d8, r0, r1
 8007d36:	4639      	mov	r1, r7
 8007d38:	4630      	mov	r0, r6
 8007d3a:	f7f8 ff15 	bl	8000b68 <__aeabi_d2iz>
 8007d3e:	900c      	str	r0, [sp, #48]	; 0x30
 8007d40:	f7f8 fbf8 	bl	8000534 <__aeabi_i2d>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 faa4 	bl	8000298 <__aeabi_dsub>
 8007d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d52:	3330      	adds	r3, #48	; 0x30
 8007d54:	f805 3b01 	strb.w	r3, [r5], #1
 8007d58:	ec53 2b18 	vmov	r2, r3, d8
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d165      	bne.n	8007e34 <_dtoa_r+0x63c>
 8007d68:	4632      	mov	r2, r6
 8007d6a:	463b      	mov	r3, r7
 8007d6c:	4935      	ldr	r1, [pc, #212]	; (8007e44 <_dtoa_r+0x64c>)
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f7f8 fa92 	bl	8000298 <__aeabi_dsub>
 8007d74:	ec53 2b18 	vmov	r2, r3, d8
 8007d78:	f7f8 feb8 	bl	8000aec <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 80b9 	bne.w	8007ef4 <_dtoa_r+0x6fc>
 8007d82:	9b02      	ldr	r3, [sp, #8]
 8007d84:	429d      	cmp	r5, r3
 8007d86:	f43f af75 	beq.w	8007c74 <_dtoa_r+0x47c>
 8007d8a:	4b2f      	ldr	r3, [pc, #188]	; (8007e48 <_dtoa_r+0x650>)
 8007d8c:	ec51 0b18 	vmov	r0, r1, d8
 8007d90:	2200      	movs	r2, #0
 8007d92:	f7f8 fc39 	bl	8000608 <__aeabi_dmul>
 8007d96:	4b2c      	ldr	r3, [pc, #176]	; (8007e48 <_dtoa_r+0x650>)
 8007d98:	ec41 0b18 	vmov	d8, r0, r1
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4630      	mov	r0, r6
 8007da0:	4639      	mov	r1, r7
 8007da2:	f7f8 fc31 	bl	8000608 <__aeabi_dmul>
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	e7c4      	b.n	8007d36 <_dtoa_r+0x53e>
 8007dac:	ec51 0b17 	vmov	r0, r1, d7
 8007db0:	f7f8 fc2a 	bl	8000608 <__aeabi_dmul>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	9d00      	ldr	r5, [sp, #0]
 8007db8:	930c      	str	r3, [sp, #48]	; 0x30
 8007dba:	ec41 0b18 	vmov	d8, r0, r1
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	f7f8 fed1 	bl	8000b68 <__aeabi_d2iz>
 8007dc6:	9011      	str	r0, [sp, #68]	; 0x44
 8007dc8:	f7f8 fbb4 	bl	8000534 <__aeabi_i2d>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fa60 	bl	8000298 <__aeabi_dsub>
 8007dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dda:	3330      	adds	r3, #48	; 0x30
 8007ddc:	f805 3b01 	strb.w	r3, [r5], #1
 8007de0:	9b02      	ldr	r3, [sp, #8]
 8007de2:	429d      	cmp	r5, r3
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	d134      	bne.n	8007e58 <_dtoa_r+0x660>
 8007dee:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <_dtoa_r+0x65c>)
 8007df0:	ec51 0b18 	vmov	r0, r1, d8
 8007df4:	f7f8 fa52 	bl	800029c <__adddf3>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	4639      	mov	r1, r7
 8007e00:	f7f8 fe92 	bl	8000b28 <__aeabi_dcmpgt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d175      	bne.n	8007ef4 <_dtoa_r+0x6fc>
 8007e08:	ec53 2b18 	vmov	r2, r3, d8
 8007e0c:	4911      	ldr	r1, [pc, #68]	; (8007e54 <_dtoa_r+0x65c>)
 8007e0e:	2000      	movs	r0, #0
 8007e10:	f7f8 fa42 	bl	8000298 <__aeabi_dsub>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe66 	bl	8000aec <__aeabi_dcmplt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f43f af27 	beq.w	8007c74 <_dtoa_r+0x47c>
 8007e26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e28:	1e6b      	subs	r3, r5, #1
 8007e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e30:	2b30      	cmp	r3, #48	; 0x30
 8007e32:	d0f8      	beq.n	8007e26 <_dtoa_r+0x62e>
 8007e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e38:	e04a      	b.n	8007ed0 <_dtoa_r+0x6d8>
 8007e3a:	bf00      	nop
 8007e3c:	0800b218 	.word	0x0800b218
 8007e40:	0800b1f0 	.word	0x0800b1f0
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	401c0000 	.word	0x401c0000
 8007e50:	40140000 	.word	0x40140000
 8007e54:	3fe00000 	.word	0x3fe00000
 8007e58:	4baf      	ldr	r3, [pc, #700]	; (8008118 <_dtoa_r+0x920>)
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460f      	mov	r7, r1
 8007e62:	e7ac      	b.n	8007dbe <_dtoa_r+0x5c6>
 8007e64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e68:	9d00      	ldr	r5, [sp, #0]
 8007e6a:	4642      	mov	r2, r8
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 fcf3 	bl	800085c <__aeabi_ddiv>
 8007e76:	f7f8 fe77 	bl	8000b68 <__aeabi_d2iz>
 8007e7a:	9002      	str	r0, [sp, #8]
 8007e7c:	f7f8 fb5a 	bl	8000534 <__aeabi_i2d>
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	f7f8 fbc0 	bl	8000608 <__aeabi_dmul>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fa02 	bl	8000298 <__aeabi_dsub>
 8007e94:	9e02      	ldr	r6, [sp, #8]
 8007e96:	9f01      	ldr	r7, [sp, #4]
 8007e98:	3630      	adds	r6, #48	; 0x30
 8007e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e9e:	9e00      	ldr	r6, [sp, #0]
 8007ea0:	1bae      	subs	r6, r5, r6
 8007ea2:	42b7      	cmp	r7, r6
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	d137      	bne.n	8007f1a <_dtoa_r+0x722>
 8007eaa:	f7f8 f9f7 	bl	800029c <__adddf3>
 8007eae:	4642      	mov	r2, r8
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	f7f8 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 8007eba:	b9c8      	cbnz	r0, 8007ef0 <_dtoa_r+0x6f8>
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec8:	b110      	cbz	r0, 8007ed0 <_dtoa_r+0x6d8>
 8007eca:	9b02      	ldr	r3, [sp, #8]
 8007ecc:	07d9      	lsls	r1, r3, #31
 8007ece:	d40f      	bmi.n	8007ef0 <_dtoa_r+0x6f8>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	f001 f876 	bl	8008fc4 <_Bfree>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	702b      	strb	r3, [r5, #0]
 8007edc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ede:	f10a 0001 	add.w	r0, sl, #1
 8007ee2:	6018      	str	r0, [r3, #0]
 8007ee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f43f acd8 	beq.w	800789c <_dtoa_r+0xa4>
 8007eec:	601d      	str	r5, [r3, #0]
 8007eee:	e4d5      	b.n	800789c <_dtoa_r+0xa4>
 8007ef0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	461d      	mov	r5, r3
 8007ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007efc:	2a39      	cmp	r2, #57	; 0x39
 8007efe:	d108      	bne.n	8007f12 <_dtoa_r+0x71a>
 8007f00:	9a00      	ldr	r2, [sp, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d1f7      	bne.n	8007ef6 <_dtoa_r+0x6fe>
 8007f06:	9a07      	ldr	r2, [sp, #28]
 8007f08:	9900      	ldr	r1, [sp, #0]
 8007f0a:	3201      	adds	r2, #1
 8007f0c:	9207      	str	r2, [sp, #28]
 8007f0e:	2230      	movs	r2, #48	; 0x30
 8007f10:	700a      	strb	r2, [r1, #0]
 8007f12:	781a      	ldrb	r2, [r3, #0]
 8007f14:	3201      	adds	r2, #1
 8007f16:	701a      	strb	r2, [r3, #0]
 8007f18:	e78c      	b.n	8007e34 <_dtoa_r+0x63c>
 8007f1a:	4b7f      	ldr	r3, [pc, #508]	; (8008118 <_dtoa_r+0x920>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f7f8 fb73 	bl	8000608 <__aeabi_dmul>
 8007f22:	2200      	movs	r2, #0
 8007f24:	2300      	movs	r3, #0
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	f7f8 fdd5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d09b      	beq.n	8007e6a <_dtoa_r+0x672>
 8007f32:	e7cd      	b.n	8007ed0 <_dtoa_r+0x6d8>
 8007f34:	9a08      	ldr	r2, [sp, #32]
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	f000 80c4 	beq.w	80080c4 <_dtoa_r+0x8cc>
 8007f3c:	9a05      	ldr	r2, [sp, #20]
 8007f3e:	2a01      	cmp	r2, #1
 8007f40:	f300 80a8 	bgt.w	8008094 <_dtoa_r+0x89c>
 8007f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	f000 80a0 	beq.w	800808c <_dtoa_r+0x894>
 8007f4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f50:	9e06      	ldr	r6, [sp, #24]
 8007f52:	4645      	mov	r5, r8
 8007f54:	9a04      	ldr	r2, [sp, #16]
 8007f56:	2101      	movs	r1, #1
 8007f58:	441a      	add	r2, r3
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	4498      	add	r8, r3
 8007f5e:	9204      	str	r2, [sp, #16]
 8007f60:	f001 f936 	bl	80091d0 <__i2b>
 8007f64:	4607      	mov	r7, r0
 8007f66:	2d00      	cmp	r5, #0
 8007f68:	dd0b      	ble.n	8007f82 <_dtoa_r+0x78a>
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd08      	ble.n	8007f82 <_dtoa_r+0x78a>
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	9a04      	ldr	r2, [sp, #16]
 8007f74:	bfa8      	it	ge
 8007f76:	462b      	movge	r3, r5
 8007f78:	eba8 0803 	sub.w	r8, r8, r3
 8007f7c:	1aed      	subs	r5, r5, r3
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9b06      	ldr	r3, [sp, #24]
 8007f84:	b1fb      	cbz	r3, 8007fc6 <_dtoa_r+0x7ce>
 8007f86:	9b08      	ldr	r3, [sp, #32]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 809f 	beq.w	80080cc <_dtoa_r+0x8d4>
 8007f8e:	2e00      	cmp	r6, #0
 8007f90:	dd11      	ble.n	8007fb6 <_dtoa_r+0x7be>
 8007f92:	4639      	mov	r1, r7
 8007f94:	4632      	mov	r2, r6
 8007f96:	4620      	mov	r0, r4
 8007f98:	f001 f9d6 	bl	8009348 <__pow5mult>
 8007f9c:	465a      	mov	r2, fp
 8007f9e:	4601      	mov	r1, r0
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f001 f92a 	bl	80091fc <__multiply>
 8007fa8:	4659      	mov	r1, fp
 8007faa:	9007      	str	r0, [sp, #28]
 8007fac:	4620      	mov	r0, r4
 8007fae:	f001 f809 	bl	8008fc4 <_Bfree>
 8007fb2:	9b07      	ldr	r3, [sp, #28]
 8007fb4:	469b      	mov	fp, r3
 8007fb6:	9b06      	ldr	r3, [sp, #24]
 8007fb8:	1b9a      	subs	r2, r3, r6
 8007fba:	d004      	beq.n	8007fc6 <_dtoa_r+0x7ce>
 8007fbc:	4659      	mov	r1, fp
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f001 f9c2 	bl	8009348 <__pow5mult>
 8007fc4:	4683      	mov	fp, r0
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f001 f901 	bl	80091d0 <__i2b>
 8007fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	dd7c      	ble.n	80080d0 <_dtoa_r+0x8d8>
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	4601      	mov	r1, r0
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 f9b4 	bl	8009348 <__pow5mult>
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	dd76      	ble.n	80080d6 <_dtoa_r+0x8de>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9306      	str	r3, [sp, #24]
 8007fec:	6933      	ldr	r3, [r6, #16]
 8007fee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ff2:	6918      	ldr	r0, [r3, #16]
 8007ff4:	f001 f89c 	bl	8009130 <__hi0bits>
 8007ff8:	f1c0 0020 	rsb	r0, r0, #32
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	4418      	add	r0, r3
 8008000:	f010 001f 	ands.w	r0, r0, #31
 8008004:	f000 8086 	beq.w	8008114 <_dtoa_r+0x91c>
 8008008:	f1c0 0320 	rsb	r3, r0, #32
 800800c:	2b04      	cmp	r3, #4
 800800e:	dd7f      	ble.n	8008110 <_dtoa_r+0x918>
 8008010:	f1c0 001c 	rsb	r0, r0, #28
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	4403      	add	r3, r0
 8008018:	4480      	add	r8, r0
 800801a:	4405      	add	r5, r0
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	dd05      	ble.n	8008030 <_dtoa_r+0x838>
 8008024:	4659      	mov	r1, fp
 8008026:	4642      	mov	r2, r8
 8008028:	4620      	mov	r0, r4
 800802a:	f001 f9e7 	bl	80093fc <__lshift>
 800802e:	4683      	mov	fp, r0
 8008030:	9b04      	ldr	r3, [sp, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	dd05      	ble.n	8008042 <_dtoa_r+0x84a>
 8008036:	4631      	mov	r1, r6
 8008038:	461a      	mov	r2, r3
 800803a:	4620      	mov	r0, r4
 800803c:	f001 f9de 	bl	80093fc <__lshift>
 8008040:	4606      	mov	r6, r0
 8008042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d069      	beq.n	800811c <_dtoa_r+0x924>
 8008048:	4631      	mov	r1, r6
 800804a:	4658      	mov	r0, fp
 800804c:	f001 fa42 	bl	80094d4 <__mcmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	da63      	bge.n	800811c <_dtoa_r+0x924>
 8008054:	2300      	movs	r3, #0
 8008056:	4659      	mov	r1, fp
 8008058:	220a      	movs	r2, #10
 800805a:	4620      	mov	r0, r4
 800805c:	f000 ffd4 	bl	8009008 <__multadd>
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008066:	4683      	mov	fp, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 818f 	beq.w	800838c <_dtoa_r+0xb94>
 800806e:	4639      	mov	r1, r7
 8008070:	2300      	movs	r3, #0
 8008072:	220a      	movs	r2, #10
 8008074:	4620      	mov	r0, r4
 8008076:	f000 ffc7 	bl	8009008 <__multadd>
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	4607      	mov	r7, r0
 8008080:	f300 808e 	bgt.w	80081a0 <_dtoa_r+0x9a8>
 8008084:	9b05      	ldr	r3, [sp, #20]
 8008086:	2b02      	cmp	r3, #2
 8008088:	dc50      	bgt.n	800812c <_dtoa_r+0x934>
 800808a:	e089      	b.n	80081a0 <_dtoa_r+0x9a8>
 800808c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800808e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008092:	e75d      	b.n	8007f50 <_dtoa_r+0x758>
 8008094:	9b01      	ldr	r3, [sp, #4]
 8008096:	1e5e      	subs	r6, r3, #1
 8008098:	9b06      	ldr	r3, [sp, #24]
 800809a:	42b3      	cmp	r3, r6
 800809c:	bfbf      	itttt	lt
 800809e:	9b06      	ldrlt	r3, [sp, #24]
 80080a0:	9606      	strlt	r6, [sp, #24]
 80080a2:	1af2      	sublt	r2, r6, r3
 80080a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80080a6:	bfb6      	itet	lt
 80080a8:	189b      	addlt	r3, r3, r2
 80080aa:	1b9e      	subge	r6, r3, r6
 80080ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	bfb8      	it	lt
 80080b2:	2600      	movlt	r6, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfb5      	itete	lt
 80080b8:	eba8 0503 	sublt.w	r5, r8, r3
 80080bc:	9b01      	ldrge	r3, [sp, #4]
 80080be:	2300      	movlt	r3, #0
 80080c0:	4645      	movge	r5, r8
 80080c2:	e747      	b.n	8007f54 <_dtoa_r+0x75c>
 80080c4:	9e06      	ldr	r6, [sp, #24]
 80080c6:	9f08      	ldr	r7, [sp, #32]
 80080c8:	4645      	mov	r5, r8
 80080ca:	e74c      	b.n	8007f66 <_dtoa_r+0x76e>
 80080cc:	9a06      	ldr	r2, [sp, #24]
 80080ce:	e775      	b.n	8007fbc <_dtoa_r+0x7c4>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	dc18      	bgt.n	8008108 <_dtoa_r+0x910>
 80080d6:	9b02      	ldr	r3, [sp, #8]
 80080d8:	b9b3      	cbnz	r3, 8008108 <_dtoa_r+0x910>
 80080da:	9b03      	ldr	r3, [sp, #12]
 80080dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080e0:	b9a3      	cbnz	r3, 800810c <_dtoa_r+0x914>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080e8:	0d1b      	lsrs	r3, r3, #20
 80080ea:	051b      	lsls	r3, r3, #20
 80080ec:	b12b      	cbz	r3, 80080fa <_dtoa_r+0x902>
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	f108 0801 	add.w	r8, r8, #1
 80080f8:	2301      	movs	r3, #1
 80080fa:	9306      	str	r3, [sp, #24]
 80080fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f47f af74 	bne.w	8007fec <_dtoa_r+0x7f4>
 8008104:	2001      	movs	r0, #1
 8008106:	e779      	b.n	8007ffc <_dtoa_r+0x804>
 8008108:	2300      	movs	r3, #0
 800810a:	e7f6      	b.n	80080fa <_dtoa_r+0x902>
 800810c:	9b02      	ldr	r3, [sp, #8]
 800810e:	e7f4      	b.n	80080fa <_dtoa_r+0x902>
 8008110:	d085      	beq.n	800801e <_dtoa_r+0x826>
 8008112:	4618      	mov	r0, r3
 8008114:	301c      	adds	r0, #28
 8008116:	e77d      	b.n	8008014 <_dtoa_r+0x81c>
 8008118:	40240000 	.word	0x40240000
 800811c:	9b01      	ldr	r3, [sp, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	dc38      	bgt.n	8008194 <_dtoa_r+0x99c>
 8008122:	9b05      	ldr	r3, [sp, #20]
 8008124:	2b02      	cmp	r3, #2
 8008126:	dd35      	ble.n	8008194 <_dtoa_r+0x99c>
 8008128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	d10d      	bne.n	800814e <_dtoa_r+0x956>
 8008132:	4631      	mov	r1, r6
 8008134:	464b      	mov	r3, r9
 8008136:	2205      	movs	r2, #5
 8008138:	4620      	mov	r0, r4
 800813a:	f000 ff65 	bl	8009008 <__multadd>
 800813e:	4601      	mov	r1, r0
 8008140:	4606      	mov	r6, r0
 8008142:	4658      	mov	r0, fp
 8008144:	f001 f9c6 	bl	80094d4 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	f73f adbd 	bgt.w	8007cc8 <_dtoa_r+0x4d0>
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	9d00      	ldr	r5, [sp, #0]
 8008152:	ea6f 0a03 	mvn.w	sl, r3
 8008156:	f04f 0800 	mov.w	r8, #0
 800815a:	4631      	mov	r1, r6
 800815c:	4620      	mov	r0, r4
 800815e:	f000 ff31 	bl	8008fc4 <_Bfree>
 8008162:	2f00      	cmp	r7, #0
 8008164:	f43f aeb4 	beq.w	8007ed0 <_dtoa_r+0x6d8>
 8008168:	f1b8 0f00 	cmp.w	r8, #0
 800816c:	d005      	beq.n	800817a <_dtoa_r+0x982>
 800816e:	45b8      	cmp	r8, r7
 8008170:	d003      	beq.n	800817a <_dtoa_r+0x982>
 8008172:	4641      	mov	r1, r8
 8008174:	4620      	mov	r0, r4
 8008176:	f000 ff25 	bl	8008fc4 <_Bfree>
 800817a:	4639      	mov	r1, r7
 800817c:	4620      	mov	r0, r4
 800817e:	f000 ff21 	bl	8008fc4 <_Bfree>
 8008182:	e6a5      	b.n	8007ed0 <_dtoa_r+0x6d8>
 8008184:	2600      	movs	r6, #0
 8008186:	4637      	mov	r7, r6
 8008188:	e7e1      	b.n	800814e <_dtoa_r+0x956>
 800818a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800818c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008190:	4637      	mov	r7, r6
 8008192:	e599      	b.n	8007cc8 <_dtoa_r+0x4d0>
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80fd 	beq.w	800839a <_dtoa_r+0xba2>
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	dd05      	ble.n	80081b0 <_dtoa_r+0x9b8>
 80081a4:	4639      	mov	r1, r7
 80081a6:	462a      	mov	r2, r5
 80081a8:	4620      	mov	r0, r4
 80081aa:	f001 f927 	bl	80093fc <__lshift>
 80081ae:	4607      	mov	r7, r0
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d05c      	beq.n	8008270 <_dtoa_r+0xa78>
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fec3 	bl	8008f44 <_Balloc>
 80081be:	4605      	mov	r5, r0
 80081c0:	b928      	cbnz	r0, 80081ce <_dtoa_r+0x9d6>
 80081c2:	4b80      	ldr	r3, [pc, #512]	; (80083c4 <_dtoa_r+0xbcc>)
 80081c4:	4602      	mov	r2, r0
 80081c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081ca:	f7ff bb2e 	b.w	800782a <_dtoa_r+0x32>
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	3202      	adds	r2, #2
 80081d2:	0092      	lsls	r2, r2, #2
 80081d4:	f107 010c 	add.w	r1, r7, #12
 80081d8:	300c      	adds	r0, #12
 80081da:	f000 fea5 	bl	8008f28 <memcpy>
 80081de:	2201      	movs	r2, #1
 80081e0:	4629      	mov	r1, r5
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 f90a 	bl	80093fc <__lshift>
 80081e8:	9b00      	ldr	r3, [sp, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	444b      	add	r3, r9
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	9b02      	ldr	r3, [sp, #8]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	46b8      	mov	r8, r7
 80081fc:	9306      	str	r3, [sp, #24]
 80081fe:	4607      	mov	r7, r0
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	4631      	mov	r1, r6
 8008204:	3b01      	subs	r3, #1
 8008206:	4658      	mov	r0, fp
 8008208:	9302      	str	r3, [sp, #8]
 800820a:	f7ff fa69 	bl	80076e0 <quorem>
 800820e:	4603      	mov	r3, r0
 8008210:	3330      	adds	r3, #48	; 0x30
 8008212:	9004      	str	r0, [sp, #16]
 8008214:	4641      	mov	r1, r8
 8008216:	4658      	mov	r0, fp
 8008218:	9308      	str	r3, [sp, #32]
 800821a:	f001 f95b 	bl	80094d4 <__mcmp>
 800821e:	463a      	mov	r2, r7
 8008220:	4681      	mov	r9, r0
 8008222:	4631      	mov	r1, r6
 8008224:	4620      	mov	r0, r4
 8008226:	f001 f971 	bl	800950c <__mdiff>
 800822a:	68c2      	ldr	r2, [r0, #12]
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	4605      	mov	r5, r0
 8008230:	bb02      	cbnz	r2, 8008274 <_dtoa_r+0xa7c>
 8008232:	4601      	mov	r1, r0
 8008234:	4658      	mov	r0, fp
 8008236:	f001 f94d 	bl	80094d4 <__mcmp>
 800823a:	9b08      	ldr	r3, [sp, #32]
 800823c:	4602      	mov	r2, r0
 800823e:	4629      	mov	r1, r5
 8008240:	4620      	mov	r0, r4
 8008242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008246:	f000 febd 	bl	8008fc4 <_Bfree>
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800824e:	9d01      	ldr	r5, [sp, #4]
 8008250:	ea43 0102 	orr.w	r1, r3, r2
 8008254:	9b06      	ldr	r3, [sp, #24]
 8008256:	430b      	orrs	r3, r1
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	d10d      	bne.n	8008278 <_dtoa_r+0xa80>
 800825c:	2b39      	cmp	r3, #57	; 0x39
 800825e:	d029      	beq.n	80082b4 <_dtoa_r+0xabc>
 8008260:	f1b9 0f00 	cmp.w	r9, #0
 8008264:	dd01      	ble.n	800826a <_dtoa_r+0xa72>
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	3331      	adds	r3, #49	; 0x31
 800826a:	9a02      	ldr	r2, [sp, #8]
 800826c:	7013      	strb	r3, [r2, #0]
 800826e:	e774      	b.n	800815a <_dtoa_r+0x962>
 8008270:	4638      	mov	r0, r7
 8008272:	e7b9      	b.n	80081e8 <_dtoa_r+0x9f0>
 8008274:	2201      	movs	r2, #1
 8008276:	e7e2      	b.n	800823e <_dtoa_r+0xa46>
 8008278:	f1b9 0f00 	cmp.w	r9, #0
 800827c:	db06      	blt.n	800828c <_dtoa_r+0xa94>
 800827e:	9905      	ldr	r1, [sp, #20]
 8008280:	ea41 0909 	orr.w	r9, r1, r9
 8008284:	9906      	ldr	r1, [sp, #24]
 8008286:	ea59 0101 	orrs.w	r1, r9, r1
 800828a:	d120      	bne.n	80082ce <_dtoa_r+0xad6>
 800828c:	2a00      	cmp	r2, #0
 800828e:	ddec      	ble.n	800826a <_dtoa_r+0xa72>
 8008290:	4659      	mov	r1, fp
 8008292:	2201      	movs	r2, #1
 8008294:	4620      	mov	r0, r4
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	f001 f8b0 	bl	80093fc <__lshift>
 800829c:	4631      	mov	r1, r6
 800829e:	4683      	mov	fp, r0
 80082a0:	f001 f918 	bl	80094d4 <__mcmp>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	dc02      	bgt.n	80082b0 <_dtoa_r+0xab8>
 80082aa:	d1de      	bne.n	800826a <_dtoa_r+0xa72>
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	d5dc      	bpl.n	800826a <_dtoa_r+0xa72>
 80082b0:	2b39      	cmp	r3, #57	; 0x39
 80082b2:	d1d8      	bne.n	8008266 <_dtoa_r+0xa6e>
 80082b4:	9a02      	ldr	r2, [sp, #8]
 80082b6:	2339      	movs	r3, #57	; 0x39
 80082b8:	7013      	strb	r3, [r2, #0]
 80082ba:	462b      	mov	r3, r5
 80082bc:	461d      	mov	r5, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082c4:	2a39      	cmp	r2, #57	; 0x39
 80082c6:	d050      	beq.n	800836a <_dtoa_r+0xb72>
 80082c8:	3201      	adds	r2, #1
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	e745      	b.n	800815a <_dtoa_r+0x962>
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	dd03      	ble.n	80082da <_dtoa_r+0xae2>
 80082d2:	2b39      	cmp	r3, #57	; 0x39
 80082d4:	d0ee      	beq.n	80082b4 <_dtoa_r+0xabc>
 80082d6:	3301      	adds	r3, #1
 80082d8:	e7c7      	b.n	800826a <_dtoa_r+0xa72>
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	9907      	ldr	r1, [sp, #28]
 80082de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80082e2:	428a      	cmp	r2, r1
 80082e4:	d02a      	beq.n	800833c <_dtoa_r+0xb44>
 80082e6:	4659      	mov	r1, fp
 80082e8:	2300      	movs	r3, #0
 80082ea:	220a      	movs	r2, #10
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fe8b 	bl	8009008 <__multadd>
 80082f2:	45b8      	cmp	r8, r7
 80082f4:	4683      	mov	fp, r0
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	f04f 020a 	mov.w	r2, #10
 80082fe:	4641      	mov	r1, r8
 8008300:	4620      	mov	r0, r4
 8008302:	d107      	bne.n	8008314 <_dtoa_r+0xb1c>
 8008304:	f000 fe80 	bl	8009008 <__multadd>
 8008308:	4680      	mov	r8, r0
 800830a:	4607      	mov	r7, r0
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	3301      	adds	r3, #1
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	e775      	b.n	8008200 <_dtoa_r+0xa08>
 8008314:	f000 fe78 	bl	8009008 <__multadd>
 8008318:	4639      	mov	r1, r7
 800831a:	4680      	mov	r8, r0
 800831c:	2300      	movs	r3, #0
 800831e:	220a      	movs	r2, #10
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fe71 	bl	8009008 <__multadd>
 8008326:	4607      	mov	r7, r0
 8008328:	e7f0      	b.n	800830c <_dtoa_r+0xb14>
 800832a:	f1b9 0f00 	cmp.w	r9, #0
 800832e:	9a00      	ldr	r2, [sp, #0]
 8008330:	bfcc      	ite	gt
 8008332:	464d      	movgt	r5, r9
 8008334:	2501      	movle	r5, #1
 8008336:	4415      	add	r5, r2
 8008338:	f04f 0800 	mov.w	r8, #0
 800833c:	4659      	mov	r1, fp
 800833e:	2201      	movs	r2, #1
 8008340:	4620      	mov	r0, r4
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	f001 f85a 	bl	80093fc <__lshift>
 8008348:	4631      	mov	r1, r6
 800834a:	4683      	mov	fp, r0
 800834c:	f001 f8c2 	bl	80094d4 <__mcmp>
 8008350:	2800      	cmp	r0, #0
 8008352:	dcb2      	bgt.n	80082ba <_dtoa_r+0xac2>
 8008354:	d102      	bne.n	800835c <_dtoa_r+0xb64>
 8008356:	9b01      	ldr	r3, [sp, #4]
 8008358:	07db      	lsls	r3, r3, #31
 800835a:	d4ae      	bmi.n	80082ba <_dtoa_r+0xac2>
 800835c:	462b      	mov	r3, r5
 800835e:	461d      	mov	r5, r3
 8008360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008364:	2a30      	cmp	r2, #48	; 0x30
 8008366:	d0fa      	beq.n	800835e <_dtoa_r+0xb66>
 8008368:	e6f7      	b.n	800815a <_dtoa_r+0x962>
 800836a:	9a00      	ldr	r2, [sp, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d1a5      	bne.n	80082bc <_dtoa_r+0xac4>
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	2331      	movs	r3, #49	; 0x31
 8008376:	e779      	b.n	800826c <_dtoa_r+0xa74>
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <_dtoa_r+0xbd0>)
 800837a:	f7ff baaf 	b.w	80078dc <_dtoa_r+0xe4>
 800837e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008380:	2b00      	cmp	r3, #0
 8008382:	f47f aa86 	bne.w	8007892 <_dtoa_r+0x9a>
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <_dtoa_r+0xbd4>)
 8008388:	f7ff baa8 	b.w	80078dc <_dtoa_r+0xe4>
 800838c:	f1b9 0f00 	cmp.w	r9, #0
 8008390:	dc03      	bgt.n	800839a <_dtoa_r+0xba2>
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	2b02      	cmp	r3, #2
 8008396:	f73f aec9 	bgt.w	800812c <_dtoa_r+0x934>
 800839a:	9d00      	ldr	r5, [sp, #0]
 800839c:	4631      	mov	r1, r6
 800839e:	4658      	mov	r0, fp
 80083a0:	f7ff f99e 	bl	80076e0 <quorem>
 80083a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083a8:	f805 3b01 	strb.w	r3, [r5], #1
 80083ac:	9a00      	ldr	r2, [sp, #0]
 80083ae:	1aaa      	subs	r2, r5, r2
 80083b0:	4591      	cmp	r9, r2
 80083b2:	ddba      	ble.n	800832a <_dtoa_r+0xb32>
 80083b4:	4659      	mov	r1, fp
 80083b6:	2300      	movs	r3, #0
 80083b8:	220a      	movs	r2, #10
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 fe24 	bl	8009008 <__multadd>
 80083c0:	4683      	mov	fp, r0
 80083c2:	e7eb      	b.n	800839c <_dtoa_r+0xba4>
 80083c4:	0800b09c 	.word	0x0800b09c
 80083c8:	0800ae9c 	.word	0x0800ae9c
 80083cc:	0800b019 	.word	0x0800b019

080083d0 <__sflush_r>:
 80083d0:	898a      	ldrh	r2, [r1, #12]
 80083d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d6:	4605      	mov	r5, r0
 80083d8:	0710      	lsls	r0, r2, #28
 80083da:	460c      	mov	r4, r1
 80083dc:	d458      	bmi.n	8008490 <__sflush_r+0xc0>
 80083de:	684b      	ldr	r3, [r1, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc05      	bgt.n	80083f0 <__sflush_r+0x20>
 80083e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dc02      	bgt.n	80083f0 <__sflush_r+0x20>
 80083ea:	2000      	movs	r0, #0
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083f2:	2e00      	cmp	r6, #0
 80083f4:	d0f9      	beq.n	80083ea <__sflush_r+0x1a>
 80083f6:	2300      	movs	r3, #0
 80083f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083fc:	682f      	ldr	r7, [r5, #0]
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	d032      	beq.n	8008468 <__sflush_r+0x98>
 8008402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	075a      	lsls	r2, r3, #29
 8008408:	d505      	bpl.n	8008416 <__sflush_r+0x46>
 800840a:	6863      	ldr	r3, [r4, #4]
 800840c:	1ac0      	subs	r0, r0, r3
 800840e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008410:	b10b      	cbz	r3, 8008416 <__sflush_r+0x46>
 8008412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008414:	1ac0      	subs	r0, r0, r3
 8008416:	2300      	movs	r3, #0
 8008418:	4602      	mov	r2, r0
 800841a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800841c:	6a21      	ldr	r1, [r4, #32]
 800841e:	4628      	mov	r0, r5
 8008420:	47b0      	blx	r6
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	d106      	bne.n	8008436 <__sflush_r+0x66>
 8008428:	6829      	ldr	r1, [r5, #0]
 800842a:	291d      	cmp	r1, #29
 800842c:	d82c      	bhi.n	8008488 <__sflush_r+0xb8>
 800842e:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <__sflush_r+0x108>)
 8008430:	40ca      	lsrs	r2, r1
 8008432:	07d6      	lsls	r6, r2, #31
 8008434:	d528      	bpl.n	8008488 <__sflush_r+0xb8>
 8008436:	2200      	movs	r2, #0
 8008438:	6062      	str	r2, [r4, #4]
 800843a:	04d9      	lsls	r1, r3, #19
 800843c:	6922      	ldr	r2, [r4, #16]
 800843e:	6022      	str	r2, [r4, #0]
 8008440:	d504      	bpl.n	800844c <__sflush_r+0x7c>
 8008442:	1c42      	adds	r2, r0, #1
 8008444:	d101      	bne.n	800844a <__sflush_r+0x7a>
 8008446:	682b      	ldr	r3, [r5, #0]
 8008448:	b903      	cbnz	r3, 800844c <__sflush_r+0x7c>
 800844a:	6560      	str	r0, [r4, #84]	; 0x54
 800844c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800844e:	602f      	str	r7, [r5, #0]
 8008450:	2900      	cmp	r1, #0
 8008452:	d0ca      	beq.n	80083ea <__sflush_r+0x1a>
 8008454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008458:	4299      	cmp	r1, r3
 800845a:	d002      	beq.n	8008462 <__sflush_r+0x92>
 800845c:	4628      	mov	r0, r5
 800845e:	f001 fa3b 	bl	80098d8 <_free_r>
 8008462:	2000      	movs	r0, #0
 8008464:	6360      	str	r0, [r4, #52]	; 0x34
 8008466:	e7c1      	b.n	80083ec <__sflush_r+0x1c>
 8008468:	6a21      	ldr	r1, [r4, #32]
 800846a:	2301      	movs	r3, #1
 800846c:	4628      	mov	r0, r5
 800846e:	47b0      	blx	r6
 8008470:	1c41      	adds	r1, r0, #1
 8008472:	d1c7      	bne.n	8008404 <__sflush_r+0x34>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0c4      	beq.n	8008404 <__sflush_r+0x34>
 800847a:	2b1d      	cmp	r3, #29
 800847c:	d001      	beq.n	8008482 <__sflush_r+0xb2>
 800847e:	2b16      	cmp	r3, #22
 8008480:	d101      	bne.n	8008486 <__sflush_r+0xb6>
 8008482:	602f      	str	r7, [r5, #0]
 8008484:	e7b1      	b.n	80083ea <__sflush_r+0x1a>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	e7ad      	b.n	80083ec <__sflush_r+0x1c>
 8008490:	690f      	ldr	r7, [r1, #16]
 8008492:	2f00      	cmp	r7, #0
 8008494:	d0a9      	beq.n	80083ea <__sflush_r+0x1a>
 8008496:	0793      	lsls	r3, r2, #30
 8008498:	680e      	ldr	r6, [r1, #0]
 800849a:	bf08      	it	eq
 800849c:	694b      	ldreq	r3, [r1, #20]
 800849e:	600f      	str	r7, [r1, #0]
 80084a0:	bf18      	it	ne
 80084a2:	2300      	movne	r3, #0
 80084a4:	eba6 0807 	sub.w	r8, r6, r7
 80084a8:	608b      	str	r3, [r1, #8]
 80084aa:	f1b8 0f00 	cmp.w	r8, #0
 80084ae:	dd9c      	ble.n	80083ea <__sflush_r+0x1a>
 80084b0:	6a21      	ldr	r1, [r4, #32]
 80084b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084b4:	4643      	mov	r3, r8
 80084b6:	463a      	mov	r2, r7
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b0      	blx	r6
 80084bc:	2800      	cmp	r0, #0
 80084be:	dc06      	bgt.n	80084ce <__sflush_r+0xfe>
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
 80084cc:	e78e      	b.n	80083ec <__sflush_r+0x1c>
 80084ce:	4407      	add	r7, r0
 80084d0:	eba8 0800 	sub.w	r8, r8, r0
 80084d4:	e7e9      	b.n	80084aa <__sflush_r+0xda>
 80084d6:	bf00      	nop
 80084d8:	20400001 	.word	0x20400001

080084dc <_fflush_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	690b      	ldr	r3, [r1, #16]
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b913      	cbnz	r3, 80084ec <_fflush_r+0x10>
 80084e6:	2500      	movs	r5, #0
 80084e8:	4628      	mov	r0, r5
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	b118      	cbz	r0, 80084f6 <_fflush_r+0x1a>
 80084ee:	6983      	ldr	r3, [r0, #24]
 80084f0:	b90b      	cbnz	r3, 80084f6 <_fflush_r+0x1a>
 80084f2:	f000 f887 	bl	8008604 <__sinit>
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <_fflush_r+0x6c>)
 80084f8:	429c      	cmp	r4, r3
 80084fa:	d11b      	bne.n	8008534 <_fflush_r+0x58>
 80084fc:	686c      	ldr	r4, [r5, #4]
 80084fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0ef      	beq.n	80084e6 <_fflush_r+0xa>
 8008506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008508:	07d0      	lsls	r0, r2, #31
 800850a:	d404      	bmi.n	8008516 <_fflush_r+0x3a>
 800850c:	0599      	lsls	r1, r3, #22
 800850e:	d402      	bmi.n	8008516 <_fflush_r+0x3a>
 8008510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008512:	f000 fc88 	bl	8008e26 <__retarget_lock_acquire_recursive>
 8008516:	4628      	mov	r0, r5
 8008518:	4621      	mov	r1, r4
 800851a:	f7ff ff59 	bl	80083d0 <__sflush_r>
 800851e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008520:	07da      	lsls	r2, r3, #31
 8008522:	4605      	mov	r5, r0
 8008524:	d4e0      	bmi.n	80084e8 <_fflush_r+0xc>
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	059b      	lsls	r3, r3, #22
 800852a:	d4dd      	bmi.n	80084e8 <_fflush_r+0xc>
 800852c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800852e:	f000 fc7b 	bl	8008e28 <__retarget_lock_release_recursive>
 8008532:	e7d9      	b.n	80084e8 <_fflush_r+0xc>
 8008534:	4b05      	ldr	r3, [pc, #20]	; (800854c <_fflush_r+0x70>)
 8008536:	429c      	cmp	r4, r3
 8008538:	d101      	bne.n	800853e <_fflush_r+0x62>
 800853a:	68ac      	ldr	r4, [r5, #8]
 800853c:	e7df      	b.n	80084fe <_fflush_r+0x22>
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <_fflush_r+0x74>)
 8008540:	429c      	cmp	r4, r3
 8008542:	bf08      	it	eq
 8008544:	68ec      	ldreq	r4, [r5, #12]
 8008546:	e7da      	b.n	80084fe <_fflush_r+0x22>
 8008548:	0800b0d0 	.word	0x0800b0d0
 800854c:	0800b0f0 	.word	0x0800b0f0
 8008550:	0800b0b0 	.word	0x0800b0b0

08008554 <std>:
 8008554:	2300      	movs	r3, #0
 8008556:	b510      	push	{r4, lr}
 8008558:	4604      	mov	r4, r0
 800855a:	e9c0 3300 	strd	r3, r3, [r0]
 800855e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008562:	6083      	str	r3, [r0, #8]
 8008564:	8181      	strh	r1, [r0, #12]
 8008566:	6643      	str	r3, [r0, #100]	; 0x64
 8008568:	81c2      	strh	r2, [r0, #14]
 800856a:	6183      	str	r3, [r0, #24]
 800856c:	4619      	mov	r1, r3
 800856e:	2208      	movs	r2, #8
 8008570:	305c      	adds	r0, #92	; 0x5c
 8008572:	f7fd fa01 	bl	8005978 <memset>
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <std+0x38>)
 8008578:	6263      	str	r3, [r4, #36]	; 0x24
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <std+0x3c>)
 800857c:	62a3      	str	r3, [r4, #40]	; 0x28
 800857e:	4b05      	ldr	r3, [pc, #20]	; (8008594 <std+0x40>)
 8008580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008582:	4b05      	ldr	r3, [pc, #20]	; (8008598 <std+0x44>)
 8008584:	6224      	str	r4, [r4, #32]
 8008586:	6323      	str	r3, [r4, #48]	; 0x30
 8008588:	bd10      	pop	{r4, pc}
 800858a:	bf00      	nop
 800858c:	08009fc9 	.word	0x08009fc9
 8008590:	08009feb 	.word	0x08009feb
 8008594:	0800a023 	.word	0x0800a023
 8008598:	0800a047 	.word	0x0800a047

0800859c <_cleanup_r>:
 800859c:	4901      	ldr	r1, [pc, #4]	; (80085a4 <_cleanup_r+0x8>)
 800859e:	f000 b8af 	b.w	8008700 <_fwalk_reent>
 80085a2:	bf00      	nop
 80085a4:	080084dd 	.word	0x080084dd

080085a8 <__sfmoreglue>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	1e4a      	subs	r2, r1, #1
 80085ac:	2568      	movs	r5, #104	; 0x68
 80085ae:	4355      	muls	r5, r2
 80085b0:	460e      	mov	r6, r1
 80085b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085b6:	f001 f9df 	bl	8009978 <_malloc_r>
 80085ba:	4604      	mov	r4, r0
 80085bc:	b140      	cbz	r0, 80085d0 <__sfmoreglue+0x28>
 80085be:	2100      	movs	r1, #0
 80085c0:	e9c0 1600 	strd	r1, r6, [r0]
 80085c4:	300c      	adds	r0, #12
 80085c6:	60a0      	str	r0, [r4, #8]
 80085c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085cc:	f7fd f9d4 	bl	8005978 <memset>
 80085d0:	4620      	mov	r0, r4
 80085d2:	bd70      	pop	{r4, r5, r6, pc}

080085d4 <__sfp_lock_acquire>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__sfp_lock_acquire+0x8>)
 80085d6:	f000 bc26 	b.w	8008e26 <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	20000394 	.word	0x20000394

080085e0 <__sfp_lock_release>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__sfp_lock_release+0x8>)
 80085e2:	f000 bc21 	b.w	8008e28 <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	20000394 	.word	0x20000394

080085ec <__sinit_lock_acquire>:
 80085ec:	4801      	ldr	r0, [pc, #4]	; (80085f4 <__sinit_lock_acquire+0x8>)
 80085ee:	f000 bc1a 	b.w	8008e26 <__retarget_lock_acquire_recursive>
 80085f2:	bf00      	nop
 80085f4:	2000038f 	.word	0x2000038f

080085f8 <__sinit_lock_release>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sinit_lock_release+0x8>)
 80085fa:	f000 bc15 	b.w	8008e28 <__retarget_lock_release_recursive>
 80085fe:	bf00      	nop
 8008600:	2000038f 	.word	0x2000038f

08008604 <__sinit>:
 8008604:	b510      	push	{r4, lr}
 8008606:	4604      	mov	r4, r0
 8008608:	f7ff fff0 	bl	80085ec <__sinit_lock_acquire>
 800860c:	69a3      	ldr	r3, [r4, #24]
 800860e:	b11b      	cbz	r3, 8008618 <__sinit+0x14>
 8008610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008614:	f7ff bff0 	b.w	80085f8 <__sinit_lock_release>
 8008618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800861c:	6523      	str	r3, [r4, #80]	; 0x50
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <__sinit+0x68>)
 8008620:	4a13      	ldr	r2, [pc, #76]	; (8008670 <__sinit+0x6c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	62a2      	str	r2, [r4, #40]	; 0x28
 8008626:	42a3      	cmp	r3, r4
 8008628:	bf04      	itt	eq
 800862a:	2301      	moveq	r3, #1
 800862c:	61a3      	streq	r3, [r4, #24]
 800862e:	4620      	mov	r0, r4
 8008630:	f000 f820 	bl	8008674 <__sfp>
 8008634:	6060      	str	r0, [r4, #4]
 8008636:	4620      	mov	r0, r4
 8008638:	f000 f81c 	bl	8008674 <__sfp>
 800863c:	60a0      	str	r0, [r4, #8]
 800863e:	4620      	mov	r0, r4
 8008640:	f000 f818 	bl	8008674 <__sfp>
 8008644:	2200      	movs	r2, #0
 8008646:	60e0      	str	r0, [r4, #12]
 8008648:	2104      	movs	r1, #4
 800864a:	6860      	ldr	r0, [r4, #4]
 800864c:	f7ff ff82 	bl	8008554 <std>
 8008650:	68a0      	ldr	r0, [r4, #8]
 8008652:	2201      	movs	r2, #1
 8008654:	2109      	movs	r1, #9
 8008656:	f7ff ff7d 	bl	8008554 <std>
 800865a:	68e0      	ldr	r0, [r4, #12]
 800865c:	2202      	movs	r2, #2
 800865e:	2112      	movs	r1, #18
 8008660:	f7ff ff78 	bl	8008554 <std>
 8008664:	2301      	movs	r3, #1
 8008666:	61a3      	str	r3, [r4, #24]
 8008668:	e7d2      	b.n	8008610 <__sinit+0xc>
 800866a:	bf00      	nop
 800866c:	0800ae88 	.word	0x0800ae88
 8008670:	0800859d 	.word	0x0800859d

08008674 <__sfp>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	4607      	mov	r7, r0
 8008678:	f7ff ffac 	bl	80085d4 <__sfp_lock_acquire>
 800867c:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <__sfp+0x84>)
 800867e:	681e      	ldr	r6, [r3, #0]
 8008680:	69b3      	ldr	r3, [r6, #24]
 8008682:	b913      	cbnz	r3, 800868a <__sfp+0x16>
 8008684:	4630      	mov	r0, r6
 8008686:	f7ff ffbd 	bl	8008604 <__sinit>
 800868a:	3648      	adds	r6, #72	; 0x48
 800868c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008690:	3b01      	subs	r3, #1
 8008692:	d503      	bpl.n	800869c <__sfp+0x28>
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	b30b      	cbz	r3, 80086dc <__sfp+0x68>
 8008698:	6836      	ldr	r6, [r6, #0]
 800869a:	e7f7      	b.n	800868c <__sfp+0x18>
 800869c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a0:	b9d5      	cbnz	r5, 80086d8 <__sfp+0x64>
 80086a2:	4b16      	ldr	r3, [pc, #88]	; (80086fc <__sfp+0x88>)
 80086a4:	60e3      	str	r3, [r4, #12]
 80086a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086aa:	6665      	str	r5, [r4, #100]	; 0x64
 80086ac:	f000 fbba 	bl	8008e24 <__retarget_lock_init_recursive>
 80086b0:	f7ff ff96 	bl	80085e0 <__sfp_lock_release>
 80086b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086bc:	6025      	str	r5, [r4, #0]
 80086be:	61a5      	str	r5, [r4, #24]
 80086c0:	2208      	movs	r2, #8
 80086c2:	4629      	mov	r1, r5
 80086c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086c8:	f7fd f956 	bl	8005978 <memset>
 80086cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086d4:	4620      	mov	r0, r4
 80086d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d8:	3468      	adds	r4, #104	; 0x68
 80086da:	e7d9      	b.n	8008690 <__sfp+0x1c>
 80086dc:	2104      	movs	r1, #4
 80086de:	4638      	mov	r0, r7
 80086e0:	f7ff ff62 	bl	80085a8 <__sfmoreglue>
 80086e4:	4604      	mov	r4, r0
 80086e6:	6030      	str	r0, [r6, #0]
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1d5      	bne.n	8008698 <__sfp+0x24>
 80086ec:	f7ff ff78 	bl	80085e0 <__sfp_lock_release>
 80086f0:	230c      	movs	r3, #12
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	e7ee      	b.n	80086d4 <__sfp+0x60>
 80086f6:	bf00      	nop
 80086f8:	0800ae88 	.word	0x0800ae88
 80086fc:	ffff0001 	.word	0xffff0001

08008700 <_fwalk_reent>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	4606      	mov	r6, r0
 8008706:	4688      	mov	r8, r1
 8008708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800870c:	2700      	movs	r7, #0
 800870e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008712:	f1b9 0901 	subs.w	r9, r9, #1
 8008716:	d505      	bpl.n	8008724 <_fwalk_reent+0x24>
 8008718:	6824      	ldr	r4, [r4, #0]
 800871a:	2c00      	cmp	r4, #0
 800871c:	d1f7      	bne.n	800870e <_fwalk_reent+0xe>
 800871e:	4638      	mov	r0, r7
 8008720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008724:	89ab      	ldrh	r3, [r5, #12]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d907      	bls.n	800873a <_fwalk_reent+0x3a>
 800872a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800872e:	3301      	adds	r3, #1
 8008730:	d003      	beq.n	800873a <_fwalk_reent+0x3a>
 8008732:	4629      	mov	r1, r5
 8008734:	4630      	mov	r0, r6
 8008736:	47c0      	blx	r8
 8008738:	4307      	orrs	r7, r0
 800873a:	3568      	adds	r5, #104	; 0x68
 800873c:	e7e9      	b.n	8008712 <_fwalk_reent+0x12>

0800873e <rshift>:
 800873e:	6903      	ldr	r3, [r0, #16]
 8008740:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008748:	ea4f 1261 	mov.w	r2, r1, asr #5
 800874c:	f100 0414 	add.w	r4, r0, #20
 8008750:	dd45      	ble.n	80087de <rshift+0xa0>
 8008752:	f011 011f 	ands.w	r1, r1, #31
 8008756:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800875a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800875e:	d10c      	bne.n	800877a <rshift+0x3c>
 8008760:	f100 0710 	add.w	r7, r0, #16
 8008764:	4629      	mov	r1, r5
 8008766:	42b1      	cmp	r1, r6
 8008768:	d334      	bcc.n	80087d4 <rshift+0x96>
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	1eea      	subs	r2, r5, #3
 8008770:	4296      	cmp	r6, r2
 8008772:	bf38      	it	cc
 8008774:	2300      	movcc	r3, #0
 8008776:	4423      	add	r3, r4
 8008778:	e015      	b.n	80087a6 <rshift+0x68>
 800877a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800877e:	f1c1 0820 	rsb	r8, r1, #32
 8008782:	40cf      	lsrs	r7, r1
 8008784:	f105 0e04 	add.w	lr, r5, #4
 8008788:	46a1      	mov	r9, r4
 800878a:	4576      	cmp	r6, lr
 800878c:	46f4      	mov	ip, lr
 800878e:	d815      	bhi.n	80087bc <rshift+0x7e>
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	009a      	lsls	r2, r3, #2
 8008794:	3a04      	subs	r2, #4
 8008796:	3501      	adds	r5, #1
 8008798:	42ae      	cmp	r6, r5
 800879a:	bf38      	it	cc
 800879c:	2200      	movcc	r2, #0
 800879e:	18a3      	adds	r3, r4, r2
 80087a0:	50a7      	str	r7, [r4, r2]
 80087a2:	b107      	cbz	r7, 80087a6 <rshift+0x68>
 80087a4:	3304      	adds	r3, #4
 80087a6:	1b1a      	subs	r2, r3, r4
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087ae:	bf08      	it	eq
 80087b0:	2300      	moveq	r3, #0
 80087b2:	6102      	str	r2, [r0, #16]
 80087b4:	bf08      	it	eq
 80087b6:	6143      	streq	r3, [r0, #20]
 80087b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087bc:	f8dc c000 	ldr.w	ip, [ip]
 80087c0:	fa0c fc08 	lsl.w	ip, ip, r8
 80087c4:	ea4c 0707 	orr.w	r7, ip, r7
 80087c8:	f849 7b04 	str.w	r7, [r9], #4
 80087cc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087d0:	40cf      	lsrs	r7, r1
 80087d2:	e7da      	b.n	800878a <rshift+0x4c>
 80087d4:	f851 cb04 	ldr.w	ip, [r1], #4
 80087d8:	f847 cf04 	str.w	ip, [r7, #4]!
 80087dc:	e7c3      	b.n	8008766 <rshift+0x28>
 80087de:	4623      	mov	r3, r4
 80087e0:	e7e1      	b.n	80087a6 <rshift+0x68>

080087e2 <__hexdig_fun>:
 80087e2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087e6:	2b09      	cmp	r3, #9
 80087e8:	d802      	bhi.n	80087f0 <__hexdig_fun+0xe>
 80087ea:	3820      	subs	r0, #32
 80087ec:	b2c0      	uxtb	r0, r0
 80087ee:	4770      	bx	lr
 80087f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087f4:	2b05      	cmp	r3, #5
 80087f6:	d801      	bhi.n	80087fc <__hexdig_fun+0x1a>
 80087f8:	3847      	subs	r0, #71	; 0x47
 80087fa:	e7f7      	b.n	80087ec <__hexdig_fun+0xa>
 80087fc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008800:	2b05      	cmp	r3, #5
 8008802:	d801      	bhi.n	8008808 <__hexdig_fun+0x26>
 8008804:	3827      	subs	r0, #39	; 0x27
 8008806:	e7f1      	b.n	80087ec <__hexdig_fun+0xa>
 8008808:	2000      	movs	r0, #0
 800880a:	4770      	bx	lr

0800880c <__gethex>:
 800880c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008810:	ed2d 8b02 	vpush	{d8}
 8008814:	b089      	sub	sp, #36	; 0x24
 8008816:	ee08 0a10 	vmov	s16, r0
 800881a:	9304      	str	r3, [sp, #16]
 800881c:	4bbc      	ldr	r3, [pc, #752]	; (8008b10 <__gethex+0x304>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	4618      	mov	r0, r3
 8008824:	468b      	mov	fp, r1
 8008826:	4690      	mov	r8, r2
 8008828:	f7f7 fcda 	bl	80001e0 <strlen>
 800882c:	9b01      	ldr	r3, [sp, #4]
 800882e:	f8db 2000 	ldr.w	r2, [fp]
 8008832:	4403      	add	r3, r0
 8008834:	4682      	mov	sl, r0
 8008836:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	1c93      	adds	r3, r2, #2
 800883e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008842:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008846:	32fe      	adds	r2, #254	; 0xfe
 8008848:	18d1      	adds	r1, r2, r3
 800884a:	461f      	mov	r7, r3
 800884c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008850:	9100      	str	r1, [sp, #0]
 8008852:	2830      	cmp	r0, #48	; 0x30
 8008854:	d0f8      	beq.n	8008848 <__gethex+0x3c>
 8008856:	f7ff ffc4 	bl	80087e2 <__hexdig_fun>
 800885a:	4604      	mov	r4, r0
 800885c:	2800      	cmp	r0, #0
 800885e:	d13a      	bne.n	80088d6 <__gethex+0xca>
 8008860:	9901      	ldr	r1, [sp, #4]
 8008862:	4652      	mov	r2, sl
 8008864:	4638      	mov	r0, r7
 8008866:	f001 fbf2 	bl	800a04e <strncmp>
 800886a:	4605      	mov	r5, r0
 800886c:	2800      	cmp	r0, #0
 800886e:	d168      	bne.n	8008942 <__gethex+0x136>
 8008870:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008874:	eb07 060a 	add.w	r6, r7, sl
 8008878:	f7ff ffb3 	bl	80087e2 <__hexdig_fun>
 800887c:	2800      	cmp	r0, #0
 800887e:	d062      	beq.n	8008946 <__gethex+0x13a>
 8008880:	4633      	mov	r3, r6
 8008882:	7818      	ldrb	r0, [r3, #0]
 8008884:	2830      	cmp	r0, #48	; 0x30
 8008886:	461f      	mov	r7, r3
 8008888:	f103 0301 	add.w	r3, r3, #1
 800888c:	d0f9      	beq.n	8008882 <__gethex+0x76>
 800888e:	f7ff ffa8 	bl	80087e2 <__hexdig_fun>
 8008892:	2301      	movs	r3, #1
 8008894:	fab0 f480 	clz	r4, r0
 8008898:	0964      	lsrs	r4, r4, #5
 800889a:	4635      	mov	r5, r6
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	463a      	mov	r2, r7
 80088a0:	4616      	mov	r6, r2
 80088a2:	3201      	adds	r2, #1
 80088a4:	7830      	ldrb	r0, [r6, #0]
 80088a6:	f7ff ff9c 	bl	80087e2 <__hexdig_fun>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d1f8      	bne.n	80088a0 <__gethex+0x94>
 80088ae:	9901      	ldr	r1, [sp, #4]
 80088b0:	4652      	mov	r2, sl
 80088b2:	4630      	mov	r0, r6
 80088b4:	f001 fbcb 	bl	800a04e <strncmp>
 80088b8:	b980      	cbnz	r0, 80088dc <__gethex+0xd0>
 80088ba:	b94d      	cbnz	r5, 80088d0 <__gethex+0xc4>
 80088bc:	eb06 050a 	add.w	r5, r6, sl
 80088c0:	462a      	mov	r2, r5
 80088c2:	4616      	mov	r6, r2
 80088c4:	3201      	adds	r2, #1
 80088c6:	7830      	ldrb	r0, [r6, #0]
 80088c8:	f7ff ff8b 	bl	80087e2 <__hexdig_fun>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d1f8      	bne.n	80088c2 <__gethex+0xb6>
 80088d0:	1bad      	subs	r5, r5, r6
 80088d2:	00ad      	lsls	r5, r5, #2
 80088d4:	e004      	b.n	80088e0 <__gethex+0xd4>
 80088d6:	2400      	movs	r4, #0
 80088d8:	4625      	mov	r5, r4
 80088da:	e7e0      	b.n	800889e <__gethex+0x92>
 80088dc:	2d00      	cmp	r5, #0
 80088de:	d1f7      	bne.n	80088d0 <__gethex+0xc4>
 80088e0:	7833      	ldrb	r3, [r6, #0]
 80088e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088e6:	2b50      	cmp	r3, #80	; 0x50
 80088e8:	d13b      	bne.n	8008962 <__gethex+0x156>
 80088ea:	7873      	ldrb	r3, [r6, #1]
 80088ec:	2b2b      	cmp	r3, #43	; 0x2b
 80088ee:	d02c      	beq.n	800894a <__gethex+0x13e>
 80088f0:	2b2d      	cmp	r3, #45	; 0x2d
 80088f2:	d02e      	beq.n	8008952 <__gethex+0x146>
 80088f4:	1c71      	adds	r1, r6, #1
 80088f6:	f04f 0900 	mov.w	r9, #0
 80088fa:	7808      	ldrb	r0, [r1, #0]
 80088fc:	f7ff ff71 	bl	80087e2 <__hexdig_fun>
 8008900:	1e43      	subs	r3, r0, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b18      	cmp	r3, #24
 8008906:	d82c      	bhi.n	8008962 <__gethex+0x156>
 8008908:	f1a0 0210 	sub.w	r2, r0, #16
 800890c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008910:	f7ff ff67 	bl	80087e2 <__hexdig_fun>
 8008914:	1e43      	subs	r3, r0, #1
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b18      	cmp	r3, #24
 800891a:	d91d      	bls.n	8008958 <__gethex+0x14c>
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d000      	beq.n	8008924 <__gethex+0x118>
 8008922:	4252      	negs	r2, r2
 8008924:	4415      	add	r5, r2
 8008926:	f8cb 1000 	str.w	r1, [fp]
 800892a:	b1e4      	cbz	r4, 8008966 <__gethex+0x15a>
 800892c:	9b00      	ldr	r3, [sp, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	bf14      	ite	ne
 8008932:	2700      	movne	r7, #0
 8008934:	2706      	moveq	r7, #6
 8008936:	4638      	mov	r0, r7
 8008938:	b009      	add	sp, #36	; 0x24
 800893a:	ecbd 8b02 	vpop	{d8}
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	463e      	mov	r6, r7
 8008944:	4625      	mov	r5, r4
 8008946:	2401      	movs	r4, #1
 8008948:	e7ca      	b.n	80088e0 <__gethex+0xd4>
 800894a:	f04f 0900 	mov.w	r9, #0
 800894e:	1cb1      	adds	r1, r6, #2
 8008950:	e7d3      	b.n	80088fa <__gethex+0xee>
 8008952:	f04f 0901 	mov.w	r9, #1
 8008956:	e7fa      	b.n	800894e <__gethex+0x142>
 8008958:	230a      	movs	r3, #10
 800895a:	fb03 0202 	mla	r2, r3, r2, r0
 800895e:	3a10      	subs	r2, #16
 8008960:	e7d4      	b.n	800890c <__gethex+0x100>
 8008962:	4631      	mov	r1, r6
 8008964:	e7df      	b.n	8008926 <__gethex+0x11a>
 8008966:	1bf3      	subs	r3, r6, r7
 8008968:	3b01      	subs	r3, #1
 800896a:	4621      	mov	r1, r4
 800896c:	2b07      	cmp	r3, #7
 800896e:	dc0b      	bgt.n	8008988 <__gethex+0x17c>
 8008970:	ee18 0a10 	vmov	r0, s16
 8008974:	f000 fae6 	bl	8008f44 <_Balloc>
 8008978:	4604      	mov	r4, r0
 800897a:	b940      	cbnz	r0, 800898e <__gethex+0x182>
 800897c:	4b65      	ldr	r3, [pc, #404]	; (8008b14 <__gethex+0x308>)
 800897e:	4602      	mov	r2, r0
 8008980:	21de      	movs	r1, #222	; 0xde
 8008982:	4865      	ldr	r0, [pc, #404]	; (8008b18 <__gethex+0x30c>)
 8008984:	f001 fb94 	bl	800a0b0 <__assert_func>
 8008988:	3101      	adds	r1, #1
 800898a:	105b      	asrs	r3, r3, #1
 800898c:	e7ee      	b.n	800896c <__gethex+0x160>
 800898e:	f100 0914 	add.w	r9, r0, #20
 8008992:	f04f 0b00 	mov.w	fp, #0
 8008996:	f1ca 0301 	rsb	r3, sl, #1
 800899a:	f8cd 9008 	str.w	r9, [sp, #8]
 800899e:	f8cd b000 	str.w	fp, [sp]
 80089a2:	9306      	str	r3, [sp, #24]
 80089a4:	42b7      	cmp	r7, r6
 80089a6:	d340      	bcc.n	8008a2a <__gethex+0x21e>
 80089a8:	9802      	ldr	r0, [sp, #8]
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	f840 3b04 	str.w	r3, [r0], #4
 80089b0:	eba0 0009 	sub.w	r0, r0, r9
 80089b4:	1080      	asrs	r0, r0, #2
 80089b6:	0146      	lsls	r6, r0, #5
 80089b8:	6120      	str	r0, [r4, #16]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fbb8 	bl	8009130 <__hi0bits>
 80089c0:	1a30      	subs	r0, r6, r0
 80089c2:	f8d8 6000 	ldr.w	r6, [r8]
 80089c6:	42b0      	cmp	r0, r6
 80089c8:	dd63      	ble.n	8008a92 <__gethex+0x286>
 80089ca:	1b87      	subs	r7, r0, r6
 80089cc:	4639      	mov	r1, r7
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 ff52 	bl	8009878 <__any_on>
 80089d4:	4682      	mov	sl, r0
 80089d6:	b1a8      	cbz	r0, 8008a04 <__gethex+0x1f8>
 80089d8:	1e7b      	subs	r3, r7, #1
 80089da:	1159      	asrs	r1, r3, #5
 80089dc:	f003 021f 	and.w	r2, r3, #31
 80089e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80089e4:	f04f 0a01 	mov.w	sl, #1
 80089e8:	fa0a f202 	lsl.w	r2, sl, r2
 80089ec:	420a      	tst	r2, r1
 80089ee:	d009      	beq.n	8008a04 <__gethex+0x1f8>
 80089f0:	4553      	cmp	r3, sl
 80089f2:	dd05      	ble.n	8008a00 <__gethex+0x1f4>
 80089f4:	1eb9      	subs	r1, r7, #2
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 ff3e 	bl	8009878 <__any_on>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d145      	bne.n	8008a8c <__gethex+0x280>
 8008a00:	f04f 0a02 	mov.w	sl, #2
 8008a04:	4639      	mov	r1, r7
 8008a06:	4620      	mov	r0, r4
 8008a08:	f7ff fe99 	bl	800873e <rshift>
 8008a0c:	443d      	add	r5, r7
 8008a0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a12:	42ab      	cmp	r3, r5
 8008a14:	da4c      	bge.n	8008ab0 <__gethex+0x2a4>
 8008a16:	ee18 0a10 	vmov	r0, s16
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	f000 fad2 	bl	8008fc4 <_Bfree>
 8008a20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a22:	2300      	movs	r3, #0
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	27a3      	movs	r7, #163	; 0xa3
 8008a28:	e785      	b.n	8008936 <__gethex+0x12a>
 8008a2a:	1e73      	subs	r3, r6, #1
 8008a2c:	9a05      	ldr	r2, [sp, #20]
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d019      	beq.n	8008a6c <__gethex+0x260>
 8008a38:	f1bb 0f20 	cmp.w	fp, #32
 8008a3c:	d107      	bne.n	8008a4e <__gethex+0x242>
 8008a3e:	9b02      	ldr	r3, [sp, #8]
 8008a40:	9a00      	ldr	r2, [sp, #0]
 8008a42:	f843 2b04 	str.w	r2, [r3], #4
 8008a46:	9302      	str	r3, [sp, #8]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	469b      	mov	fp, r3
 8008a4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008a52:	f7ff fec6 	bl	80087e2 <__hexdig_fun>
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	f000 000f 	and.w	r0, r0, #15
 8008a5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008a60:	4303      	orrs	r3, r0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	f10b 0b04 	add.w	fp, fp, #4
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	e00d      	b.n	8008a88 <__gethex+0x27c>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	9a06      	ldr	r2, [sp, #24]
 8008a70:	4413      	add	r3, r2
 8008a72:	42bb      	cmp	r3, r7
 8008a74:	d3e0      	bcc.n	8008a38 <__gethex+0x22c>
 8008a76:	4618      	mov	r0, r3
 8008a78:	9901      	ldr	r1, [sp, #4]
 8008a7a:	9307      	str	r3, [sp, #28]
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	f001 fae6 	bl	800a04e <strncmp>
 8008a82:	9b07      	ldr	r3, [sp, #28]
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d1d7      	bne.n	8008a38 <__gethex+0x22c>
 8008a88:	461e      	mov	r6, r3
 8008a8a:	e78b      	b.n	80089a4 <__gethex+0x198>
 8008a8c:	f04f 0a03 	mov.w	sl, #3
 8008a90:	e7b8      	b.n	8008a04 <__gethex+0x1f8>
 8008a92:	da0a      	bge.n	8008aaa <__gethex+0x29e>
 8008a94:	1a37      	subs	r7, r6, r0
 8008a96:	4621      	mov	r1, r4
 8008a98:	ee18 0a10 	vmov	r0, s16
 8008a9c:	463a      	mov	r2, r7
 8008a9e:	f000 fcad 	bl	80093fc <__lshift>
 8008aa2:	1bed      	subs	r5, r5, r7
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	f100 0914 	add.w	r9, r0, #20
 8008aaa:	f04f 0a00 	mov.w	sl, #0
 8008aae:	e7ae      	b.n	8008a0e <__gethex+0x202>
 8008ab0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ab4:	42a8      	cmp	r0, r5
 8008ab6:	dd72      	ble.n	8008b9e <__gethex+0x392>
 8008ab8:	1b45      	subs	r5, r0, r5
 8008aba:	42ae      	cmp	r6, r5
 8008abc:	dc36      	bgt.n	8008b2c <__gethex+0x320>
 8008abe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d02a      	beq.n	8008b1c <__gethex+0x310>
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d02c      	beq.n	8008b24 <__gethex+0x318>
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d115      	bne.n	8008afa <__gethex+0x2ee>
 8008ace:	42ae      	cmp	r6, r5
 8008ad0:	d113      	bne.n	8008afa <__gethex+0x2ee>
 8008ad2:	2e01      	cmp	r6, #1
 8008ad4:	d10b      	bne.n	8008aee <__gethex+0x2e2>
 8008ad6:	9a04      	ldr	r2, [sp, #16]
 8008ad8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	2301      	movs	r3, #1
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	f8c9 3000 	str.w	r3, [r9]
 8008ae6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ae8:	2762      	movs	r7, #98	; 0x62
 8008aea:	601c      	str	r4, [r3, #0]
 8008aec:	e723      	b.n	8008936 <__gethex+0x12a>
 8008aee:	1e71      	subs	r1, r6, #1
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fec1 	bl	8009878 <__any_on>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d1ed      	bne.n	8008ad6 <__gethex+0x2ca>
 8008afa:	ee18 0a10 	vmov	r0, s16
 8008afe:	4621      	mov	r1, r4
 8008b00:	f000 fa60 	bl	8008fc4 <_Bfree>
 8008b04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b06:	2300      	movs	r3, #0
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	2750      	movs	r7, #80	; 0x50
 8008b0c:	e713      	b.n	8008936 <__gethex+0x12a>
 8008b0e:	bf00      	nop
 8008b10:	0800b17c 	.word	0x0800b17c
 8008b14:	0800b09c 	.word	0x0800b09c
 8008b18:	0800b110 	.word	0x0800b110
 8008b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1eb      	bne.n	8008afa <__gethex+0x2ee>
 8008b22:	e7d8      	b.n	8008ad6 <__gethex+0x2ca>
 8008b24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1d5      	bne.n	8008ad6 <__gethex+0x2ca>
 8008b2a:	e7e6      	b.n	8008afa <__gethex+0x2ee>
 8008b2c:	1e6f      	subs	r7, r5, #1
 8008b2e:	f1ba 0f00 	cmp.w	sl, #0
 8008b32:	d131      	bne.n	8008b98 <__gethex+0x38c>
 8008b34:	b127      	cbz	r7, 8008b40 <__gethex+0x334>
 8008b36:	4639      	mov	r1, r7
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fe9d 	bl	8009878 <__any_on>
 8008b3e:	4682      	mov	sl, r0
 8008b40:	117b      	asrs	r3, r7, #5
 8008b42:	2101      	movs	r1, #1
 8008b44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008b48:	f007 071f 	and.w	r7, r7, #31
 8008b4c:	fa01 f707 	lsl.w	r7, r1, r7
 8008b50:	421f      	tst	r7, r3
 8008b52:	4629      	mov	r1, r5
 8008b54:	4620      	mov	r0, r4
 8008b56:	bf18      	it	ne
 8008b58:	f04a 0a02 	orrne.w	sl, sl, #2
 8008b5c:	1b76      	subs	r6, r6, r5
 8008b5e:	f7ff fdee 	bl	800873e <rshift>
 8008b62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008b66:	2702      	movs	r7, #2
 8008b68:	f1ba 0f00 	cmp.w	sl, #0
 8008b6c:	d048      	beq.n	8008c00 <__gethex+0x3f4>
 8008b6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d015      	beq.n	8008ba2 <__gethex+0x396>
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d017      	beq.n	8008baa <__gethex+0x39e>
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d109      	bne.n	8008b92 <__gethex+0x386>
 8008b7e:	f01a 0f02 	tst.w	sl, #2
 8008b82:	d006      	beq.n	8008b92 <__gethex+0x386>
 8008b84:	f8d9 0000 	ldr.w	r0, [r9]
 8008b88:	ea4a 0a00 	orr.w	sl, sl, r0
 8008b8c:	f01a 0f01 	tst.w	sl, #1
 8008b90:	d10e      	bne.n	8008bb0 <__gethex+0x3a4>
 8008b92:	f047 0710 	orr.w	r7, r7, #16
 8008b96:	e033      	b.n	8008c00 <__gethex+0x3f4>
 8008b98:	f04f 0a01 	mov.w	sl, #1
 8008b9c:	e7d0      	b.n	8008b40 <__gethex+0x334>
 8008b9e:	2701      	movs	r7, #1
 8008ba0:	e7e2      	b.n	8008b68 <__gethex+0x35c>
 8008ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ba4:	f1c3 0301 	rsb	r3, r3, #1
 8008ba8:	9315      	str	r3, [sp, #84]	; 0x54
 8008baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0f0      	beq.n	8008b92 <__gethex+0x386>
 8008bb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008bb4:	f104 0314 	add.w	r3, r4, #20
 8008bb8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008bbc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008bc0:	f04f 0c00 	mov.w	ip, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bca:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008bce:	d01c      	beq.n	8008c0a <__gethex+0x3fe>
 8008bd0:	3201      	adds	r2, #1
 8008bd2:	6002      	str	r2, [r0, #0]
 8008bd4:	2f02      	cmp	r7, #2
 8008bd6:	f104 0314 	add.w	r3, r4, #20
 8008bda:	d13f      	bne.n	8008c5c <__gethex+0x450>
 8008bdc:	f8d8 2000 	ldr.w	r2, [r8]
 8008be0:	3a01      	subs	r2, #1
 8008be2:	42b2      	cmp	r2, r6
 8008be4:	d10a      	bne.n	8008bfc <__gethex+0x3f0>
 8008be6:	1171      	asrs	r1, r6, #5
 8008be8:	2201      	movs	r2, #1
 8008bea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bee:	f006 061f 	and.w	r6, r6, #31
 8008bf2:	fa02 f606 	lsl.w	r6, r2, r6
 8008bf6:	421e      	tst	r6, r3
 8008bf8:	bf18      	it	ne
 8008bfa:	4617      	movne	r7, r2
 8008bfc:	f047 0720 	orr.w	r7, r7, #32
 8008c00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c02:	601c      	str	r4, [r3, #0]
 8008c04:	9b04      	ldr	r3, [sp, #16]
 8008c06:	601d      	str	r5, [r3, #0]
 8008c08:	e695      	b.n	8008936 <__gethex+0x12a>
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c10:	d8d8      	bhi.n	8008bc4 <__gethex+0x3b8>
 8008c12:	68a3      	ldr	r3, [r4, #8]
 8008c14:	459b      	cmp	fp, r3
 8008c16:	db19      	blt.n	8008c4c <__gethex+0x440>
 8008c18:	6861      	ldr	r1, [r4, #4]
 8008c1a:	ee18 0a10 	vmov	r0, s16
 8008c1e:	3101      	adds	r1, #1
 8008c20:	f000 f990 	bl	8008f44 <_Balloc>
 8008c24:	4681      	mov	r9, r0
 8008c26:	b918      	cbnz	r0, 8008c30 <__gethex+0x424>
 8008c28:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <__gethex+0x488>)
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	2184      	movs	r1, #132	; 0x84
 8008c2e:	e6a8      	b.n	8008982 <__gethex+0x176>
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	3202      	adds	r2, #2
 8008c34:	f104 010c 	add.w	r1, r4, #12
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	300c      	adds	r0, #12
 8008c3c:	f000 f974 	bl	8008f28 <memcpy>
 8008c40:	4621      	mov	r1, r4
 8008c42:	ee18 0a10 	vmov	r0, s16
 8008c46:	f000 f9bd 	bl	8008fc4 <_Bfree>
 8008c4a:	464c      	mov	r4, r9
 8008c4c:	6923      	ldr	r3, [r4, #16]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c54:	6122      	str	r2, [r4, #16]
 8008c56:	2201      	movs	r2, #1
 8008c58:	615a      	str	r2, [r3, #20]
 8008c5a:	e7bb      	b.n	8008bd4 <__gethex+0x3c8>
 8008c5c:	6922      	ldr	r2, [r4, #16]
 8008c5e:	455a      	cmp	r2, fp
 8008c60:	dd0b      	ble.n	8008c7a <__gethex+0x46e>
 8008c62:	2101      	movs	r1, #1
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7ff fd6a 	bl	800873e <rshift>
 8008c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c6e:	3501      	adds	r5, #1
 8008c70:	42ab      	cmp	r3, r5
 8008c72:	f6ff aed0 	blt.w	8008a16 <__gethex+0x20a>
 8008c76:	2701      	movs	r7, #1
 8008c78:	e7c0      	b.n	8008bfc <__gethex+0x3f0>
 8008c7a:	f016 061f 	ands.w	r6, r6, #31
 8008c7e:	d0fa      	beq.n	8008c76 <__gethex+0x46a>
 8008c80:	449a      	add	sl, r3
 8008c82:	f1c6 0620 	rsb	r6, r6, #32
 8008c86:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008c8a:	f000 fa51 	bl	8009130 <__hi0bits>
 8008c8e:	42b0      	cmp	r0, r6
 8008c90:	dbe7      	blt.n	8008c62 <__gethex+0x456>
 8008c92:	e7f0      	b.n	8008c76 <__gethex+0x46a>
 8008c94:	0800b09c 	.word	0x0800b09c

08008c98 <L_shift>:
 8008c98:	f1c2 0208 	rsb	r2, r2, #8
 8008c9c:	0092      	lsls	r2, r2, #2
 8008c9e:	b570      	push	{r4, r5, r6, lr}
 8008ca0:	f1c2 0620 	rsb	r6, r2, #32
 8008ca4:	6843      	ldr	r3, [r0, #4]
 8008ca6:	6804      	ldr	r4, [r0, #0]
 8008ca8:	fa03 f506 	lsl.w	r5, r3, r6
 8008cac:	432c      	orrs	r4, r5
 8008cae:	40d3      	lsrs	r3, r2
 8008cb0:	6004      	str	r4, [r0, #0]
 8008cb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cb6:	4288      	cmp	r0, r1
 8008cb8:	d3f4      	bcc.n	8008ca4 <L_shift+0xc>
 8008cba:	bd70      	pop	{r4, r5, r6, pc}

08008cbc <__match>:
 8008cbc:	b530      	push	{r4, r5, lr}
 8008cbe:	6803      	ldr	r3, [r0, #0]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cc6:	b914      	cbnz	r4, 8008cce <__match+0x12>
 8008cc8:	6003      	str	r3, [r0, #0]
 8008cca:	2001      	movs	r0, #1
 8008ccc:	bd30      	pop	{r4, r5, pc}
 8008cce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cd2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008cd6:	2d19      	cmp	r5, #25
 8008cd8:	bf98      	it	ls
 8008cda:	3220      	addls	r2, #32
 8008cdc:	42a2      	cmp	r2, r4
 8008cde:	d0f0      	beq.n	8008cc2 <__match+0x6>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	e7f3      	b.n	8008ccc <__match+0x10>

08008ce4 <__hexnan>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	680b      	ldr	r3, [r1, #0]
 8008cea:	6801      	ldr	r1, [r0, #0]
 8008cec:	115e      	asrs	r6, r3, #5
 8008cee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cf2:	f013 031f 	ands.w	r3, r3, #31
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	bf18      	it	ne
 8008cfa:	3604      	addne	r6, #4
 8008cfc:	2500      	movs	r5, #0
 8008cfe:	1f37      	subs	r7, r6, #4
 8008d00:	4682      	mov	sl, r0
 8008d02:	4690      	mov	r8, r2
 8008d04:	9301      	str	r3, [sp, #4]
 8008d06:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d0a:	46b9      	mov	r9, r7
 8008d0c:	463c      	mov	r4, r7
 8008d0e:	9502      	str	r5, [sp, #8]
 8008d10:	46ab      	mov	fp, r5
 8008d12:	784a      	ldrb	r2, [r1, #1]
 8008d14:	1c4b      	adds	r3, r1, #1
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	b342      	cbz	r2, 8008d6c <__hexnan+0x88>
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	9105      	str	r1, [sp, #20]
 8008d1e:	9204      	str	r2, [sp, #16]
 8008d20:	f7ff fd5f 	bl	80087e2 <__hexdig_fun>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d14f      	bne.n	8008dc8 <__hexnan+0xe4>
 8008d28:	9a04      	ldr	r2, [sp, #16]
 8008d2a:	9905      	ldr	r1, [sp, #20]
 8008d2c:	2a20      	cmp	r2, #32
 8008d2e:	d818      	bhi.n	8008d62 <__hexnan+0x7e>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	459b      	cmp	fp, r3
 8008d34:	dd13      	ble.n	8008d5e <__hexnan+0x7a>
 8008d36:	454c      	cmp	r4, r9
 8008d38:	d206      	bcs.n	8008d48 <__hexnan+0x64>
 8008d3a:	2d07      	cmp	r5, #7
 8008d3c:	dc04      	bgt.n	8008d48 <__hexnan+0x64>
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4649      	mov	r1, r9
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7ff ffa8 	bl	8008c98 <L_shift>
 8008d48:	4544      	cmp	r4, r8
 8008d4a:	d950      	bls.n	8008dee <__hexnan+0x10a>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f1a4 0904 	sub.w	r9, r4, #4
 8008d52:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d56:	f8cd b008 	str.w	fp, [sp, #8]
 8008d5a:	464c      	mov	r4, r9
 8008d5c:	461d      	mov	r5, r3
 8008d5e:	9903      	ldr	r1, [sp, #12]
 8008d60:	e7d7      	b.n	8008d12 <__hexnan+0x2e>
 8008d62:	2a29      	cmp	r2, #41	; 0x29
 8008d64:	d156      	bne.n	8008e14 <__hexnan+0x130>
 8008d66:	3102      	adds	r1, #2
 8008d68:	f8ca 1000 	str.w	r1, [sl]
 8008d6c:	f1bb 0f00 	cmp.w	fp, #0
 8008d70:	d050      	beq.n	8008e14 <__hexnan+0x130>
 8008d72:	454c      	cmp	r4, r9
 8008d74:	d206      	bcs.n	8008d84 <__hexnan+0xa0>
 8008d76:	2d07      	cmp	r5, #7
 8008d78:	dc04      	bgt.n	8008d84 <__hexnan+0xa0>
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f7ff ff8a 	bl	8008c98 <L_shift>
 8008d84:	4544      	cmp	r4, r8
 8008d86:	d934      	bls.n	8008df2 <__hexnan+0x10e>
 8008d88:	f1a8 0204 	sub.w	r2, r8, #4
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d92:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d96:	429f      	cmp	r7, r3
 8008d98:	d2f9      	bcs.n	8008d8e <__hexnan+0xaa>
 8008d9a:	1b3b      	subs	r3, r7, r4
 8008d9c:	f023 0303 	bic.w	r3, r3, #3
 8008da0:	3304      	adds	r3, #4
 8008da2:	3401      	adds	r4, #1
 8008da4:	3e03      	subs	r6, #3
 8008da6:	42b4      	cmp	r4, r6
 8008da8:	bf88      	it	hi
 8008daa:	2304      	movhi	r3, #4
 8008dac:	4443      	add	r3, r8
 8008dae:	2200      	movs	r2, #0
 8008db0:	f843 2b04 	str.w	r2, [r3], #4
 8008db4:	429f      	cmp	r7, r3
 8008db6:	d2fb      	bcs.n	8008db0 <__hexnan+0xcc>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	b91b      	cbnz	r3, 8008dc4 <__hexnan+0xe0>
 8008dbc:	4547      	cmp	r7, r8
 8008dbe:	d127      	bne.n	8008e10 <__hexnan+0x12c>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	2005      	movs	r0, #5
 8008dc6:	e026      	b.n	8008e16 <__hexnan+0x132>
 8008dc8:	3501      	adds	r5, #1
 8008dca:	2d08      	cmp	r5, #8
 8008dcc:	f10b 0b01 	add.w	fp, fp, #1
 8008dd0:	dd06      	ble.n	8008de0 <__hexnan+0xfc>
 8008dd2:	4544      	cmp	r4, r8
 8008dd4:	d9c3      	bls.n	8008d5e <__hexnan+0x7a>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ddc:	2501      	movs	r5, #1
 8008dde:	3c04      	subs	r4, #4
 8008de0:	6822      	ldr	r2, [r4, #0]
 8008de2:	f000 000f 	and.w	r0, r0, #15
 8008de6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008dea:	6022      	str	r2, [r4, #0]
 8008dec:	e7b7      	b.n	8008d5e <__hexnan+0x7a>
 8008dee:	2508      	movs	r5, #8
 8008df0:	e7b5      	b.n	8008d5e <__hexnan+0x7a>
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0df      	beq.n	8008db8 <__hexnan+0xd4>
 8008df8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfc:	f1c3 0320 	rsb	r3, r3, #32
 8008e00:	fa22 f303 	lsr.w	r3, r2, r3
 8008e04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e08:	401a      	ands	r2, r3
 8008e0a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e0e:	e7d3      	b.n	8008db8 <__hexnan+0xd4>
 8008e10:	3f04      	subs	r7, #4
 8008e12:	e7d1      	b.n	8008db8 <__hexnan+0xd4>
 8008e14:	2004      	movs	r0, #4
 8008e16:	b007      	add	sp, #28
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e1c <_localeconv_r>:
 8008e1c:	4800      	ldr	r0, [pc, #0]	; (8008e20 <_localeconv_r+0x4>)
 8008e1e:	4770      	bx	lr
 8008e20:	20000188 	.word	0x20000188

08008e24 <__retarget_lock_init_recursive>:
 8008e24:	4770      	bx	lr

08008e26 <__retarget_lock_acquire_recursive>:
 8008e26:	4770      	bx	lr

08008e28 <__retarget_lock_release_recursive>:
 8008e28:	4770      	bx	lr

08008e2a <__swhatbuf_r>:
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e32:	2900      	cmp	r1, #0
 8008e34:	b096      	sub	sp, #88	; 0x58
 8008e36:	4614      	mov	r4, r2
 8008e38:	461d      	mov	r5, r3
 8008e3a:	da07      	bge.n	8008e4c <__swhatbuf_r+0x22>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	89b3      	ldrh	r3, [r6, #12]
 8008e42:	061a      	lsls	r2, r3, #24
 8008e44:	d410      	bmi.n	8008e68 <__swhatbuf_r+0x3e>
 8008e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e4a:	e00e      	b.n	8008e6a <__swhatbuf_r+0x40>
 8008e4c:	466a      	mov	r2, sp
 8008e4e:	f001 f96f 	bl	800a130 <_fstat_r>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	dbf2      	blt.n	8008e3c <__swhatbuf_r+0x12>
 8008e56:	9a01      	ldr	r2, [sp, #4]
 8008e58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e60:	425a      	negs	r2, r3
 8008e62:	415a      	adcs	r2, r3
 8008e64:	602a      	str	r2, [r5, #0]
 8008e66:	e7ee      	b.n	8008e46 <__swhatbuf_r+0x1c>
 8008e68:	2340      	movs	r3, #64	; 0x40
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	b016      	add	sp, #88	; 0x58
 8008e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08008e74 <__smakebuf_r>:
 8008e74:	898b      	ldrh	r3, [r1, #12]
 8008e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e78:	079d      	lsls	r5, r3, #30
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	d507      	bpl.n	8008e90 <__smakebuf_r+0x1c>
 8008e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	6163      	str	r3, [r4, #20]
 8008e8c:	b002      	add	sp, #8
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	ab01      	add	r3, sp, #4
 8008e92:	466a      	mov	r2, sp
 8008e94:	f7ff ffc9 	bl	8008e2a <__swhatbuf_r>
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	4605      	mov	r5, r0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f000 fd6b 	bl	8009978 <_malloc_r>
 8008ea2:	b948      	cbnz	r0, 8008eb8 <__smakebuf_r+0x44>
 8008ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea8:	059a      	lsls	r2, r3, #22
 8008eaa:	d4ef      	bmi.n	8008e8c <__smakebuf_r+0x18>
 8008eac:	f023 0303 	bic.w	r3, r3, #3
 8008eb0:	f043 0302 	orr.w	r3, r3, #2
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	e7e3      	b.n	8008e80 <__smakebuf_r+0xc>
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <__smakebuf_r+0x7c>)
 8008eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	6163      	str	r3, [r4, #20]
 8008eca:	9b01      	ldr	r3, [sp, #4]
 8008ecc:	6120      	str	r0, [r4, #16]
 8008ece:	b15b      	cbz	r3, 8008ee8 <__smakebuf_r+0x74>
 8008ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f001 f93d 	bl	800a154 <_isatty_r>
 8008eda:	b128      	cbz	r0, 8008ee8 <__smakebuf_r+0x74>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	89a0      	ldrh	r0, [r4, #12]
 8008eea:	4305      	orrs	r5, r0
 8008eec:	81a5      	strh	r5, [r4, #12]
 8008eee:	e7cd      	b.n	8008e8c <__smakebuf_r+0x18>
 8008ef0:	0800859d 	.word	0x0800859d

08008ef4 <malloc>:
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <malloc+0xc>)
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f000 bd3d 	b.w	8009978 <_malloc_r>
 8008efe:	bf00      	nop
 8008f00:	20000030 	.word	0x20000030

08008f04 <__ascii_mbtowc>:
 8008f04:	b082      	sub	sp, #8
 8008f06:	b901      	cbnz	r1, 8008f0a <__ascii_mbtowc+0x6>
 8008f08:	a901      	add	r1, sp, #4
 8008f0a:	b142      	cbz	r2, 8008f1e <__ascii_mbtowc+0x1a>
 8008f0c:	b14b      	cbz	r3, 8008f22 <__ascii_mbtowc+0x1e>
 8008f0e:	7813      	ldrb	r3, [r2, #0]
 8008f10:	600b      	str	r3, [r1, #0]
 8008f12:	7812      	ldrb	r2, [r2, #0]
 8008f14:	1e10      	subs	r0, r2, #0
 8008f16:	bf18      	it	ne
 8008f18:	2001      	movne	r0, #1
 8008f1a:	b002      	add	sp, #8
 8008f1c:	4770      	bx	lr
 8008f1e:	4610      	mov	r0, r2
 8008f20:	e7fb      	b.n	8008f1a <__ascii_mbtowc+0x16>
 8008f22:	f06f 0001 	mvn.w	r0, #1
 8008f26:	e7f8      	b.n	8008f1a <__ascii_mbtowc+0x16>

08008f28 <memcpy>:
 8008f28:	440a      	add	r2, r1
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f30:	d100      	bne.n	8008f34 <memcpy+0xc>
 8008f32:	4770      	bx	lr
 8008f34:	b510      	push	{r4, lr}
 8008f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3e:	4291      	cmp	r1, r2
 8008f40:	d1f9      	bne.n	8008f36 <memcpy+0xe>
 8008f42:	bd10      	pop	{r4, pc}

08008f44 <_Balloc>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f48:	4604      	mov	r4, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	b976      	cbnz	r6, 8008f6c <_Balloc+0x28>
 8008f4e:	2010      	movs	r0, #16
 8008f50:	f7ff ffd0 	bl	8008ef4 <malloc>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6260      	str	r0, [r4, #36]	; 0x24
 8008f58:	b920      	cbnz	r0, 8008f64 <_Balloc+0x20>
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <_Balloc+0x78>)
 8008f5c:	4818      	ldr	r0, [pc, #96]	; (8008fc0 <_Balloc+0x7c>)
 8008f5e:	2166      	movs	r1, #102	; 0x66
 8008f60:	f001 f8a6 	bl	800a0b0 <__assert_func>
 8008f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f68:	6006      	str	r6, [r0, #0]
 8008f6a:	60c6      	str	r6, [r0, #12]
 8008f6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f6e:	68f3      	ldr	r3, [r6, #12]
 8008f70:	b183      	cbz	r3, 8008f94 <_Balloc+0x50>
 8008f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f7a:	b9b8      	cbnz	r0, 8008fac <_Balloc+0x68>
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f82:	1d72      	adds	r2, r6, #5
 8008f84:	0092      	lsls	r2, r2, #2
 8008f86:	4620      	mov	r0, r4
 8008f88:	f000 fc97 	bl	80098ba <_calloc_r>
 8008f8c:	b160      	cbz	r0, 8008fa8 <_Balloc+0x64>
 8008f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f92:	e00e      	b.n	8008fb2 <_Balloc+0x6e>
 8008f94:	2221      	movs	r2, #33	; 0x21
 8008f96:	2104      	movs	r1, #4
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 fc8e 	bl	80098ba <_calloc_r>
 8008f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fa0:	60f0      	str	r0, [r6, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e4      	bne.n	8008f72 <_Balloc+0x2e>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	6802      	ldr	r2, [r0, #0]
 8008fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fb8:	e7f7      	b.n	8008faa <_Balloc+0x66>
 8008fba:	bf00      	nop
 8008fbc:	0800b026 	.word	0x0800b026
 8008fc0:	0800b190 	.word	0x0800b190

08008fc4 <_Bfree>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fc8:	4605      	mov	r5, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	b976      	cbnz	r6, 8008fec <_Bfree+0x28>
 8008fce:	2010      	movs	r0, #16
 8008fd0:	f7ff ff90 	bl	8008ef4 <malloc>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6268      	str	r0, [r5, #36]	; 0x24
 8008fd8:	b920      	cbnz	r0, 8008fe4 <_Bfree+0x20>
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <_Bfree+0x3c>)
 8008fdc:	4809      	ldr	r0, [pc, #36]	; (8009004 <_Bfree+0x40>)
 8008fde:	218a      	movs	r1, #138	; 0x8a
 8008fe0:	f001 f866 	bl	800a0b0 <__assert_func>
 8008fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe8:	6006      	str	r6, [r0, #0]
 8008fea:	60c6      	str	r6, [r0, #12]
 8008fec:	b13c      	cbz	r4, 8008ffe <_Bfree+0x3a>
 8008fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ff0:	6862      	ldr	r2, [r4, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ff8:	6021      	str	r1, [r4, #0]
 8008ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	0800b026 	.word	0x0800b026
 8009004:	0800b190 	.word	0x0800b190

08009008 <__multadd>:
 8009008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	690e      	ldr	r6, [r1, #16]
 800900e:	4607      	mov	r7, r0
 8009010:	4698      	mov	r8, r3
 8009012:	460c      	mov	r4, r1
 8009014:	f101 0014 	add.w	r0, r1, #20
 8009018:	2300      	movs	r3, #0
 800901a:	6805      	ldr	r5, [r0, #0]
 800901c:	b2a9      	uxth	r1, r5
 800901e:	fb02 8101 	mla	r1, r2, r1, r8
 8009022:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009026:	0c2d      	lsrs	r5, r5, #16
 8009028:	fb02 c505 	mla	r5, r2, r5, ip
 800902c:	b289      	uxth	r1, r1
 800902e:	3301      	adds	r3, #1
 8009030:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009034:	429e      	cmp	r6, r3
 8009036:	f840 1b04 	str.w	r1, [r0], #4
 800903a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800903e:	dcec      	bgt.n	800901a <__multadd+0x12>
 8009040:	f1b8 0f00 	cmp.w	r8, #0
 8009044:	d022      	beq.n	800908c <__multadd+0x84>
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	42b3      	cmp	r3, r6
 800904a:	dc19      	bgt.n	8009080 <__multadd+0x78>
 800904c:	6861      	ldr	r1, [r4, #4]
 800904e:	4638      	mov	r0, r7
 8009050:	3101      	adds	r1, #1
 8009052:	f7ff ff77 	bl	8008f44 <_Balloc>
 8009056:	4605      	mov	r5, r0
 8009058:	b928      	cbnz	r0, 8009066 <__multadd+0x5e>
 800905a:	4602      	mov	r2, r0
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <__multadd+0x8c>)
 800905e:	480e      	ldr	r0, [pc, #56]	; (8009098 <__multadd+0x90>)
 8009060:	21b5      	movs	r1, #181	; 0xb5
 8009062:	f001 f825 	bl	800a0b0 <__assert_func>
 8009066:	6922      	ldr	r2, [r4, #16]
 8009068:	3202      	adds	r2, #2
 800906a:	f104 010c 	add.w	r1, r4, #12
 800906e:	0092      	lsls	r2, r2, #2
 8009070:	300c      	adds	r0, #12
 8009072:	f7ff ff59 	bl	8008f28 <memcpy>
 8009076:	4621      	mov	r1, r4
 8009078:	4638      	mov	r0, r7
 800907a:	f7ff ffa3 	bl	8008fc4 <_Bfree>
 800907e:	462c      	mov	r4, r5
 8009080:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009084:	3601      	adds	r6, #1
 8009086:	f8c3 8014 	str.w	r8, [r3, #20]
 800908a:	6126      	str	r6, [r4, #16]
 800908c:	4620      	mov	r0, r4
 800908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009092:	bf00      	nop
 8009094:	0800b09c 	.word	0x0800b09c
 8009098:	0800b190 	.word	0x0800b190

0800909c <__s2b>:
 800909c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	460c      	mov	r4, r1
 80090a2:	4615      	mov	r5, r2
 80090a4:	461f      	mov	r7, r3
 80090a6:	2209      	movs	r2, #9
 80090a8:	3308      	adds	r3, #8
 80090aa:	4606      	mov	r6, r0
 80090ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80090b0:	2100      	movs	r1, #0
 80090b2:	2201      	movs	r2, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	db09      	blt.n	80090cc <__s2b+0x30>
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ff43 	bl	8008f44 <_Balloc>
 80090be:	b940      	cbnz	r0, 80090d2 <__s2b+0x36>
 80090c0:	4602      	mov	r2, r0
 80090c2:	4b19      	ldr	r3, [pc, #100]	; (8009128 <__s2b+0x8c>)
 80090c4:	4819      	ldr	r0, [pc, #100]	; (800912c <__s2b+0x90>)
 80090c6:	21ce      	movs	r1, #206	; 0xce
 80090c8:	f000 fff2 	bl	800a0b0 <__assert_func>
 80090cc:	0052      	lsls	r2, r2, #1
 80090ce:	3101      	adds	r1, #1
 80090d0:	e7f0      	b.n	80090b4 <__s2b+0x18>
 80090d2:	9b08      	ldr	r3, [sp, #32]
 80090d4:	6143      	str	r3, [r0, #20]
 80090d6:	2d09      	cmp	r5, #9
 80090d8:	f04f 0301 	mov.w	r3, #1
 80090dc:	6103      	str	r3, [r0, #16]
 80090de:	dd16      	ble.n	800910e <__s2b+0x72>
 80090e0:	f104 0909 	add.w	r9, r4, #9
 80090e4:	46c8      	mov	r8, r9
 80090e6:	442c      	add	r4, r5
 80090e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090ec:	4601      	mov	r1, r0
 80090ee:	3b30      	subs	r3, #48	; 0x30
 80090f0:	220a      	movs	r2, #10
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ff88 	bl	8009008 <__multadd>
 80090f8:	45a0      	cmp	r8, r4
 80090fa:	d1f5      	bne.n	80090e8 <__s2b+0x4c>
 80090fc:	f1a5 0408 	sub.w	r4, r5, #8
 8009100:	444c      	add	r4, r9
 8009102:	1b2d      	subs	r5, r5, r4
 8009104:	1963      	adds	r3, r4, r5
 8009106:	42bb      	cmp	r3, r7
 8009108:	db04      	blt.n	8009114 <__s2b+0x78>
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	340a      	adds	r4, #10
 8009110:	2509      	movs	r5, #9
 8009112:	e7f6      	b.n	8009102 <__s2b+0x66>
 8009114:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009118:	4601      	mov	r1, r0
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	220a      	movs	r2, #10
 800911e:	4630      	mov	r0, r6
 8009120:	f7ff ff72 	bl	8009008 <__multadd>
 8009124:	e7ee      	b.n	8009104 <__s2b+0x68>
 8009126:	bf00      	nop
 8009128:	0800b09c 	.word	0x0800b09c
 800912c:	0800b190 	.word	0x0800b190

08009130 <__hi0bits>:
 8009130:	0c03      	lsrs	r3, r0, #16
 8009132:	041b      	lsls	r3, r3, #16
 8009134:	b9d3      	cbnz	r3, 800916c <__hi0bits+0x3c>
 8009136:	0400      	lsls	r0, r0, #16
 8009138:	2310      	movs	r3, #16
 800913a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800913e:	bf04      	itt	eq
 8009140:	0200      	lsleq	r0, r0, #8
 8009142:	3308      	addeq	r3, #8
 8009144:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009148:	bf04      	itt	eq
 800914a:	0100      	lsleq	r0, r0, #4
 800914c:	3304      	addeq	r3, #4
 800914e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009152:	bf04      	itt	eq
 8009154:	0080      	lsleq	r0, r0, #2
 8009156:	3302      	addeq	r3, #2
 8009158:	2800      	cmp	r0, #0
 800915a:	db05      	blt.n	8009168 <__hi0bits+0x38>
 800915c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009160:	f103 0301 	add.w	r3, r3, #1
 8009164:	bf08      	it	eq
 8009166:	2320      	moveq	r3, #32
 8009168:	4618      	mov	r0, r3
 800916a:	4770      	bx	lr
 800916c:	2300      	movs	r3, #0
 800916e:	e7e4      	b.n	800913a <__hi0bits+0xa>

08009170 <__lo0bits>:
 8009170:	6803      	ldr	r3, [r0, #0]
 8009172:	f013 0207 	ands.w	r2, r3, #7
 8009176:	4601      	mov	r1, r0
 8009178:	d00b      	beq.n	8009192 <__lo0bits+0x22>
 800917a:	07da      	lsls	r2, r3, #31
 800917c:	d424      	bmi.n	80091c8 <__lo0bits+0x58>
 800917e:	0798      	lsls	r0, r3, #30
 8009180:	bf49      	itett	mi
 8009182:	085b      	lsrmi	r3, r3, #1
 8009184:	089b      	lsrpl	r3, r3, #2
 8009186:	2001      	movmi	r0, #1
 8009188:	600b      	strmi	r3, [r1, #0]
 800918a:	bf5c      	itt	pl
 800918c:	600b      	strpl	r3, [r1, #0]
 800918e:	2002      	movpl	r0, #2
 8009190:	4770      	bx	lr
 8009192:	b298      	uxth	r0, r3
 8009194:	b9b0      	cbnz	r0, 80091c4 <__lo0bits+0x54>
 8009196:	0c1b      	lsrs	r3, r3, #16
 8009198:	2010      	movs	r0, #16
 800919a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800919e:	bf04      	itt	eq
 80091a0:	0a1b      	lsreq	r3, r3, #8
 80091a2:	3008      	addeq	r0, #8
 80091a4:	071a      	lsls	r2, r3, #28
 80091a6:	bf04      	itt	eq
 80091a8:	091b      	lsreq	r3, r3, #4
 80091aa:	3004      	addeq	r0, #4
 80091ac:	079a      	lsls	r2, r3, #30
 80091ae:	bf04      	itt	eq
 80091b0:	089b      	lsreq	r3, r3, #2
 80091b2:	3002      	addeq	r0, #2
 80091b4:	07da      	lsls	r2, r3, #31
 80091b6:	d403      	bmi.n	80091c0 <__lo0bits+0x50>
 80091b8:	085b      	lsrs	r3, r3, #1
 80091ba:	f100 0001 	add.w	r0, r0, #1
 80091be:	d005      	beq.n	80091cc <__lo0bits+0x5c>
 80091c0:	600b      	str	r3, [r1, #0]
 80091c2:	4770      	bx	lr
 80091c4:	4610      	mov	r0, r2
 80091c6:	e7e8      	b.n	800919a <__lo0bits+0x2a>
 80091c8:	2000      	movs	r0, #0
 80091ca:	4770      	bx	lr
 80091cc:	2020      	movs	r0, #32
 80091ce:	4770      	bx	lr

080091d0 <__i2b>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	460c      	mov	r4, r1
 80091d4:	2101      	movs	r1, #1
 80091d6:	f7ff feb5 	bl	8008f44 <_Balloc>
 80091da:	4602      	mov	r2, r0
 80091dc:	b928      	cbnz	r0, 80091ea <__i2b+0x1a>
 80091de:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <__i2b+0x24>)
 80091e0:	4805      	ldr	r0, [pc, #20]	; (80091f8 <__i2b+0x28>)
 80091e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091e6:	f000 ff63 	bl	800a0b0 <__assert_func>
 80091ea:	2301      	movs	r3, #1
 80091ec:	6144      	str	r4, [r0, #20]
 80091ee:	6103      	str	r3, [r0, #16]
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	bf00      	nop
 80091f4:	0800b09c 	.word	0x0800b09c
 80091f8:	0800b190 	.word	0x0800b190

080091fc <__multiply>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	4614      	mov	r4, r2
 8009202:	690a      	ldr	r2, [r1, #16]
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	429a      	cmp	r2, r3
 8009208:	bfb8      	it	lt
 800920a:	460b      	movlt	r3, r1
 800920c:	460d      	mov	r5, r1
 800920e:	bfbc      	itt	lt
 8009210:	4625      	movlt	r5, r4
 8009212:	461c      	movlt	r4, r3
 8009214:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009218:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800921c:	68ab      	ldr	r3, [r5, #8]
 800921e:	6869      	ldr	r1, [r5, #4]
 8009220:	eb0a 0709 	add.w	r7, sl, r9
 8009224:	42bb      	cmp	r3, r7
 8009226:	b085      	sub	sp, #20
 8009228:	bfb8      	it	lt
 800922a:	3101      	addlt	r1, #1
 800922c:	f7ff fe8a 	bl	8008f44 <_Balloc>
 8009230:	b930      	cbnz	r0, 8009240 <__multiply+0x44>
 8009232:	4602      	mov	r2, r0
 8009234:	4b42      	ldr	r3, [pc, #264]	; (8009340 <__multiply+0x144>)
 8009236:	4843      	ldr	r0, [pc, #268]	; (8009344 <__multiply+0x148>)
 8009238:	f240 115d 	movw	r1, #349	; 0x15d
 800923c:	f000 ff38 	bl	800a0b0 <__assert_func>
 8009240:	f100 0614 	add.w	r6, r0, #20
 8009244:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009248:	4633      	mov	r3, r6
 800924a:	2200      	movs	r2, #0
 800924c:	4543      	cmp	r3, r8
 800924e:	d31e      	bcc.n	800928e <__multiply+0x92>
 8009250:	f105 0c14 	add.w	ip, r5, #20
 8009254:	f104 0314 	add.w	r3, r4, #20
 8009258:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800925c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009260:	9202      	str	r2, [sp, #8]
 8009262:	ebac 0205 	sub.w	r2, ip, r5
 8009266:	3a15      	subs	r2, #21
 8009268:	f022 0203 	bic.w	r2, r2, #3
 800926c:	3204      	adds	r2, #4
 800926e:	f105 0115 	add.w	r1, r5, #21
 8009272:	458c      	cmp	ip, r1
 8009274:	bf38      	it	cc
 8009276:	2204      	movcc	r2, #4
 8009278:	9201      	str	r2, [sp, #4]
 800927a:	9a02      	ldr	r2, [sp, #8]
 800927c:	9303      	str	r3, [sp, #12]
 800927e:	429a      	cmp	r2, r3
 8009280:	d808      	bhi.n	8009294 <__multiply+0x98>
 8009282:	2f00      	cmp	r7, #0
 8009284:	dc55      	bgt.n	8009332 <__multiply+0x136>
 8009286:	6107      	str	r7, [r0, #16]
 8009288:	b005      	add	sp, #20
 800928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928e:	f843 2b04 	str.w	r2, [r3], #4
 8009292:	e7db      	b.n	800924c <__multiply+0x50>
 8009294:	f8b3 a000 	ldrh.w	sl, [r3]
 8009298:	f1ba 0f00 	cmp.w	sl, #0
 800929c:	d020      	beq.n	80092e0 <__multiply+0xe4>
 800929e:	f105 0e14 	add.w	lr, r5, #20
 80092a2:	46b1      	mov	r9, r6
 80092a4:	2200      	movs	r2, #0
 80092a6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80092aa:	f8d9 b000 	ldr.w	fp, [r9]
 80092ae:	b2a1      	uxth	r1, r4
 80092b0:	fa1f fb8b 	uxth.w	fp, fp
 80092b4:	fb0a b101 	mla	r1, sl, r1, fp
 80092b8:	4411      	add	r1, r2
 80092ba:	f8d9 2000 	ldr.w	r2, [r9]
 80092be:	0c24      	lsrs	r4, r4, #16
 80092c0:	0c12      	lsrs	r2, r2, #16
 80092c2:	fb0a 2404 	mla	r4, sl, r4, r2
 80092c6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80092ca:	b289      	uxth	r1, r1
 80092cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092d0:	45f4      	cmp	ip, lr
 80092d2:	f849 1b04 	str.w	r1, [r9], #4
 80092d6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092da:	d8e4      	bhi.n	80092a6 <__multiply+0xaa>
 80092dc:	9901      	ldr	r1, [sp, #4]
 80092de:	5072      	str	r2, [r6, r1]
 80092e0:	9a03      	ldr	r2, [sp, #12]
 80092e2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092e6:	3304      	adds	r3, #4
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	d01f      	beq.n	800932e <__multiply+0x132>
 80092ee:	6834      	ldr	r4, [r6, #0]
 80092f0:	f105 0114 	add.w	r1, r5, #20
 80092f4:	46b6      	mov	lr, r6
 80092f6:	f04f 0a00 	mov.w	sl, #0
 80092fa:	880a      	ldrh	r2, [r1, #0]
 80092fc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009300:	fb09 b202 	mla	r2, r9, r2, fp
 8009304:	4492      	add	sl, r2
 8009306:	b2a4      	uxth	r4, r4
 8009308:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800930c:	f84e 4b04 	str.w	r4, [lr], #4
 8009310:	f851 4b04 	ldr.w	r4, [r1], #4
 8009314:	f8be 2000 	ldrh.w	r2, [lr]
 8009318:	0c24      	lsrs	r4, r4, #16
 800931a:	fb09 2404 	mla	r4, r9, r4, r2
 800931e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009322:	458c      	cmp	ip, r1
 8009324:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009328:	d8e7      	bhi.n	80092fa <__multiply+0xfe>
 800932a:	9a01      	ldr	r2, [sp, #4]
 800932c:	50b4      	str	r4, [r6, r2]
 800932e:	3604      	adds	r6, #4
 8009330:	e7a3      	b.n	800927a <__multiply+0x7e>
 8009332:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1a5      	bne.n	8009286 <__multiply+0x8a>
 800933a:	3f01      	subs	r7, #1
 800933c:	e7a1      	b.n	8009282 <__multiply+0x86>
 800933e:	bf00      	nop
 8009340:	0800b09c 	.word	0x0800b09c
 8009344:	0800b190 	.word	0x0800b190

08009348 <__pow5mult>:
 8009348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800934c:	4615      	mov	r5, r2
 800934e:	f012 0203 	ands.w	r2, r2, #3
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	d007      	beq.n	8009368 <__pow5mult+0x20>
 8009358:	4c25      	ldr	r4, [pc, #148]	; (80093f0 <__pow5mult+0xa8>)
 800935a:	3a01      	subs	r2, #1
 800935c:	2300      	movs	r3, #0
 800935e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009362:	f7ff fe51 	bl	8009008 <__multadd>
 8009366:	4607      	mov	r7, r0
 8009368:	10ad      	asrs	r5, r5, #2
 800936a:	d03d      	beq.n	80093e8 <__pow5mult+0xa0>
 800936c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800936e:	b97c      	cbnz	r4, 8009390 <__pow5mult+0x48>
 8009370:	2010      	movs	r0, #16
 8009372:	f7ff fdbf 	bl	8008ef4 <malloc>
 8009376:	4602      	mov	r2, r0
 8009378:	6270      	str	r0, [r6, #36]	; 0x24
 800937a:	b928      	cbnz	r0, 8009388 <__pow5mult+0x40>
 800937c:	4b1d      	ldr	r3, [pc, #116]	; (80093f4 <__pow5mult+0xac>)
 800937e:	481e      	ldr	r0, [pc, #120]	; (80093f8 <__pow5mult+0xb0>)
 8009380:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009384:	f000 fe94 	bl	800a0b0 <__assert_func>
 8009388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800938c:	6004      	str	r4, [r0, #0]
 800938e:	60c4      	str	r4, [r0, #12]
 8009390:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009398:	b94c      	cbnz	r4, 80093ae <__pow5mult+0x66>
 800939a:	f240 2171 	movw	r1, #625	; 0x271
 800939e:	4630      	mov	r0, r6
 80093a0:	f7ff ff16 	bl	80091d0 <__i2b>
 80093a4:	2300      	movs	r3, #0
 80093a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093aa:	4604      	mov	r4, r0
 80093ac:	6003      	str	r3, [r0, #0]
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	07eb      	lsls	r3, r5, #31
 80093b4:	d50a      	bpl.n	80093cc <__pow5mult+0x84>
 80093b6:	4639      	mov	r1, r7
 80093b8:	4622      	mov	r2, r4
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7ff ff1e 	bl	80091fc <__multiply>
 80093c0:	4639      	mov	r1, r7
 80093c2:	4680      	mov	r8, r0
 80093c4:	4630      	mov	r0, r6
 80093c6:	f7ff fdfd 	bl	8008fc4 <_Bfree>
 80093ca:	4647      	mov	r7, r8
 80093cc:	106d      	asrs	r5, r5, #1
 80093ce:	d00b      	beq.n	80093e8 <__pow5mult+0xa0>
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	b938      	cbnz	r0, 80093e4 <__pow5mult+0x9c>
 80093d4:	4622      	mov	r2, r4
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff ff0f 	bl	80091fc <__multiply>
 80093de:	6020      	str	r0, [r4, #0]
 80093e0:	f8c0 9000 	str.w	r9, [r0]
 80093e4:	4604      	mov	r4, r0
 80093e6:	e7e4      	b.n	80093b2 <__pow5mult+0x6a>
 80093e8:	4638      	mov	r0, r7
 80093ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ee:	bf00      	nop
 80093f0:	0800b2e0 	.word	0x0800b2e0
 80093f4:	0800b026 	.word	0x0800b026
 80093f8:	0800b190 	.word	0x0800b190

080093fc <__lshift>:
 80093fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	460c      	mov	r4, r1
 8009402:	6849      	ldr	r1, [r1, #4]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	4607      	mov	r7, r0
 800940e:	4691      	mov	r9, r2
 8009410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009414:	f108 0601 	add.w	r6, r8, #1
 8009418:	42b3      	cmp	r3, r6
 800941a:	db0b      	blt.n	8009434 <__lshift+0x38>
 800941c:	4638      	mov	r0, r7
 800941e:	f7ff fd91 	bl	8008f44 <_Balloc>
 8009422:	4605      	mov	r5, r0
 8009424:	b948      	cbnz	r0, 800943a <__lshift+0x3e>
 8009426:	4602      	mov	r2, r0
 8009428:	4b28      	ldr	r3, [pc, #160]	; (80094cc <__lshift+0xd0>)
 800942a:	4829      	ldr	r0, [pc, #164]	; (80094d0 <__lshift+0xd4>)
 800942c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009430:	f000 fe3e 	bl	800a0b0 <__assert_func>
 8009434:	3101      	adds	r1, #1
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	e7ee      	b.n	8009418 <__lshift+0x1c>
 800943a:	2300      	movs	r3, #0
 800943c:	f100 0114 	add.w	r1, r0, #20
 8009440:	f100 0210 	add.w	r2, r0, #16
 8009444:	4618      	mov	r0, r3
 8009446:	4553      	cmp	r3, sl
 8009448:	db33      	blt.n	80094b2 <__lshift+0xb6>
 800944a:	6920      	ldr	r0, [r4, #16]
 800944c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009450:	f104 0314 	add.w	r3, r4, #20
 8009454:	f019 091f 	ands.w	r9, r9, #31
 8009458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800945c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009460:	d02b      	beq.n	80094ba <__lshift+0xbe>
 8009462:	f1c9 0e20 	rsb	lr, r9, #32
 8009466:	468a      	mov	sl, r1
 8009468:	2200      	movs	r2, #0
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	fa00 f009 	lsl.w	r0, r0, r9
 8009470:	4302      	orrs	r2, r0
 8009472:	f84a 2b04 	str.w	r2, [sl], #4
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	459c      	cmp	ip, r3
 800947c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009480:	d8f3      	bhi.n	800946a <__lshift+0x6e>
 8009482:	ebac 0304 	sub.w	r3, ip, r4
 8009486:	3b15      	subs	r3, #21
 8009488:	f023 0303 	bic.w	r3, r3, #3
 800948c:	3304      	adds	r3, #4
 800948e:	f104 0015 	add.w	r0, r4, #21
 8009492:	4584      	cmp	ip, r0
 8009494:	bf38      	it	cc
 8009496:	2304      	movcc	r3, #4
 8009498:	50ca      	str	r2, [r1, r3]
 800949a:	b10a      	cbz	r2, 80094a0 <__lshift+0xa4>
 800949c:	f108 0602 	add.w	r6, r8, #2
 80094a0:	3e01      	subs	r6, #1
 80094a2:	4638      	mov	r0, r7
 80094a4:	612e      	str	r6, [r5, #16]
 80094a6:	4621      	mov	r1, r4
 80094a8:	f7ff fd8c 	bl	8008fc4 <_Bfree>
 80094ac:	4628      	mov	r0, r5
 80094ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094b6:	3301      	adds	r3, #1
 80094b8:	e7c5      	b.n	8009446 <__lshift+0x4a>
 80094ba:	3904      	subs	r1, #4
 80094bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094c4:	459c      	cmp	ip, r3
 80094c6:	d8f9      	bhi.n	80094bc <__lshift+0xc0>
 80094c8:	e7ea      	b.n	80094a0 <__lshift+0xa4>
 80094ca:	bf00      	nop
 80094cc:	0800b09c 	.word	0x0800b09c
 80094d0:	0800b190 	.word	0x0800b190

080094d4 <__mcmp>:
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	6902      	ldr	r2, [r0, #16]
 80094d8:	690c      	ldr	r4, [r1, #16]
 80094da:	1b12      	subs	r2, r2, r4
 80094dc:	d10e      	bne.n	80094fc <__mcmp+0x28>
 80094de:	f100 0314 	add.w	r3, r0, #20
 80094e2:	3114      	adds	r1, #20
 80094e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094f4:	42a5      	cmp	r5, r4
 80094f6:	d003      	beq.n	8009500 <__mcmp+0x2c>
 80094f8:	d305      	bcc.n	8009506 <__mcmp+0x32>
 80094fa:	2201      	movs	r2, #1
 80094fc:	4610      	mov	r0, r2
 80094fe:	bd30      	pop	{r4, r5, pc}
 8009500:	4283      	cmp	r3, r0
 8009502:	d3f3      	bcc.n	80094ec <__mcmp+0x18>
 8009504:	e7fa      	b.n	80094fc <__mcmp+0x28>
 8009506:	f04f 32ff 	mov.w	r2, #4294967295
 800950a:	e7f7      	b.n	80094fc <__mcmp+0x28>

0800950c <__mdiff>:
 800950c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	460c      	mov	r4, r1
 8009512:	4606      	mov	r6, r0
 8009514:	4611      	mov	r1, r2
 8009516:	4620      	mov	r0, r4
 8009518:	4617      	mov	r7, r2
 800951a:	f7ff ffdb 	bl	80094d4 <__mcmp>
 800951e:	1e05      	subs	r5, r0, #0
 8009520:	d110      	bne.n	8009544 <__mdiff+0x38>
 8009522:	4629      	mov	r1, r5
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff fd0d 	bl	8008f44 <_Balloc>
 800952a:	b930      	cbnz	r0, 800953a <__mdiff+0x2e>
 800952c:	4b39      	ldr	r3, [pc, #228]	; (8009614 <__mdiff+0x108>)
 800952e:	4602      	mov	r2, r0
 8009530:	f240 2132 	movw	r1, #562	; 0x232
 8009534:	4838      	ldr	r0, [pc, #224]	; (8009618 <__mdiff+0x10c>)
 8009536:	f000 fdbb 	bl	800a0b0 <__assert_func>
 800953a:	2301      	movs	r3, #1
 800953c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009544:	bfa4      	itt	ge
 8009546:	463b      	movge	r3, r7
 8009548:	4627      	movge	r7, r4
 800954a:	4630      	mov	r0, r6
 800954c:	6879      	ldr	r1, [r7, #4]
 800954e:	bfa6      	itte	ge
 8009550:	461c      	movge	r4, r3
 8009552:	2500      	movge	r5, #0
 8009554:	2501      	movlt	r5, #1
 8009556:	f7ff fcf5 	bl	8008f44 <_Balloc>
 800955a:	b920      	cbnz	r0, 8009566 <__mdiff+0x5a>
 800955c:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <__mdiff+0x108>)
 800955e:	4602      	mov	r2, r0
 8009560:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009564:	e7e6      	b.n	8009534 <__mdiff+0x28>
 8009566:	693e      	ldr	r6, [r7, #16]
 8009568:	60c5      	str	r5, [r0, #12]
 800956a:	6925      	ldr	r5, [r4, #16]
 800956c:	f107 0114 	add.w	r1, r7, #20
 8009570:	f104 0914 	add.w	r9, r4, #20
 8009574:	f100 0e14 	add.w	lr, r0, #20
 8009578:	f107 0210 	add.w	r2, r7, #16
 800957c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009580:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009584:	46f2      	mov	sl, lr
 8009586:	2700      	movs	r7, #0
 8009588:	f859 3b04 	ldr.w	r3, [r9], #4
 800958c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009590:	fa1f f883 	uxth.w	r8, r3
 8009594:	fa17 f78b 	uxtah	r7, r7, fp
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	eba7 0808 	sub.w	r8, r7, r8
 800959e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095a6:	fa1f f888 	uxth.w	r8, r8
 80095aa:	141f      	asrs	r7, r3, #16
 80095ac:	454d      	cmp	r5, r9
 80095ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095b2:	f84a 3b04 	str.w	r3, [sl], #4
 80095b6:	d8e7      	bhi.n	8009588 <__mdiff+0x7c>
 80095b8:	1b2b      	subs	r3, r5, r4
 80095ba:	3b15      	subs	r3, #21
 80095bc:	f023 0303 	bic.w	r3, r3, #3
 80095c0:	3304      	adds	r3, #4
 80095c2:	3415      	adds	r4, #21
 80095c4:	42a5      	cmp	r5, r4
 80095c6:	bf38      	it	cc
 80095c8:	2304      	movcc	r3, #4
 80095ca:	4419      	add	r1, r3
 80095cc:	4473      	add	r3, lr
 80095ce:	469e      	mov	lr, r3
 80095d0:	460d      	mov	r5, r1
 80095d2:	4565      	cmp	r5, ip
 80095d4:	d30e      	bcc.n	80095f4 <__mdiff+0xe8>
 80095d6:	f10c 0203 	add.w	r2, ip, #3
 80095da:	1a52      	subs	r2, r2, r1
 80095dc:	f022 0203 	bic.w	r2, r2, #3
 80095e0:	3903      	subs	r1, #3
 80095e2:	458c      	cmp	ip, r1
 80095e4:	bf38      	it	cc
 80095e6:	2200      	movcc	r2, #0
 80095e8:	441a      	add	r2, r3
 80095ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ee:	b17b      	cbz	r3, 8009610 <__mdiff+0x104>
 80095f0:	6106      	str	r6, [r0, #16]
 80095f2:	e7a5      	b.n	8009540 <__mdiff+0x34>
 80095f4:	f855 8b04 	ldr.w	r8, [r5], #4
 80095f8:	fa17 f488 	uxtah	r4, r7, r8
 80095fc:	1422      	asrs	r2, r4, #16
 80095fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009602:	b2a4      	uxth	r4, r4
 8009604:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009608:	f84e 4b04 	str.w	r4, [lr], #4
 800960c:	1417      	asrs	r7, r2, #16
 800960e:	e7e0      	b.n	80095d2 <__mdiff+0xc6>
 8009610:	3e01      	subs	r6, #1
 8009612:	e7ea      	b.n	80095ea <__mdiff+0xde>
 8009614:	0800b09c 	.word	0x0800b09c
 8009618:	0800b190 	.word	0x0800b190

0800961c <__ulp>:
 800961c:	b082      	sub	sp, #8
 800961e:	ed8d 0b00 	vstr	d0, [sp]
 8009622:	9b01      	ldr	r3, [sp, #4]
 8009624:	4912      	ldr	r1, [pc, #72]	; (8009670 <__ulp+0x54>)
 8009626:	4019      	ands	r1, r3
 8009628:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800962c:	2900      	cmp	r1, #0
 800962e:	dd05      	ble.n	800963c <__ulp+0x20>
 8009630:	2200      	movs	r2, #0
 8009632:	460b      	mov	r3, r1
 8009634:	ec43 2b10 	vmov	d0, r2, r3
 8009638:	b002      	add	sp, #8
 800963a:	4770      	bx	lr
 800963c:	4249      	negs	r1, r1
 800963e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009642:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	da04      	bge.n	800965a <__ulp+0x3e>
 8009650:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009654:	fa41 f300 	asr.w	r3, r1, r0
 8009658:	e7ec      	b.n	8009634 <__ulp+0x18>
 800965a:	f1a0 0114 	sub.w	r1, r0, #20
 800965e:	291e      	cmp	r1, #30
 8009660:	bfda      	itte	le
 8009662:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009666:	fa20 f101 	lsrle.w	r1, r0, r1
 800966a:	2101      	movgt	r1, #1
 800966c:	460a      	mov	r2, r1
 800966e:	e7e1      	b.n	8009634 <__ulp+0x18>
 8009670:	7ff00000 	.word	0x7ff00000

08009674 <__b2d>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	6905      	ldr	r5, [r0, #16]
 8009678:	f100 0714 	add.w	r7, r0, #20
 800967c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009680:	1f2e      	subs	r6, r5, #4
 8009682:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009686:	4620      	mov	r0, r4
 8009688:	f7ff fd52 	bl	8009130 <__hi0bits>
 800968c:	f1c0 0320 	rsb	r3, r0, #32
 8009690:	280a      	cmp	r0, #10
 8009692:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009710 <__b2d+0x9c>
 8009696:	600b      	str	r3, [r1, #0]
 8009698:	dc14      	bgt.n	80096c4 <__b2d+0x50>
 800969a:	f1c0 0e0b 	rsb	lr, r0, #11
 800969e:	fa24 f10e 	lsr.w	r1, r4, lr
 80096a2:	42b7      	cmp	r7, r6
 80096a4:	ea41 030c 	orr.w	r3, r1, ip
 80096a8:	bf34      	ite	cc
 80096aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096ae:	2100      	movcs	r1, #0
 80096b0:	3015      	adds	r0, #21
 80096b2:	fa04 f000 	lsl.w	r0, r4, r0
 80096b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80096ba:	ea40 0201 	orr.w	r2, r0, r1
 80096be:	ec43 2b10 	vmov	d0, r2, r3
 80096c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096c4:	42b7      	cmp	r7, r6
 80096c6:	bf3a      	itte	cc
 80096c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096cc:	f1a5 0608 	subcc.w	r6, r5, #8
 80096d0:	2100      	movcs	r1, #0
 80096d2:	380b      	subs	r0, #11
 80096d4:	d017      	beq.n	8009706 <__b2d+0x92>
 80096d6:	f1c0 0c20 	rsb	ip, r0, #32
 80096da:	fa04 f500 	lsl.w	r5, r4, r0
 80096de:	42be      	cmp	r6, r7
 80096e0:	fa21 f40c 	lsr.w	r4, r1, ip
 80096e4:	ea45 0504 	orr.w	r5, r5, r4
 80096e8:	bf8c      	ite	hi
 80096ea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80096ee:	2400      	movls	r4, #0
 80096f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80096f4:	fa01 f000 	lsl.w	r0, r1, r0
 80096f8:	fa24 f40c 	lsr.w	r4, r4, ip
 80096fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009700:	ea40 0204 	orr.w	r2, r0, r4
 8009704:	e7db      	b.n	80096be <__b2d+0x4a>
 8009706:	ea44 030c 	orr.w	r3, r4, ip
 800970a:	460a      	mov	r2, r1
 800970c:	e7d7      	b.n	80096be <__b2d+0x4a>
 800970e:	bf00      	nop
 8009710:	3ff00000 	.word	0x3ff00000

08009714 <__d2b>:
 8009714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009718:	4689      	mov	r9, r1
 800971a:	2101      	movs	r1, #1
 800971c:	ec57 6b10 	vmov	r6, r7, d0
 8009720:	4690      	mov	r8, r2
 8009722:	f7ff fc0f 	bl	8008f44 <_Balloc>
 8009726:	4604      	mov	r4, r0
 8009728:	b930      	cbnz	r0, 8009738 <__d2b+0x24>
 800972a:	4602      	mov	r2, r0
 800972c:	4b25      	ldr	r3, [pc, #148]	; (80097c4 <__d2b+0xb0>)
 800972e:	4826      	ldr	r0, [pc, #152]	; (80097c8 <__d2b+0xb4>)
 8009730:	f240 310a 	movw	r1, #778	; 0x30a
 8009734:	f000 fcbc 	bl	800a0b0 <__assert_func>
 8009738:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800973c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009740:	bb35      	cbnz	r5, 8009790 <__d2b+0x7c>
 8009742:	2e00      	cmp	r6, #0
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	d028      	beq.n	800979a <__d2b+0x86>
 8009748:	4668      	mov	r0, sp
 800974a:	9600      	str	r6, [sp, #0]
 800974c:	f7ff fd10 	bl	8009170 <__lo0bits>
 8009750:	9900      	ldr	r1, [sp, #0]
 8009752:	b300      	cbz	r0, 8009796 <__d2b+0x82>
 8009754:	9a01      	ldr	r2, [sp, #4]
 8009756:	f1c0 0320 	rsb	r3, r0, #32
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	430b      	orrs	r3, r1
 8009760:	40c2      	lsrs	r2, r0
 8009762:	6163      	str	r3, [r4, #20]
 8009764:	9201      	str	r2, [sp, #4]
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	61a3      	str	r3, [r4, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf14      	ite	ne
 800976e:	2202      	movne	r2, #2
 8009770:	2201      	moveq	r2, #1
 8009772:	6122      	str	r2, [r4, #16]
 8009774:	b1d5      	cbz	r5, 80097ac <__d2b+0x98>
 8009776:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800977a:	4405      	add	r5, r0
 800977c:	f8c9 5000 	str.w	r5, [r9]
 8009780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009784:	f8c8 0000 	str.w	r0, [r8]
 8009788:	4620      	mov	r0, r4
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009794:	e7d5      	b.n	8009742 <__d2b+0x2e>
 8009796:	6161      	str	r1, [r4, #20]
 8009798:	e7e5      	b.n	8009766 <__d2b+0x52>
 800979a:	a801      	add	r0, sp, #4
 800979c:	f7ff fce8 	bl	8009170 <__lo0bits>
 80097a0:	9b01      	ldr	r3, [sp, #4]
 80097a2:	6163      	str	r3, [r4, #20]
 80097a4:	2201      	movs	r2, #1
 80097a6:	6122      	str	r2, [r4, #16]
 80097a8:	3020      	adds	r0, #32
 80097aa:	e7e3      	b.n	8009774 <__d2b+0x60>
 80097ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097b4:	f8c9 0000 	str.w	r0, [r9]
 80097b8:	6918      	ldr	r0, [r3, #16]
 80097ba:	f7ff fcb9 	bl	8009130 <__hi0bits>
 80097be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097c2:	e7df      	b.n	8009784 <__d2b+0x70>
 80097c4:	0800b09c 	.word	0x0800b09c
 80097c8:	0800b190 	.word	0x0800b190

080097cc <__ratio>:
 80097cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4688      	mov	r8, r1
 80097d2:	4669      	mov	r1, sp
 80097d4:	4681      	mov	r9, r0
 80097d6:	f7ff ff4d 	bl	8009674 <__b2d>
 80097da:	a901      	add	r1, sp, #4
 80097dc:	4640      	mov	r0, r8
 80097de:	ec55 4b10 	vmov	r4, r5, d0
 80097e2:	f7ff ff47 	bl	8009674 <__b2d>
 80097e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097ea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097ee:	eba3 0c02 	sub.w	ip, r3, r2
 80097f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097fc:	ec51 0b10 	vmov	r0, r1, d0
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfd6      	itet	le
 8009804:	460a      	movle	r2, r1
 8009806:	462a      	movgt	r2, r5
 8009808:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800980c:	468b      	mov	fp, r1
 800980e:	462f      	mov	r7, r5
 8009810:	bfd4      	ite	le
 8009812:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009816:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800981a:	4620      	mov	r0, r4
 800981c:	ee10 2a10 	vmov	r2, s0
 8009820:	465b      	mov	r3, fp
 8009822:	4639      	mov	r1, r7
 8009824:	f7f7 f81a 	bl	800085c <__aeabi_ddiv>
 8009828:	ec41 0b10 	vmov	d0, r0, r1
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009832 <__copybits>:
 8009832:	3901      	subs	r1, #1
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	1149      	asrs	r1, r1, #5
 8009838:	6914      	ldr	r4, [r2, #16]
 800983a:	3101      	adds	r1, #1
 800983c:	f102 0314 	add.w	r3, r2, #20
 8009840:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009844:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009848:	1f05      	subs	r5, r0, #4
 800984a:	42a3      	cmp	r3, r4
 800984c:	d30c      	bcc.n	8009868 <__copybits+0x36>
 800984e:	1aa3      	subs	r3, r4, r2
 8009850:	3b11      	subs	r3, #17
 8009852:	f023 0303 	bic.w	r3, r3, #3
 8009856:	3211      	adds	r2, #17
 8009858:	42a2      	cmp	r2, r4
 800985a:	bf88      	it	hi
 800985c:	2300      	movhi	r3, #0
 800985e:	4418      	add	r0, r3
 8009860:	2300      	movs	r3, #0
 8009862:	4288      	cmp	r0, r1
 8009864:	d305      	bcc.n	8009872 <__copybits+0x40>
 8009866:	bd70      	pop	{r4, r5, r6, pc}
 8009868:	f853 6b04 	ldr.w	r6, [r3], #4
 800986c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009870:	e7eb      	b.n	800984a <__copybits+0x18>
 8009872:	f840 3b04 	str.w	r3, [r0], #4
 8009876:	e7f4      	b.n	8009862 <__copybits+0x30>

08009878 <__any_on>:
 8009878:	f100 0214 	add.w	r2, r0, #20
 800987c:	6900      	ldr	r0, [r0, #16]
 800987e:	114b      	asrs	r3, r1, #5
 8009880:	4298      	cmp	r0, r3
 8009882:	b510      	push	{r4, lr}
 8009884:	db11      	blt.n	80098aa <__any_on+0x32>
 8009886:	dd0a      	ble.n	800989e <__any_on+0x26>
 8009888:	f011 011f 	ands.w	r1, r1, #31
 800988c:	d007      	beq.n	800989e <__any_on+0x26>
 800988e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009892:	fa24 f001 	lsr.w	r0, r4, r1
 8009896:	fa00 f101 	lsl.w	r1, r0, r1
 800989a:	428c      	cmp	r4, r1
 800989c:	d10b      	bne.n	80098b6 <__any_on+0x3e>
 800989e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d803      	bhi.n	80098ae <__any_on+0x36>
 80098a6:	2000      	movs	r0, #0
 80098a8:	bd10      	pop	{r4, pc}
 80098aa:	4603      	mov	r3, r0
 80098ac:	e7f7      	b.n	800989e <__any_on+0x26>
 80098ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d0f5      	beq.n	80098a2 <__any_on+0x2a>
 80098b6:	2001      	movs	r0, #1
 80098b8:	e7f6      	b.n	80098a8 <__any_on+0x30>

080098ba <_calloc_r>:
 80098ba:	b513      	push	{r0, r1, r4, lr}
 80098bc:	434a      	muls	r2, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	9201      	str	r2, [sp, #4]
 80098c2:	f000 f859 	bl	8009978 <_malloc_r>
 80098c6:	4604      	mov	r4, r0
 80098c8:	b118      	cbz	r0, 80098d2 <_calloc_r+0x18>
 80098ca:	9a01      	ldr	r2, [sp, #4]
 80098cc:	2100      	movs	r1, #0
 80098ce:	f7fc f853 	bl	8005978 <memset>
 80098d2:	4620      	mov	r0, r4
 80098d4:	b002      	add	sp, #8
 80098d6:	bd10      	pop	{r4, pc}

080098d8 <_free_r>:
 80098d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098da:	2900      	cmp	r1, #0
 80098dc:	d048      	beq.n	8009970 <_free_r+0x98>
 80098de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e2:	9001      	str	r0, [sp, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f1a1 0404 	sub.w	r4, r1, #4
 80098ea:	bfb8      	it	lt
 80098ec:	18e4      	addlt	r4, r4, r3
 80098ee:	f000 fc6d 	bl	800a1cc <__malloc_lock>
 80098f2:	4a20      	ldr	r2, [pc, #128]	; (8009974 <_free_r+0x9c>)
 80098f4:	9801      	ldr	r0, [sp, #4]
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	4615      	mov	r5, r2
 80098fa:	b933      	cbnz	r3, 800990a <_free_r+0x32>
 80098fc:	6063      	str	r3, [r4, #4]
 80098fe:	6014      	str	r4, [r2, #0]
 8009900:	b003      	add	sp, #12
 8009902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009906:	f000 bc67 	b.w	800a1d8 <__malloc_unlock>
 800990a:	42a3      	cmp	r3, r4
 800990c:	d90b      	bls.n	8009926 <_free_r+0x4e>
 800990e:	6821      	ldr	r1, [r4, #0]
 8009910:	1862      	adds	r2, r4, r1
 8009912:	4293      	cmp	r3, r2
 8009914:	bf04      	itt	eq
 8009916:	681a      	ldreq	r2, [r3, #0]
 8009918:	685b      	ldreq	r3, [r3, #4]
 800991a:	6063      	str	r3, [r4, #4]
 800991c:	bf04      	itt	eq
 800991e:	1852      	addeq	r2, r2, r1
 8009920:	6022      	streq	r2, [r4, #0]
 8009922:	602c      	str	r4, [r5, #0]
 8009924:	e7ec      	b.n	8009900 <_free_r+0x28>
 8009926:	461a      	mov	r2, r3
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	b10b      	cbz	r3, 8009930 <_free_r+0x58>
 800992c:	42a3      	cmp	r3, r4
 800992e:	d9fa      	bls.n	8009926 <_free_r+0x4e>
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	1855      	adds	r5, r2, r1
 8009934:	42a5      	cmp	r5, r4
 8009936:	d10b      	bne.n	8009950 <_free_r+0x78>
 8009938:	6824      	ldr	r4, [r4, #0]
 800993a:	4421      	add	r1, r4
 800993c:	1854      	adds	r4, r2, r1
 800993e:	42a3      	cmp	r3, r4
 8009940:	6011      	str	r1, [r2, #0]
 8009942:	d1dd      	bne.n	8009900 <_free_r+0x28>
 8009944:	681c      	ldr	r4, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	6053      	str	r3, [r2, #4]
 800994a:	4421      	add	r1, r4
 800994c:	6011      	str	r1, [r2, #0]
 800994e:	e7d7      	b.n	8009900 <_free_r+0x28>
 8009950:	d902      	bls.n	8009958 <_free_r+0x80>
 8009952:	230c      	movs	r3, #12
 8009954:	6003      	str	r3, [r0, #0]
 8009956:	e7d3      	b.n	8009900 <_free_r+0x28>
 8009958:	6825      	ldr	r5, [r4, #0]
 800995a:	1961      	adds	r1, r4, r5
 800995c:	428b      	cmp	r3, r1
 800995e:	bf04      	itt	eq
 8009960:	6819      	ldreq	r1, [r3, #0]
 8009962:	685b      	ldreq	r3, [r3, #4]
 8009964:	6063      	str	r3, [r4, #4]
 8009966:	bf04      	itt	eq
 8009968:	1949      	addeq	r1, r1, r5
 800996a:	6021      	streq	r1, [r4, #0]
 800996c:	6054      	str	r4, [r2, #4]
 800996e:	e7c7      	b.n	8009900 <_free_r+0x28>
 8009970:	b003      	add	sp, #12
 8009972:	bd30      	pop	{r4, r5, pc}
 8009974:	20000254 	.word	0x20000254

08009978 <_malloc_r>:
 8009978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997a:	1ccd      	adds	r5, r1, #3
 800997c:	f025 0503 	bic.w	r5, r5, #3
 8009980:	3508      	adds	r5, #8
 8009982:	2d0c      	cmp	r5, #12
 8009984:	bf38      	it	cc
 8009986:	250c      	movcc	r5, #12
 8009988:	2d00      	cmp	r5, #0
 800998a:	4606      	mov	r6, r0
 800998c:	db01      	blt.n	8009992 <_malloc_r+0x1a>
 800998e:	42a9      	cmp	r1, r5
 8009990:	d903      	bls.n	800999a <_malloc_r+0x22>
 8009992:	230c      	movs	r3, #12
 8009994:	6033      	str	r3, [r6, #0]
 8009996:	2000      	movs	r0, #0
 8009998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800999a:	f000 fc17 	bl	800a1cc <__malloc_lock>
 800999e:	4921      	ldr	r1, [pc, #132]	; (8009a24 <_malloc_r+0xac>)
 80099a0:	680a      	ldr	r2, [r1, #0]
 80099a2:	4614      	mov	r4, r2
 80099a4:	b99c      	cbnz	r4, 80099ce <_malloc_r+0x56>
 80099a6:	4f20      	ldr	r7, [pc, #128]	; (8009a28 <_malloc_r+0xb0>)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	b923      	cbnz	r3, 80099b6 <_malloc_r+0x3e>
 80099ac:	4621      	mov	r1, r4
 80099ae:	4630      	mov	r0, r6
 80099b0:	f000 fafa 	bl	8009fa8 <_sbrk_r>
 80099b4:	6038      	str	r0, [r7, #0]
 80099b6:	4629      	mov	r1, r5
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 faf5 	bl	8009fa8 <_sbrk_r>
 80099be:	1c43      	adds	r3, r0, #1
 80099c0:	d123      	bne.n	8009a0a <_malloc_r+0x92>
 80099c2:	230c      	movs	r3, #12
 80099c4:	6033      	str	r3, [r6, #0]
 80099c6:	4630      	mov	r0, r6
 80099c8:	f000 fc06 	bl	800a1d8 <__malloc_unlock>
 80099cc:	e7e3      	b.n	8009996 <_malloc_r+0x1e>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	1b5b      	subs	r3, r3, r5
 80099d2:	d417      	bmi.n	8009a04 <_malloc_r+0x8c>
 80099d4:	2b0b      	cmp	r3, #11
 80099d6:	d903      	bls.n	80099e0 <_malloc_r+0x68>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	441c      	add	r4, r3
 80099dc:	6025      	str	r5, [r4, #0]
 80099de:	e004      	b.n	80099ea <_malloc_r+0x72>
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	42a2      	cmp	r2, r4
 80099e4:	bf0c      	ite	eq
 80099e6:	600b      	streq	r3, [r1, #0]
 80099e8:	6053      	strne	r3, [r2, #4]
 80099ea:	4630      	mov	r0, r6
 80099ec:	f000 fbf4 	bl	800a1d8 <__malloc_unlock>
 80099f0:	f104 000b 	add.w	r0, r4, #11
 80099f4:	1d23      	adds	r3, r4, #4
 80099f6:	f020 0007 	bic.w	r0, r0, #7
 80099fa:	1ac2      	subs	r2, r0, r3
 80099fc:	d0cc      	beq.n	8009998 <_malloc_r+0x20>
 80099fe:	1a1b      	subs	r3, r3, r0
 8009a00:	50a3      	str	r3, [r4, r2]
 8009a02:	e7c9      	b.n	8009998 <_malloc_r+0x20>
 8009a04:	4622      	mov	r2, r4
 8009a06:	6864      	ldr	r4, [r4, #4]
 8009a08:	e7cc      	b.n	80099a4 <_malloc_r+0x2c>
 8009a0a:	1cc4      	adds	r4, r0, #3
 8009a0c:	f024 0403 	bic.w	r4, r4, #3
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d0e3      	beq.n	80099dc <_malloc_r+0x64>
 8009a14:	1a21      	subs	r1, r4, r0
 8009a16:	4630      	mov	r0, r6
 8009a18:	f000 fac6 	bl	8009fa8 <_sbrk_r>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d1dd      	bne.n	80099dc <_malloc_r+0x64>
 8009a20:	e7cf      	b.n	80099c2 <_malloc_r+0x4a>
 8009a22:	bf00      	nop
 8009a24:	20000254 	.word	0x20000254
 8009a28:	20000258 	.word	0x20000258

08009a2c <__ssputs_r>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	688e      	ldr	r6, [r1, #8]
 8009a32:	429e      	cmp	r6, r3
 8009a34:	4682      	mov	sl, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4690      	mov	r8, r2
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	d838      	bhi.n	8009ab0 <__ssputs_r+0x84>
 8009a3e:	898a      	ldrh	r2, [r1, #12]
 8009a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a44:	d032      	beq.n	8009aac <__ssputs_r+0x80>
 8009a46:	6825      	ldr	r5, [r4, #0]
 8009a48:	6909      	ldr	r1, [r1, #16]
 8009a4a:	eba5 0901 	sub.w	r9, r5, r1
 8009a4e:	6965      	ldr	r5, [r4, #20]
 8009a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a58:	3301      	adds	r3, #1
 8009a5a:	444b      	add	r3, r9
 8009a5c:	106d      	asrs	r5, r5, #1
 8009a5e:	429d      	cmp	r5, r3
 8009a60:	bf38      	it	cc
 8009a62:	461d      	movcc	r5, r3
 8009a64:	0553      	lsls	r3, r2, #21
 8009a66:	d531      	bpl.n	8009acc <__ssputs_r+0xa0>
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7ff ff85 	bl	8009978 <_malloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	b950      	cbnz	r0, 8009a88 <__ssputs_r+0x5c>
 8009a72:	230c      	movs	r3, #12
 8009a74:	f8ca 3000 	str.w	r3, [sl]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	6921      	ldr	r1, [r4, #16]
 8009a8a:	464a      	mov	r2, r9
 8009a8c:	f7ff fa4c 	bl	8008f28 <memcpy>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	6126      	str	r6, [r4, #16]
 8009a9e:	6165      	str	r5, [r4, #20]
 8009aa0:	444e      	add	r6, r9
 8009aa2:	eba5 0509 	sub.w	r5, r5, r9
 8009aa6:	6026      	str	r6, [r4, #0]
 8009aa8:	60a5      	str	r5, [r4, #8]
 8009aaa:	463e      	mov	r6, r7
 8009aac:	42be      	cmp	r6, r7
 8009aae:	d900      	bls.n	8009ab2 <__ssputs_r+0x86>
 8009ab0:	463e      	mov	r6, r7
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	6820      	ldr	r0, [r4, #0]
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	f000 fb6e 	bl	800a198 <memmove>
 8009abc:	68a3      	ldr	r3, [r4, #8]
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	1b9b      	subs	r3, r3, r6
 8009ac2:	4432      	add	r2, r6
 8009ac4:	60a3      	str	r3, [r4, #8]
 8009ac6:	6022      	str	r2, [r4, #0]
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e7db      	b.n	8009a84 <__ssputs_r+0x58>
 8009acc:	462a      	mov	r2, r5
 8009ace:	f000 fb89 	bl	800a1e4 <_realloc_r>
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1e1      	bne.n	8009a9c <__ssputs_r+0x70>
 8009ad8:	6921      	ldr	r1, [r4, #16]
 8009ada:	4650      	mov	r0, sl
 8009adc:	f7ff fefc 	bl	80098d8 <_free_r>
 8009ae0:	e7c7      	b.n	8009a72 <__ssputs_r+0x46>
	...

08009ae4 <_svfiprintf_r>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	4698      	mov	r8, r3
 8009aea:	898b      	ldrh	r3, [r1, #12]
 8009aec:	061b      	lsls	r3, r3, #24
 8009aee:	b09d      	sub	sp, #116	; 0x74
 8009af0:	4607      	mov	r7, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	d50e      	bpl.n	8009b16 <_svfiprintf_r+0x32>
 8009af8:	690b      	ldr	r3, [r1, #16]
 8009afa:	b963      	cbnz	r3, 8009b16 <_svfiprintf_r+0x32>
 8009afc:	2140      	movs	r1, #64	; 0x40
 8009afe:	f7ff ff3b 	bl	8009978 <_malloc_r>
 8009b02:	6028      	str	r0, [r5, #0]
 8009b04:	6128      	str	r0, [r5, #16]
 8009b06:	b920      	cbnz	r0, 8009b12 <_svfiprintf_r+0x2e>
 8009b08:	230c      	movs	r3, #12
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e0d1      	b.n	8009cb6 <_svfiprintf_r+0x1d2>
 8009b12:	2340      	movs	r3, #64	; 0x40
 8009b14:	616b      	str	r3, [r5, #20]
 8009b16:	2300      	movs	r3, #0
 8009b18:	9309      	str	r3, [sp, #36]	; 0x24
 8009b1a:	2320      	movs	r3, #32
 8009b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b24:	2330      	movs	r3, #48	; 0x30
 8009b26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009cd0 <_svfiprintf_r+0x1ec>
 8009b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2e:	f04f 0901 	mov.w	r9, #1
 8009b32:	4623      	mov	r3, r4
 8009b34:	469a      	mov	sl, r3
 8009b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b3a:	b10a      	cbz	r2, 8009b40 <_svfiprintf_r+0x5c>
 8009b3c:	2a25      	cmp	r2, #37	; 0x25
 8009b3e:	d1f9      	bne.n	8009b34 <_svfiprintf_r+0x50>
 8009b40:	ebba 0b04 	subs.w	fp, sl, r4
 8009b44:	d00b      	beq.n	8009b5e <_svfiprintf_r+0x7a>
 8009b46:	465b      	mov	r3, fp
 8009b48:	4622      	mov	r2, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	4638      	mov	r0, r7
 8009b4e:	f7ff ff6d 	bl	8009a2c <__ssputs_r>
 8009b52:	3001      	adds	r0, #1
 8009b54:	f000 80aa 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5a:	445a      	add	r2, fp
 8009b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80a2 	beq.w	8009cac <_svfiprintf_r+0x1c8>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b72:	f10a 0a01 	add.w	sl, sl, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	9307      	str	r3, [sp, #28]
 8009b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b80:	4654      	mov	r4, sl
 8009b82:	2205      	movs	r2, #5
 8009b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b88:	4851      	ldr	r0, [pc, #324]	; (8009cd0 <_svfiprintf_r+0x1ec>)
 8009b8a:	f7f6 fb31 	bl	80001f0 <memchr>
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	b9d8      	cbnz	r0, 8009bca <_svfiprintf_r+0xe6>
 8009b92:	06d0      	lsls	r0, r2, #27
 8009b94:	bf44      	itt	mi
 8009b96:	2320      	movmi	r3, #32
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9c:	0711      	lsls	r1, r2, #28
 8009b9e:	bf44      	itt	mi
 8009ba0:	232b      	movmi	r3, #43	; 0x2b
 8009ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8009baa:	2b2a      	cmp	r3, #42	; 0x2a
 8009bac:	d015      	beq.n	8009bda <_svfiprintf_r+0xf6>
 8009bae:	9a07      	ldr	r2, [sp, #28]
 8009bb0:	4654      	mov	r4, sl
 8009bb2:	2000      	movs	r0, #0
 8009bb4:	f04f 0c0a 	mov.w	ip, #10
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bbe:	3b30      	subs	r3, #48	; 0x30
 8009bc0:	2b09      	cmp	r3, #9
 8009bc2:	d94e      	bls.n	8009c62 <_svfiprintf_r+0x17e>
 8009bc4:	b1b0      	cbz	r0, 8009bf4 <_svfiprintf_r+0x110>
 8009bc6:	9207      	str	r2, [sp, #28]
 8009bc8:	e014      	b.n	8009bf4 <_svfiprintf_r+0x110>
 8009bca:	eba0 0308 	sub.w	r3, r0, r8
 8009bce:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	46a2      	mov	sl, r4
 8009bd8:	e7d2      	b.n	8009b80 <_svfiprintf_r+0x9c>
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	1d19      	adds	r1, r3, #4
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	9103      	str	r1, [sp, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	bfbb      	ittet	lt
 8009be6:	425b      	neglt	r3, r3
 8009be8:	f042 0202 	orrlt.w	r2, r2, #2
 8009bec:	9307      	strge	r3, [sp, #28]
 8009bee:	9307      	strlt	r3, [sp, #28]
 8009bf0:	bfb8      	it	lt
 8009bf2:	9204      	strlt	r2, [sp, #16]
 8009bf4:	7823      	ldrb	r3, [r4, #0]
 8009bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf8:	d10c      	bne.n	8009c14 <_svfiprintf_r+0x130>
 8009bfa:	7863      	ldrb	r3, [r4, #1]
 8009bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfe:	d135      	bne.n	8009c6c <_svfiprintf_r+0x188>
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	1d1a      	adds	r2, r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	9203      	str	r2, [sp, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfb8      	it	lt
 8009c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c10:	3402      	adds	r4, #2
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ce0 <_svfiprintf_r+0x1fc>
 8009c18:	7821      	ldrb	r1, [r4, #0]
 8009c1a:	2203      	movs	r2, #3
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	f7f6 fae7 	bl	80001f0 <memchr>
 8009c22:	b140      	cbz	r0, 8009c36 <_svfiprintf_r+0x152>
 8009c24:	2340      	movs	r3, #64	; 0x40
 8009c26:	eba0 000a 	sub.w	r0, r0, sl
 8009c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	4303      	orrs	r3, r0
 8009c32:	3401      	adds	r4, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4826      	ldr	r0, [pc, #152]	; (8009cd4 <_svfiprintf_r+0x1f0>)
 8009c3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c40:	2206      	movs	r2, #6
 8009c42:	f7f6 fad5 	bl	80001f0 <memchr>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d038      	beq.n	8009cbc <_svfiprintf_r+0x1d8>
 8009c4a:	4b23      	ldr	r3, [pc, #140]	; (8009cd8 <_svfiprintf_r+0x1f4>)
 8009c4c:	bb1b      	cbnz	r3, 8009c96 <_svfiprintf_r+0x1b2>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3307      	adds	r3, #7
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	3308      	adds	r3, #8
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5c:	4433      	add	r3, r6
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	e767      	b.n	8009b32 <_svfiprintf_r+0x4e>
 8009c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c66:	460c      	mov	r4, r1
 8009c68:	2001      	movs	r0, #1
 8009c6a:	e7a5      	b.n	8009bb8 <_svfiprintf_r+0xd4>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	3401      	adds	r4, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7e:	3a30      	subs	r2, #48	; 0x30
 8009c80:	2a09      	cmp	r2, #9
 8009c82:	d903      	bls.n	8009c8c <_svfiprintf_r+0x1a8>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c5      	beq.n	8009c14 <_svfiprintf_r+0x130>
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	e7c3      	b.n	8009c14 <_svfiprintf_r+0x130>
 8009c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c90:	4604      	mov	r4, r0
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f0      	b.n	8009c78 <_svfiprintf_r+0x194>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7fb ff11 	bl	8005ac8 <_printf_float>
 8009ca6:	1c42      	adds	r2, r0, #1
 8009ca8:	4606      	mov	r6, r0
 8009caa:	d1d6      	bne.n	8009c5a <_svfiprintf_r+0x176>
 8009cac:	89ab      	ldrh	r3, [r5, #12]
 8009cae:	065b      	lsls	r3, r3, #25
 8009cb0:	f53f af2c 	bmi.w	8009b0c <_svfiprintf_r+0x28>
 8009cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb6:	b01d      	add	sp, #116	; 0x74
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	ab03      	add	r3, sp, #12
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	462a      	mov	r2, r5
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <_svfiprintf_r+0x1f8>)
 8009cc4:	a904      	add	r1, sp, #16
 8009cc6:	4638      	mov	r0, r7
 8009cc8:	f7fc f9a2 	bl	8006010 <_printf_i>
 8009ccc:	e7eb      	b.n	8009ca6 <_svfiprintf_r+0x1c2>
 8009cce:	bf00      	nop
 8009cd0:	0800b2ec 	.word	0x0800b2ec
 8009cd4:	0800b2f6 	.word	0x0800b2f6
 8009cd8:	08005ac9 	.word	0x08005ac9
 8009cdc:	08009a2d 	.word	0x08009a2d
 8009ce0:	0800b2f2 	.word	0x0800b2f2

08009ce4 <__sfputc_r>:
 8009ce4:	6893      	ldr	r3, [r2, #8]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	b410      	push	{r4}
 8009cec:	6093      	str	r3, [r2, #8]
 8009cee:	da08      	bge.n	8009d02 <__sfputc_r+0x1e>
 8009cf0:	6994      	ldr	r4, [r2, #24]
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	db01      	blt.n	8009cfa <__sfputc_r+0x16>
 8009cf6:	290a      	cmp	r1, #10
 8009cf8:	d103      	bne.n	8009d02 <__sfputc_r+0x1e>
 8009cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfe:	f7fd bc2f 	b.w	8007560 <__swbuf_r>
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	1c58      	adds	r0, r3, #1
 8009d06:	6010      	str	r0, [r2, #0]
 8009d08:	7019      	strb	r1, [r3, #0]
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <__sfputs_r>:
 8009d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d14:	4606      	mov	r6, r0
 8009d16:	460f      	mov	r7, r1
 8009d18:	4614      	mov	r4, r2
 8009d1a:	18d5      	adds	r5, r2, r3
 8009d1c:	42ac      	cmp	r4, r5
 8009d1e:	d101      	bne.n	8009d24 <__sfputs_r+0x12>
 8009d20:	2000      	movs	r0, #0
 8009d22:	e007      	b.n	8009d34 <__sfputs_r+0x22>
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	463a      	mov	r2, r7
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ffda 	bl	8009ce4 <__sfputc_r>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d1f3      	bne.n	8009d1c <__sfputs_r+0xa>
 8009d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d38 <_vfiprintf_r>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	b09d      	sub	sp, #116	; 0x74
 8009d40:	4614      	mov	r4, r2
 8009d42:	4698      	mov	r8, r3
 8009d44:	4606      	mov	r6, r0
 8009d46:	b118      	cbz	r0, 8009d50 <_vfiprintf_r+0x18>
 8009d48:	6983      	ldr	r3, [r0, #24]
 8009d4a:	b90b      	cbnz	r3, 8009d50 <_vfiprintf_r+0x18>
 8009d4c:	f7fe fc5a 	bl	8008604 <__sinit>
 8009d50:	4b89      	ldr	r3, [pc, #548]	; (8009f78 <_vfiprintf_r+0x240>)
 8009d52:	429d      	cmp	r5, r3
 8009d54:	d11b      	bne.n	8009d8e <_vfiprintf_r+0x56>
 8009d56:	6875      	ldr	r5, [r6, #4]
 8009d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x32>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x32>
 8009d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d66:	f7ff f85e 	bl	8008e26 <__retarget_lock_acquire_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	071b      	lsls	r3, r3, #28
 8009d6e:	d501      	bpl.n	8009d74 <_vfiprintf_r+0x3c>
 8009d70:	692b      	ldr	r3, [r5, #16]
 8009d72:	b9eb      	cbnz	r3, 8009db0 <_vfiprintf_r+0x78>
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7fd fc44 	bl	8007604 <__swsetup_r>
 8009d7c:	b1c0      	cbz	r0, 8009db0 <_vfiprintf_r+0x78>
 8009d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d80:	07dc      	lsls	r4, r3, #31
 8009d82:	d50e      	bpl.n	8009da2 <_vfiprintf_r+0x6a>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	b01d      	add	sp, #116	; 0x74
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	4b7b      	ldr	r3, [pc, #492]	; (8009f7c <_vfiprintf_r+0x244>)
 8009d90:	429d      	cmp	r5, r3
 8009d92:	d101      	bne.n	8009d98 <_vfiprintf_r+0x60>
 8009d94:	68b5      	ldr	r5, [r6, #8]
 8009d96:	e7df      	b.n	8009d58 <_vfiprintf_r+0x20>
 8009d98:	4b79      	ldr	r3, [pc, #484]	; (8009f80 <_vfiprintf_r+0x248>)
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	bf08      	it	eq
 8009d9e:	68f5      	ldreq	r5, [r6, #12]
 8009da0:	e7da      	b.n	8009d58 <_vfiprintf_r+0x20>
 8009da2:	89ab      	ldrh	r3, [r5, #12]
 8009da4:	0598      	lsls	r0, r3, #22
 8009da6:	d4ed      	bmi.n	8009d84 <_vfiprintf_r+0x4c>
 8009da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009daa:	f7ff f83d 	bl	8008e28 <__retarget_lock_release_recursive>
 8009dae:	e7e9      	b.n	8009d84 <_vfiprintf_r+0x4c>
 8009db0:	2300      	movs	r3, #0
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	2320      	movs	r3, #32
 8009db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dbe:	2330      	movs	r3, #48	; 0x30
 8009dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f84 <_vfiprintf_r+0x24c>
 8009dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc8:	f04f 0901 	mov.w	r9, #1
 8009dcc:	4623      	mov	r3, r4
 8009dce:	469a      	mov	sl, r3
 8009dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd4:	b10a      	cbz	r2, 8009dda <_vfiprintf_r+0xa2>
 8009dd6:	2a25      	cmp	r2, #37	; 0x25
 8009dd8:	d1f9      	bne.n	8009dce <_vfiprintf_r+0x96>
 8009dda:	ebba 0b04 	subs.w	fp, sl, r4
 8009dde:	d00b      	beq.n	8009df8 <_vfiprintf_r+0xc0>
 8009de0:	465b      	mov	r3, fp
 8009de2:	4622      	mov	r2, r4
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7ff ff93 	bl	8009d12 <__sfputs_r>
 8009dec:	3001      	adds	r0, #1
 8009dee:	f000 80aa 	beq.w	8009f46 <_vfiprintf_r+0x20e>
 8009df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009df4:	445a      	add	r2, fp
 8009df6:	9209      	str	r2, [sp, #36]	; 0x24
 8009df8:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 80a2 	beq.w	8009f46 <_vfiprintf_r+0x20e>
 8009e02:	2300      	movs	r3, #0
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0c:	f10a 0a01 	add.w	sl, sl, #1
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	9307      	str	r3, [sp, #28]
 8009e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e18:	931a      	str	r3, [sp, #104]	; 0x68
 8009e1a:	4654      	mov	r4, sl
 8009e1c:	2205      	movs	r2, #5
 8009e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e22:	4858      	ldr	r0, [pc, #352]	; (8009f84 <_vfiprintf_r+0x24c>)
 8009e24:	f7f6 f9e4 	bl	80001f0 <memchr>
 8009e28:	9a04      	ldr	r2, [sp, #16]
 8009e2a:	b9d8      	cbnz	r0, 8009e64 <_vfiprintf_r+0x12c>
 8009e2c:	06d1      	lsls	r1, r2, #27
 8009e2e:	bf44      	itt	mi
 8009e30:	2320      	movmi	r3, #32
 8009e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e36:	0713      	lsls	r3, r2, #28
 8009e38:	bf44      	itt	mi
 8009e3a:	232b      	movmi	r3, #43	; 0x2b
 8009e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e40:	f89a 3000 	ldrb.w	r3, [sl]
 8009e44:	2b2a      	cmp	r3, #42	; 0x2a
 8009e46:	d015      	beq.n	8009e74 <_vfiprintf_r+0x13c>
 8009e48:	9a07      	ldr	r2, [sp, #28]
 8009e4a:	4654      	mov	r4, sl
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	f04f 0c0a 	mov.w	ip, #10
 8009e52:	4621      	mov	r1, r4
 8009e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e58:	3b30      	subs	r3, #48	; 0x30
 8009e5a:	2b09      	cmp	r3, #9
 8009e5c:	d94e      	bls.n	8009efc <_vfiprintf_r+0x1c4>
 8009e5e:	b1b0      	cbz	r0, 8009e8e <_vfiprintf_r+0x156>
 8009e60:	9207      	str	r2, [sp, #28]
 8009e62:	e014      	b.n	8009e8e <_vfiprintf_r+0x156>
 8009e64:	eba0 0308 	sub.w	r3, r0, r8
 8009e68:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	9304      	str	r3, [sp, #16]
 8009e70:	46a2      	mov	sl, r4
 8009e72:	e7d2      	b.n	8009e1a <_vfiprintf_r+0xe2>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	1d19      	adds	r1, r3, #4
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	9103      	str	r1, [sp, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfbb      	ittet	lt
 8009e80:	425b      	neglt	r3, r3
 8009e82:	f042 0202 	orrlt.w	r2, r2, #2
 8009e86:	9307      	strge	r3, [sp, #28]
 8009e88:	9307      	strlt	r3, [sp, #28]
 8009e8a:	bfb8      	it	lt
 8009e8c:	9204      	strlt	r2, [sp, #16]
 8009e8e:	7823      	ldrb	r3, [r4, #0]
 8009e90:	2b2e      	cmp	r3, #46	; 0x2e
 8009e92:	d10c      	bne.n	8009eae <_vfiprintf_r+0x176>
 8009e94:	7863      	ldrb	r3, [r4, #1]
 8009e96:	2b2a      	cmp	r3, #42	; 0x2a
 8009e98:	d135      	bne.n	8009f06 <_vfiprintf_r+0x1ce>
 8009e9a:	9b03      	ldr	r3, [sp, #12]
 8009e9c:	1d1a      	adds	r2, r3, #4
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	9203      	str	r2, [sp, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfb8      	it	lt
 8009ea6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eaa:	3402      	adds	r4, #2
 8009eac:	9305      	str	r3, [sp, #20]
 8009eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f94 <_vfiprintf_r+0x25c>
 8009eb2:	7821      	ldrb	r1, [r4, #0]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	4650      	mov	r0, sl
 8009eb8:	f7f6 f99a 	bl	80001f0 <memchr>
 8009ebc:	b140      	cbz	r0, 8009ed0 <_vfiprintf_r+0x198>
 8009ebe:	2340      	movs	r3, #64	; 0x40
 8009ec0:	eba0 000a 	sub.w	r0, r0, sl
 8009ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec8:	9b04      	ldr	r3, [sp, #16]
 8009eca:	4303      	orrs	r3, r0
 8009ecc:	3401      	adds	r4, #1
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed4:	482c      	ldr	r0, [pc, #176]	; (8009f88 <_vfiprintf_r+0x250>)
 8009ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009eda:	2206      	movs	r2, #6
 8009edc:	f7f6 f988 	bl	80001f0 <memchr>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d03f      	beq.n	8009f64 <_vfiprintf_r+0x22c>
 8009ee4:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <_vfiprintf_r+0x254>)
 8009ee6:	bb1b      	cbnz	r3, 8009f30 <_vfiprintf_r+0x1f8>
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	3307      	adds	r3, #7
 8009eec:	f023 0307 	bic.w	r3, r3, #7
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	443b      	add	r3, r7
 8009ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8009efa:	e767      	b.n	8009dcc <_vfiprintf_r+0x94>
 8009efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f00:	460c      	mov	r4, r1
 8009f02:	2001      	movs	r0, #1
 8009f04:	e7a5      	b.n	8009e52 <_vfiprintf_r+0x11a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	3401      	adds	r4, #1
 8009f0a:	9305      	str	r3, [sp, #20]
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	f04f 0c0a 	mov.w	ip, #10
 8009f12:	4620      	mov	r0, r4
 8009f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f18:	3a30      	subs	r2, #48	; 0x30
 8009f1a:	2a09      	cmp	r2, #9
 8009f1c:	d903      	bls.n	8009f26 <_vfiprintf_r+0x1ee>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0c5      	beq.n	8009eae <_vfiprintf_r+0x176>
 8009f22:	9105      	str	r1, [sp, #20]
 8009f24:	e7c3      	b.n	8009eae <_vfiprintf_r+0x176>
 8009f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e7f0      	b.n	8009f12 <_vfiprintf_r+0x1da>
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	462a      	mov	r2, r5
 8009f36:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <_vfiprintf_r+0x258>)
 8009f38:	a904      	add	r1, sp, #16
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7fb fdc4 	bl	8005ac8 <_printf_float>
 8009f40:	4607      	mov	r7, r0
 8009f42:	1c78      	adds	r0, r7, #1
 8009f44:	d1d6      	bne.n	8009ef4 <_vfiprintf_r+0x1bc>
 8009f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f48:	07d9      	lsls	r1, r3, #31
 8009f4a:	d405      	bmi.n	8009f58 <_vfiprintf_r+0x220>
 8009f4c:	89ab      	ldrh	r3, [r5, #12]
 8009f4e:	059a      	lsls	r2, r3, #22
 8009f50:	d402      	bmi.n	8009f58 <_vfiprintf_r+0x220>
 8009f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f54:	f7fe ff68 	bl	8008e28 <__retarget_lock_release_recursive>
 8009f58:	89ab      	ldrh	r3, [r5, #12]
 8009f5a:	065b      	lsls	r3, r3, #25
 8009f5c:	f53f af12 	bmi.w	8009d84 <_vfiprintf_r+0x4c>
 8009f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f62:	e711      	b.n	8009d88 <_vfiprintf_r+0x50>
 8009f64:	ab03      	add	r3, sp, #12
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	462a      	mov	r2, r5
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <_vfiprintf_r+0x258>)
 8009f6c:	a904      	add	r1, sp, #16
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7fc f84e 	bl	8006010 <_printf_i>
 8009f74:	e7e4      	b.n	8009f40 <_vfiprintf_r+0x208>
 8009f76:	bf00      	nop
 8009f78:	0800b0d0 	.word	0x0800b0d0
 8009f7c:	0800b0f0 	.word	0x0800b0f0
 8009f80:	0800b0b0 	.word	0x0800b0b0
 8009f84:	0800b2ec 	.word	0x0800b2ec
 8009f88:	0800b2f6 	.word	0x0800b2f6
 8009f8c:	08005ac9 	.word	0x08005ac9
 8009f90:	08009d13 	.word	0x08009d13
 8009f94:	0800b2f2 	.word	0x0800b2f2

08009f98 <nan>:
 8009f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009fa0 <nan+0x8>
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	00000000 	.word	0x00000000
 8009fa4:	7ff80000 	.word	0x7ff80000

08009fa8 <_sbrk_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d06      	ldr	r5, [pc, #24]	; (8009fc4 <_sbrk_r+0x1c>)
 8009fac:	2300      	movs	r3, #0
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	f7f8 fc72 	bl	800289c <_sbrk>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_sbrk_r+0x1a>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_sbrk_r+0x1a>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20000398 	.word	0x20000398

08009fc8 <__sread>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	460c      	mov	r4, r1
 8009fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd0:	f000 f92e 	bl	800a230 <_read_r>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	bfab      	itete	ge
 8009fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fda:	89a3      	ldrhlt	r3, [r4, #12]
 8009fdc:	181b      	addge	r3, r3, r0
 8009fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fe2:	bfac      	ite	ge
 8009fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fe6:	81a3      	strhlt	r3, [r4, #12]
 8009fe8:	bd10      	pop	{r4, pc}

08009fea <__swrite>:
 8009fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fee:	461f      	mov	r7, r3
 8009ff0:	898b      	ldrh	r3, [r1, #12]
 8009ff2:	05db      	lsls	r3, r3, #23
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	d505      	bpl.n	800a008 <__swrite+0x1e>
 8009ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a000:	2302      	movs	r3, #2
 800a002:	2200      	movs	r2, #0
 800a004:	f000 f8b6 	bl	800a174 <_lseek_r>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a012:	81a3      	strh	r3, [r4, #12]
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	4628      	mov	r0, r5
 800a01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a01e:	f000 b835 	b.w	800a08c <_write_r>

0800a022 <__sseek>:
 800a022:	b510      	push	{r4, lr}
 800a024:	460c      	mov	r4, r1
 800a026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02a:	f000 f8a3 	bl	800a174 <_lseek_r>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	bf15      	itete	ne
 800a034:	6560      	strne	r0, [r4, #84]	; 0x54
 800a036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a03e:	81a3      	strheq	r3, [r4, #12]
 800a040:	bf18      	it	ne
 800a042:	81a3      	strhne	r3, [r4, #12]
 800a044:	bd10      	pop	{r4, pc}

0800a046 <__sclose>:
 800a046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04a:	f000 b84f 	b.w	800a0ec <_close_r>

0800a04e <strncmp>:
 800a04e:	b510      	push	{r4, lr}
 800a050:	b16a      	cbz	r2, 800a06e <strncmp+0x20>
 800a052:	3901      	subs	r1, #1
 800a054:	1884      	adds	r4, r0, r2
 800a056:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a05a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a05e:	4293      	cmp	r3, r2
 800a060:	d103      	bne.n	800a06a <strncmp+0x1c>
 800a062:	42a0      	cmp	r0, r4
 800a064:	d001      	beq.n	800a06a <strncmp+0x1c>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f5      	bne.n	800a056 <strncmp+0x8>
 800a06a:	1a98      	subs	r0, r3, r2
 800a06c:	bd10      	pop	{r4, pc}
 800a06e:	4610      	mov	r0, r2
 800a070:	e7fc      	b.n	800a06c <strncmp+0x1e>

0800a072 <__ascii_wctomb>:
 800a072:	b149      	cbz	r1, 800a088 <__ascii_wctomb+0x16>
 800a074:	2aff      	cmp	r2, #255	; 0xff
 800a076:	bf85      	ittet	hi
 800a078:	238a      	movhi	r3, #138	; 0x8a
 800a07a:	6003      	strhi	r3, [r0, #0]
 800a07c:	700a      	strbls	r2, [r1, #0]
 800a07e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a082:	bf98      	it	ls
 800a084:	2001      	movls	r0, #1
 800a086:	4770      	bx	lr
 800a088:	4608      	mov	r0, r1
 800a08a:	4770      	bx	lr

0800a08c <_write_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	; (800a0ac <_write_r+0x20>)
 800a090:	4604      	mov	r4, r0
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f8 fba8 	bl	80027f0 <_write>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_write_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_write_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20000398 	.word	0x20000398

0800a0b0 <__assert_func>:
 800a0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0b2:	4614      	mov	r4, r2
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <__assert_func+0x2c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	68d8      	ldr	r0, [r3, #12]
 800a0be:	b14c      	cbz	r4, 800a0d4 <__assert_func+0x24>
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <__assert_func+0x30>)
 800a0c2:	9100      	str	r1, [sp, #0]
 800a0c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0c8:	4906      	ldr	r1, [pc, #24]	; (800a0e4 <__assert_func+0x34>)
 800a0ca:	462b      	mov	r3, r5
 800a0cc:	f000 f81e 	bl	800a10c <fiprintf>
 800a0d0:	f000 f8c0 	bl	800a254 <abort>
 800a0d4:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <__assert_func+0x38>)
 800a0d6:	461c      	mov	r4, r3
 800a0d8:	e7f3      	b.n	800a0c2 <__assert_func+0x12>
 800a0da:	bf00      	nop
 800a0dc:	20000030 	.word	0x20000030
 800a0e0:	0800b2fd 	.word	0x0800b2fd
 800a0e4:	0800b30a 	.word	0x0800b30a
 800a0e8:	0800b338 	.word	0x0800b338

0800a0ec <_close_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d06      	ldr	r5, [pc, #24]	; (800a108 <_close_r+0x1c>)
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f8 fb9c 	bl	8002834 <_close>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d102      	bne.n	800a106 <_close_r+0x1a>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	b103      	cbz	r3, 800a106 <_close_r+0x1a>
 800a104:	6023      	str	r3, [r4, #0]
 800a106:	bd38      	pop	{r3, r4, r5, pc}
 800a108:	20000398 	.word	0x20000398

0800a10c <fiprintf>:
 800a10c:	b40e      	push	{r1, r2, r3}
 800a10e:	b503      	push	{r0, r1, lr}
 800a110:	4601      	mov	r1, r0
 800a112:	ab03      	add	r3, sp, #12
 800a114:	4805      	ldr	r0, [pc, #20]	; (800a12c <fiprintf+0x20>)
 800a116:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	9301      	str	r3, [sp, #4]
 800a11e:	f7ff fe0b 	bl	8009d38 <_vfiprintf_r>
 800a122:	b002      	add	sp, #8
 800a124:	f85d eb04 	ldr.w	lr, [sp], #4
 800a128:	b003      	add	sp, #12
 800a12a:	4770      	bx	lr
 800a12c:	20000030 	.word	0x20000030

0800a130 <_fstat_r>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	4d07      	ldr	r5, [pc, #28]	; (800a150 <_fstat_r+0x20>)
 800a134:	2300      	movs	r3, #0
 800a136:	4604      	mov	r4, r0
 800a138:	4608      	mov	r0, r1
 800a13a:	4611      	mov	r1, r2
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	f7f8 fb85 	bl	800284c <_fstat>
 800a142:	1c43      	adds	r3, r0, #1
 800a144:	d102      	bne.n	800a14c <_fstat_r+0x1c>
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	b103      	cbz	r3, 800a14c <_fstat_r+0x1c>
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	bf00      	nop
 800a150:	20000398 	.word	0x20000398

0800a154 <_isatty_r>:
 800a154:	b538      	push	{r3, r4, r5, lr}
 800a156:	4d06      	ldr	r5, [pc, #24]	; (800a170 <_isatty_r+0x1c>)
 800a158:	2300      	movs	r3, #0
 800a15a:	4604      	mov	r4, r0
 800a15c:	4608      	mov	r0, r1
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	f7f8 fb84 	bl	800286c <_isatty>
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d102      	bne.n	800a16e <_isatty_r+0x1a>
 800a168:	682b      	ldr	r3, [r5, #0]
 800a16a:	b103      	cbz	r3, 800a16e <_isatty_r+0x1a>
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	20000398 	.word	0x20000398

0800a174 <_lseek_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	4d07      	ldr	r5, [pc, #28]	; (800a194 <_lseek_r+0x20>)
 800a178:	4604      	mov	r4, r0
 800a17a:	4608      	mov	r0, r1
 800a17c:	4611      	mov	r1, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	f7f8 fb7d 	bl	8002882 <_lseek>
 800a188:	1c43      	adds	r3, r0, #1
 800a18a:	d102      	bne.n	800a192 <_lseek_r+0x1e>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	b103      	cbz	r3, 800a192 <_lseek_r+0x1e>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	20000398 	.word	0x20000398

0800a198 <memmove>:
 800a198:	4288      	cmp	r0, r1
 800a19a:	b510      	push	{r4, lr}
 800a19c:	eb01 0402 	add.w	r4, r1, r2
 800a1a0:	d902      	bls.n	800a1a8 <memmove+0x10>
 800a1a2:	4284      	cmp	r4, r0
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	d807      	bhi.n	800a1b8 <memmove+0x20>
 800a1a8:	1e43      	subs	r3, r0, #1
 800a1aa:	42a1      	cmp	r1, r4
 800a1ac:	d008      	beq.n	800a1c0 <memmove+0x28>
 800a1ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1b6:	e7f8      	b.n	800a1aa <memmove+0x12>
 800a1b8:	4402      	add	r2, r0
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	428a      	cmp	r2, r1
 800a1be:	d100      	bne.n	800a1c2 <memmove+0x2a>
 800a1c0:	bd10      	pop	{r4, pc}
 800a1c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ca:	e7f7      	b.n	800a1bc <memmove+0x24>

0800a1cc <__malloc_lock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	; (800a1d4 <__malloc_lock+0x8>)
 800a1ce:	f7fe be2a 	b.w	8008e26 <__retarget_lock_acquire_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	20000390 	.word	0x20000390

0800a1d8 <__malloc_unlock>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__malloc_unlock+0x8>)
 800a1da:	f7fe be25 	b.w	8008e28 <__retarget_lock_release_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20000390 	.word	0x20000390

0800a1e4 <_realloc_r>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	460e      	mov	r6, r1
 800a1ec:	b921      	cbnz	r1, 800a1f8 <_realloc_r+0x14>
 800a1ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	f7ff bbc0 	b.w	8009978 <_malloc_r>
 800a1f8:	b922      	cbnz	r2, 800a204 <_realloc_r+0x20>
 800a1fa:	f7ff fb6d 	bl	80098d8 <_free_r>
 800a1fe:	4625      	mov	r5, r4
 800a200:	4628      	mov	r0, r5
 800a202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a204:	f000 f82d 	bl	800a262 <_malloc_usable_size_r>
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d20f      	bcs.n	800a22c <_realloc_r+0x48>
 800a20c:	4621      	mov	r1, r4
 800a20e:	4638      	mov	r0, r7
 800a210:	f7ff fbb2 	bl	8009978 <_malloc_r>
 800a214:	4605      	mov	r5, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	d0f2      	beq.n	800a200 <_realloc_r+0x1c>
 800a21a:	4631      	mov	r1, r6
 800a21c:	4622      	mov	r2, r4
 800a21e:	f7fe fe83 	bl	8008f28 <memcpy>
 800a222:	4631      	mov	r1, r6
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff fb57 	bl	80098d8 <_free_r>
 800a22a:	e7e9      	b.n	800a200 <_realloc_r+0x1c>
 800a22c:	4635      	mov	r5, r6
 800a22e:	e7e7      	b.n	800a200 <_realloc_r+0x1c>

0800a230 <_read_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d07      	ldr	r5, [pc, #28]	; (800a250 <_read_r+0x20>)
 800a234:	4604      	mov	r4, r0
 800a236:	4608      	mov	r0, r1
 800a238:	4611      	mov	r1, r2
 800a23a:	2200      	movs	r2, #0
 800a23c:	602a      	str	r2, [r5, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f7f8 fab8 	bl	80027b4 <_read>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_read_r+0x1e>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_read_r+0x1e>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000398 	.word	0x20000398

0800a254 <abort>:
 800a254:	b508      	push	{r3, lr}
 800a256:	2006      	movs	r0, #6
 800a258:	f000 f834 	bl	800a2c4 <raise>
 800a25c:	2001      	movs	r0, #1
 800a25e:	f7f8 fa9f 	bl	80027a0 <_exit>

0800a262 <_malloc_usable_size_r>:
 800a262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a266:	1f18      	subs	r0, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbc      	itt	lt
 800a26c:	580b      	ldrlt	r3, [r1, r0]
 800a26e:	18c0      	addlt	r0, r0, r3
 800a270:	4770      	bx	lr

0800a272 <_raise_r>:
 800a272:	291f      	cmp	r1, #31
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	d904      	bls.n	800a286 <_raise_r+0x14>
 800a27c:	2316      	movs	r3, #22
 800a27e:	6003      	str	r3, [r0, #0]
 800a280:	f04f 30ff 	mov.w	r0, #4294967295
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a288:	b112      	cbz	r2, 800a290 <_raise_r+0x1e>
 800a28a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a28e:	b94b      	cbnz	r3, 800a2a4 <_raise_r+0x32>
 800a290:	4620      	mov	r0, r4
 800a292:	f000 f831 	bl	800a2f8 <_getpid_r>
 800a296:	462a      	mov	r2, r5
 800a298:	4601      	mov	r1, r0
 800a29a:	4620      	mov	r0, r4
 800a29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a0:	f000 b818 	b.w	800a2d4 <_kill_r>
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d00a      	beq.n	800a2be <_raise_r+0x4c>
 800a2a8:	1c59      	adds	r1, r3, #1
 800a2aa:	d103      	bne.n	800a2b4 <_raise_r+0x42>
 800a2ac:	2316      	movs	r3, #22
 800a2ae:	6003      	str	r3, [r0, #0]
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	e7e7      	b.n	800a284 <_raise_r+0x12>
 800a2b4:	2400      	movs	r4, #0
 800a2b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	4798      	blx	r3
 800a2be:	2000      	movs	r0, #0
 800a2c0:	e7e0      	b.n	800a284 <_raise_r+0x12>
	...

0800a2c4 <raise>:
 800a2c4:	4b02      	ldr	r3, [pc, #8]	; (800a2d0 <raise+0xc>)
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f7ff bfd2 	b.w	800a272 <_raise_r>
 800a2ce:	bf00      	nop
 800a2d0:	20000030 	.word	0x20000030

0800a2d4 <_kill_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	; (800a2f4 <_kill_r+0x20>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f8 fa4d 	bl	8002780 <_kill>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_kill_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_kill_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000398 	.word	0x20000398

0800a2f8 <_getpid_r>:
 800a2f8:	f7f8 ba3a 	b.w	8002770 <_getpid>

0800a2fc <_init>:
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fe:	bf00      	nop
 800a300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a302:	bc08      	pop	{r3}
 800a304:	469e      	mov	lr, r3
 800a306:	4770      	bx	lr

0800a308 <_fini>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	bf00      	nop
 800a30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30e:	bc08      	pop	{r3}
 800a310:	469e      	mov	lr, r3
 800a312:	4770      	bx	lr
